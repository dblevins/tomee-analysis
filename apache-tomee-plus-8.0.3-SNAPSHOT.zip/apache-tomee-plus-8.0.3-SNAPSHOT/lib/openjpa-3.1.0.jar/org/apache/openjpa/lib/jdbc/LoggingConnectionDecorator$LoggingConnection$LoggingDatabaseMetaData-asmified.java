package asm.org.apache.openjpa.lib.jdbc;
import org.objectweb.asm.AnnotationVisitor;
import org.objectweb.asm.Attribute;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.ConstantDynamic;
import org.objectweb.asm.FieldVisitor;
import org.objectweb.asm.Handle;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.RecordComponentVisitor;
import org.objectweb.asm.Type;
import org.objectweb.asm.TypePath;
public class LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaDataDump implements Opcodes {

public static byte[] dump () throws Exception {

ClassWriter classWriter = new ClassWriter(0);
FieldVisitor fieldVisitor;
RecordComponentVisitor recordComponentVisitor;
MethodVisitor methodVisitor;
AnnotationVisitor annotationVisitor0;

classWriter.visit(V1_8, ACC_PUBLIC | ACC_SUPER, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", null, "org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData", null);

classWriter.visitInnerClass("org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "LoggingConnection", ACC_PROTECTED);

classWriter.visitInnerClass("org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "LoggingDatabaseMetaData", ACC_PROTECTED);

{
fieldVisitor = classWriter.visitField(ACC_FINAL | ACC_SYNTHETIC, "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;", null, null);
fieldVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "<init>", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;Ljava/sql/DatabaseMetaData;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData", "<init>", "(Ljava/sql/DatabaseMetaData;Ljava/sql/Connection;)V", false);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(3, 3);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getBestRowIdentifier", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IZ)Ljava/sql/ResultSet;", null, new String[] { "java/sql/SQLException" });
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "isJDBCEnabled", "()Z", false);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
methodVisitor.visitLdcInsn("getBestRowIdentifier: ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn(", ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn(", ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "logJDBC", "(Ljava/lang/String;Ljava/sql/Connection;)V", false);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ILOAD, 4);
methodVisitor.visitVarInsn(ILOAD, 5);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData", "getBestRowIdentifier", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IZ)Ljava/sql/ResultSet;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(6, 6);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getCatalogs", "()Ljava/sql/ResultSet;", null, new String[] { "java/sql/SQLException" });
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "isJDBCEnabled", "()Z", false);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitLdcInsn("getCatalogs");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "logJDBC", "(Ljava/lang/String;Ljava/sql/Connection;)V", false);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData", "getCatalogs", "()Ljava/sql/ResultSet;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(3, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getColumnPrivileges", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;", null, new String[] { "java/sql/SQLException" });
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "isJDBCEnabled", "()Z", false);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
methodVisitor.visitLdcInsn("getColumnPrivileges: ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn(", ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn(", ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "logJDBC", "(Ljava/lang/String;Ljava/sql/Connection;)V", false);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData", "getColumnPrivileges", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(5, 5);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getColumns", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;", null, new String[] { "java/sql/SQLException" });
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "isJDBCEnabled", "()Z", false);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
methodVisitor.visitLdcInsn("getColumns: ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn(", ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn(", ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn(", ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "logJDBC", "(Ljava/lang/String;Ljava/sql/Connection;)V", false);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData", "getColumns", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(5, 5);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getCrossReference", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;", null, new String[] { "java/sql/SQLException" });
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "isJDBCEnabled", "()Z", false);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
methodVisitor.visitLdcInsn("getCrossReference: ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn(", ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn(", ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn(", ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn(", ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn(", ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "logJDBC", "(Ljava/lang/String;Ljava/sql/Connection;)V", false);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData", "getCrossReference", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(7, 7);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getExportedKeys", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;", null, new String[] { "java/sql/SQLException" });
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "isJDBCEnabled", "()Z", false);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
methodVisitor.visitLdcInsn("getExportedKeys: ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn(", ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn(", ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "logJDBC", "(Ljava/lang/String;Ljava/sql/Connection;)V", false);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData", "getExportedKeys", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(4, 4);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getImportedKeys", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;", null, new String[] { "java/sql/SQLException" });
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "isJDBCEnabled", "()Z", false);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
methodVisitor.visitLdcInsn("getImportedKeys: ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn(", ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn(", ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "logJDBC", "(Ljava/lang/String;Ljava/sql/Connection;)V", false);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData", "getImportedKeys", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(4, 4);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getIndexInfo", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Ljava/sql/ResultSet;", null, new String[] { "java/sql/SQLException" });
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "isJDBCEnabled", "()Z", false);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
methodVisitor.visitLdcInsn("getIndexInfo: ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn(", ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn(", ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "logJDBC", "(Ljava/lang/String;Ljava/sql/Connection;)V", false);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ILOAD, 4);
methodVisitor.visitVarInsn(ILOAD, 5);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData", "getIndexInfo", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Ljava/sql/ResultSet;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(6, 6);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getPrimaryKeys", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;", null, new String[] { "java/sql/SQLException" });
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "isJDBCEnabled", "()Z", false);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
methodVisitor.visitLdcInsn("getPrimaryKeys: ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn(", ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn(", ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "logJDBC", "(Ljava/lang/String;Ljava/sql/Connection;)V", false);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData", "getPrimaryKeys", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(4, 4);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getProcedureColumns", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;", null, new String[] { "java/sql/SQLException" });
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "isJDBCEnabled", "()Z", false);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
methodVisitor.visitLdcInsn("getProcedureColumns: ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn(", ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn(", ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn(", ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "logJDBC", "(Ljava/lang/String;Ljava/sql/Connection;)V", false);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData", "getProcedureColumns", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(5, 5);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getProcedures", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;", null, new String[] { "java/sql/SQLException" });
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "isJDBCEnabled", "()Z", false);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
methodVisitor.visitLdcInsn("getProcedures: ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn(", ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn(", ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "logJDBC", "(Ljava/lang/String;Ljava/sql/Connection;)V", false);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData", "getProcedures", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(4, 4);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getSchemas", "()Ljava/sql/ResultSet;", null, new String[] { "java/sql/SQLException" });
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "isJDBCEnabled", "()Z", false);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitLdcInsn("getSchemas");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "logJDBC", "(Ljava/lang/String;Ljava/sql/Connection;)V", false);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData", "getSchemas", "()Ljava/sql/ResultSet;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(3, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getTablePrivileges", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;", null, new String[] { "java/sql/SQLException" });
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "isJDBCEnabled", "()Z", false);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitLdcInsn("getTablePrivileges");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "logJDBC", "(Ljava/lang/String;Ljava/sql/Connection;)V", false);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData", "getTablePrivileges", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(4, 4);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getTables", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/ResultSet;", null, new String[] { "java/sql/SQLException" });
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "isJDBCEnabled", "()Z", false);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
methodVisitor.visitLdcInsn("getTables: ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn(", ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn(", ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "logJDBC", "(Ljava/lang/String;Ljava/sql/Connection;)V", false);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData", "getTables", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/ResultSet;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(5, 5);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getTableTypes", "()Ljava/sql/ResultSet;", null, new String[] { "java/sql/SQLException" });
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "isJDBCEnabled", "()Z", false);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitLdcInsn("getTableTypes");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "logJDBC", "(Ljava/lang/String;Ljava/sql/Connection;)V", false);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData", "getTableTypes", "()Ljava/sql/ResultSet;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(3, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getTypeInfo", "()Ljava/sql/ResultSet;", null, new String[] { "java/sql/SQLException" });
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "isJDBCEnabled", "()Z", false);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitLdcInsn("getTypeInfo");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "logJDBC", "(Ljava/lang/String;Ljava/sql/Connection;)V", false);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData", "getTypeInfo", "()Ljava/sql/ResultSet;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(3, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getUDTs", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[I)Ljava/sql/ResultSet;", null, new String[] { "java/sql/SQLException" });
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "isJDBCEnabled", "()Z", false);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitLdcInsn("getUDTs");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "logJDBC", "(Ljava/lang/String;Ljava/sql/Connection;)V", false);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData", "getUDTs", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[I)Ljava/sql/ResultSet;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(5, 5);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getVersionColumns", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;", null, new String[] { "java/sql/SQLException" });
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "isJDBCEnabled", "()Z", false);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection", "this$0", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator", "access$100", "(Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator;)Lorg/apache/openjpa/lib/jdbc/DataSourceLogs;", false);
methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
methodVisitor.visitLdcInsn("getVersionColumns: ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn(", ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn(", ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection$LoggingDatabaseMetaData", "this$1", "Lorg/apache/openjpa/lib/jdbc/LoggingConnectionDecorator$LoggingConnection;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/jdbc/DataSourceLogs", "logJDBC", "(Ljava/lang/String;Ljava/sql/Connection;)V", false);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData", "getVersionColumns", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(4, 4);
methodVisitor.visitEnd();
}
classWriter.visitEnd();

return classWriter.toByteArray();
}
}
