package asm.org.apache.activemq.transport.failover;
import org.objectweb.asm.AnnotationVisitor;
import org.objectweb.asm.Attribute;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.ConstantDynamic;
import org.objectweb.asm.FieldVisitor;
import org.objectweb.asm.Handle;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.RecordComponentVisitor;
import org.objectweb.asm.Type;
import org.objectweb.asm.TypePath;
public class FailoverTransport$2Dump implements Opcodes {

public static byte[] dump () throws Exception {

ClassWriter classWriter = new ClassWriter(0);
FieldVisitor fieldVisitor;
RecordComponentVisitor recordComponentVisitor;
MethodVisitor methodVisitor;
AnnotationVisitor annotationVisitor0;

classWriter.visit(V1_8, ACC_SUPER, "org/apache/activemq/transport/failover/FailoverTransport$2", null, "java/lang/Object", new String[] { "org/apache/activemq/thread/Task" });

classWriter.visitOuterClass("org/apache/activemq/transport/failover/FailoverTransport", "<init>", "()V");

classWriter.visitInnerClass("org/apache/activemq/transport/failover/FailoverTransport$2", null, null, 0);

{
fieldVisitor = classWriter.visitField(ACC_FINAL | ACC_SYNTHETIC, "this$0", "Lorg/apache/activemq/transport/failover/FailoverTransport;", null, null);
fieldVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "<init>", "(Lorg/apache/activemq/transport/failover/FailoverTransport;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/activemq/transport/failover/FailoverTransport$2", "this$0", "Lorg/apache/activemq/transport/failover/FailoverTransport;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(2, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "iterate", "()Z", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
Label label1 = new Label();
Label label2 = new Label();
methodVisitor.visitTryCatchBlock(label0, label1, label2, null);
Label label3 = new Label();
methodVisitor.visitTryCatchBlock(label2, label3, label2, null);
Label label4 = new Label();
Label label5 = new Label();
Label label6 = new Label();
methodVisitor.visitTryCatchBlock(label4, label5, label6, "java/lang/InterruptedException");
Label label7 = new Label();
Label label8 = new Label();
methodVisitor.visitTryCatchBlock(label7, label8, label6, "java/lang/InterruptedException");
Label label9 = new Label();
Label label10 = new Label();
Label label11 = new Label();
methodVisitor.visitTryCatchBlock(label9, label10, label11, "java/lang/InterruptedException");
Label label12 = new Label();
Label label13 = new Label();
methodVisitor.visitTryCatchBlock(label12, label13, label11, "java/lang/InterruptedException");
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ISTORE, 1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/activemq/transport/failover/FailoverTransport$2", "this$0", "Lorg/apache/activemq/transport/failover/FailoverTransport;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/activemq/transport/failover/FailoverTransport", "access$000", "(Lorg/apache/activemq/transport/failover/FailoverTransport;)Z", false);
Label label14 = new Label();
methodVisitor.visitJumpInsn(IFNE, label14);
methodVisitor.visitVarInsn(ILOAD, 1);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitLabel(label14);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitVarInsn(ISTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/activemq/transport/failover/FailoverTransport$2", "this$0", "Lorg/apache/activemq/transport/failover/FailoverTransport;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/activemq/transport/failover/FailoverTransport", "access$100", "(Lorg/apache/activemq/transport/failover/FailoverTransport;)Ljava/lang/Object;", false);
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitInsn(MONITORENTER);
methodVisitor.visitLabel(label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/activemq/transport/failover/FailoverTransport$2", "this$0", "Lorg/apache/activemq/transport/failover/FailoverTransport;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/activemq/transport/failover/FailoverTransport", "access$200", "(Lorg/apache/activemq/transport/failover/FailoverTransport;)Ljava/util/concurrent/atomic/AtomicReference;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/atomic/AtomicReference", "get", "()Ljava/lang/Object;", false);
Label label15 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label15);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/activemq/transport/failover/FailoverTransport$2", "this$0", "Lorg/apache/activemq/transport/failover/FailoverTransport;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/activemq/transport/failover/FailoverTransport", "access$300", "(Lorg/apache/activemq/transport/failover/FailoverTransport;)Z", false);
methodVisitor.visitJumpInsn(IFNE, label15);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/activemq/transport/failover/FailoverTransport$2", "this$0", "Lorg/apache/activemq/transport/failover/FailoverTransport;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/activemq/transport/failover/FailoverTransport", "access$400", "(Lorg/apache/activemq/transport/failover/FailoverTransport;)Z", false);
Label label16 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label16);
methodVisitor.visitLabel(label15);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {Opcodes.INTEGER, "java/lang/Object"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/activemq/transport/failover/FailoverTransport$2", "this$0", "Lorg/apache/activemq/transport/failover/FailoverTransport;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/activemq/transport/failover/FailoverTransport", "access$500", "(Lorg/apache/activemq/transport/failover/FailoverTransport;)Z", false);
methodVisitor.visitJumpInsn(IFNE, label16);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/activemq/transport/failover/FailoverTransport$2", "this$0", "Lorg/apache/activemq/transport/failover/FailoverTransport;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/activemq/transport/failover/FailoverTransport", "doReconnect", "()Z", false);
methodVisitor.visitVarInsn(ISTORE, 1);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ISTORE, 2);
methodVisitor.visitLabel(label16);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(MONITOREXIT);
methodVisitor.visitLabel(label1);
Label label17 = new Label();
methodVisitor.visitJumpInsn(GOTO, label17);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Throwable"});
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(MONITOREXIT);
methodVisitor.visitLabel(label3);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label17);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitVarInsn(ILOAD, 2);
Label label18 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label18);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/activemq/transport/failover/FailoverTransport$2", "this$0", "Lorg/apache/activemq/transport/failover/FailoverTransport;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/activemq/transport/failover/FailoverTransport", "buildBackups", "()Z", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/activemq/transport/failover/FailoverTransport$2", "this$0", "Lorg/apache/activemq/transport/failover/FailoverTransport;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/activemq/transport/failover/FailoverTransport", "access$600", "(Lorg/apache/activemq/transport/failover/FailoverTransport;)Z", false);
Label label19 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label19);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/activemq/transport/failover/FailoverTransport$2", "this$0", "Lorg/apache/activemq/transport/failover/FailoverTransport;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/activemq/transport/failover/FailoverTransport", "access$700", "(Lorg/apache/activemq/transport/failover/FailoverTransport;)Z", false);
methodVisitor.visitJumpInsn(IFNE, label19);
methodVisitor.visitLabel(label4);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/activemq/transport/failover/FailoverTransport$2", "this$0", "Lorg/apache/activemq/transport/failover/FailoverTransport;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/activemq/transport/failover/FailoverTransport", "access$800", "(Lorg/apache/activemq/transport/failover/FailoverTransport;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/activemq/transport/failover/FailoverTransport$2", "this$0", "Lorg/apache/activemq/transport/failover/FailoverTransport;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/activemq/transport/failover/FailoverTransport", "access$900", "(Lorg/apache/activemq/transport/failover/FailoverTransport;)Lorg/apache/activemq/thread/TaskRunner;", false);
methodVisitor.visitJumpInsn(IFNONNULL, label7);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitLabel(label5);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitLabel(label7);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/activemq/transport/failover/FailoverTransport$2", "this$0", "Lorg/apache/activemq/transport/failover/FailoverTransport;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/activemq/transport/failover/FailoverTransport", "access$900", "(Lorg/apache/activemq/transport/failover/FailoverTransport;)Lorg/apache/activemq/thread/TaskRunner;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/activemq/thread/TaskRunner", "wakeup", "()V", true);
methodVisitor.visitLabel(label8);
methodVisitor.visitJumpInsn(GOTO, label19);
methodVisitor.visitLabel(label6);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/InterruptedException"});
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/activemq/transport/failover/FailoverTransport", "access$1000", "()Lorg/slf4j/Logger;", false);
methodVisitor.visitLdcInsn("Reconnect task has been interrupted.");
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "debug", "(Ljava/lang/String;Ljava/lang/Throwable;)V", true);
methodVisitor.visitJumpInsn(GOTO, label19);
methodVisitor.visitLabel(label18);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitVarInsn(ISTORE, 2);
methodVisitor.visitLabel(label9);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/activemq/transport/failover/FailoverTransport$2", "this$0", "Lorg/apache/activemq/transport/failover/FailoverTransport;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/activemq/transport/failover/FailoverTransport", "access$900", "(Lorg/apache/activemq/transport/failover/FailoverTransport;)Lorg/apache/activemq/thread/TaskRunner;", false);
methodVisitor.visitJumpInsn(IFNONNULL, label12);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitLabel(label10);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitLabel(label12);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/activemq/transport/failover/FailoverTransport$2", "this$0", "Lorg/apache/activemq/transport/failover/FailoverTransport;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/activemq/transport/failover/FailoverTransport", "access$900", "(Lorg/apache/activemq/transport/failover/FailoverTransport;)Lorg/apache/activemq/thread/TaskRunner;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/activemq/thread/TaskRunner", "wakeup", "()V", true);
methodVisitor.visitLabel(label13);
methodVisitor.visitJumpInsn(GOTO, label19);
methodVisitor.visitLabel(label11);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/InterruptedException"});
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/activemq/transport/failover/FailoverTransport", "access$1000", "()Lorg/slf4j/Logger;", false);
methodVisitor.visitLdcInsn("Reconnect task has been interrupted.");
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "debug", "(Ljava/lang/String;Ljava/lang/Throwable;)V", true);
methodVisitor.visitLabel(label19);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ILOAD, 1);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitMaxs(3, 5);
methodVisitor.visitEnd();
}
classWriter.visitEnd();

return classWriter.toByteArray();
}
}
