package asm.org.apache.wss4j.policy.model;
import org.objectweb.asm.AnnotationVisitor;
import org.objectweb.asm.Attribute;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.ConstantDynamic;
import org.objectweb.asm.FieldVisitor;
import org.objectweb.asm.Handle;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.RecordComponentVisitor;
import org.objectweb.asm.Type;
import org.objectweb.asm.TypePath;
public class AlgorithmSuiteDump implements Opcodes {

public static byte[] dump () throws Exception {

ClassWriter classWriter = new ClassWriter(0);
FieldVisitor fieldVisitor;
RecordComponentVisitor recordComponentVisitor;
MethodVisitor methodVisitor;
AnnotationVisitor annotationVisitor0;

classWriter.visit(V1_8, ACC_PUBLIC | ACC_SUPER, "org/apache/wss4j/policy/model/AlgorithmSuite", null, "org/apache/wss4j/policy/model/AbstractSecurityAssertion", new String[] { "org/apache/neethi/PolicyContainingAssertion" });

classWriter.visitInnerClass("org/apache/wss4j/policy/model/AlgorithmSuite$STRType", "org/apache/wss4j/policy/model/AlgorithmSuite", "STRType", ACC_PUBLIC | ACC_FINAL | ACC_STATIC | ACC_ENUM);

classWriter.visitInnerClass("org/apache/wss4j/policy/model/AlgorithmSuite$SOAPNormType", "org/apache/wss4j/policy/model/AlgorithmSuite", "SOAPNormType", ACC_PUBLIC | ACC_FINAL | ACC_STATIC | ACC_ENUM);

classWriter.visitInnerClass("org/apache/wss4j/policy/model/AlgorithmSuite$C14NType", "org/apache/wss4j/policy/model/AlgorithmSuite", "C14NType", ACC_PUBLIC | ACC_FINAL | ACC_STATIC | ACC_ENUM);

classWriter.visitInnerClass("org/apache/wss4j/policy/model/AlgorithmSuite$XPathType", "org/apache/wss4j/policy/model/AlgorithmSuite", "XPathType", ACC_PUBLIC | ACC_FINAL | ACC_STATIC | ACC_ENUM);

classWriter.visitInnerClass("org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType", "org/apache/wss4j/policy/model/AlgorithmSuite", "AlgorithmSuiteType", ACC_PUBLIC | ACC_FINAL | ACC_STATIC);

classWriter.visitInnerClass("org/apache/wss4j/policy/SPConstants$SPVersion", "org/apache/wss4j/policy/SPConstants", "SPVersion", ACC_PUBLIC | ACC_FINAL | ACC_STATIC | ACC_ENUM);

{
fieldVisitor = classWriter.visitField(ACC_PROTECTED | ACC_FINAL | ACC_STATIC, "ALGORITHM_SUITE_TYPES", "Ljava/util/Map;", "Ljava/util/Map<Ljava/lang/String;Lorg/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType;>;", null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL | ACC_STATIC, "MAX_SKL", "I", null, new Integer(256));
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL | ACC_STATIC, "MIN_AKL", "I", null, new Integer(1024));
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL | ACC_STATIC, "MAX_AKL", "I", null, new Integer(4096));
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE, "nestedPolicy", "Lorg/apache/neethi/Policy;", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE, "algorithmSuiteType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType;", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE, "c14n", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$C14NType;", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE, "soapNormType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$SOAPNormType;", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE, "strType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$STRType;", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE, "xPathType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$XPathType;", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE, "symmetricSignature", "Ljava/lang/String;", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE, "asymmetricSignature", "Ljava/lang/String;", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE, "computedKey", "Ljava/lang/String;", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE, "firstInvalidAlgorithmSuite", "Ljava/lang/String;", null, null);
fieldVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "<init>", "(Lorg/apache/wss4j/policy/SPConstants$SPVersion;Lorg/apache/neethi/Policy;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/wss4j/policy/model/AbstractSecurityAssertion", "<init>", "(Lorg/apache/wss4j/policy/SPConstants$SPVersion;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/wss4j/policy/model/AlgorithmSuite$C14NType", "ExclusiveC14N", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$C14NType;");
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "c14n", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$C14NType;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/wss4j/policy/model/AlgorithmSuite$SOAPNormType", "SOAPNormalizationNone", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$SOAPNormType;");
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "soapNormType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$SOAPNormType;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/wss4j/policy/model/AlgorithmSuite$STRType", "STRTransformNone", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$STRType;");
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "strType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$STRType;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/wss4j/policy/model/AlgorithmSuite$XPathType", "XPathNone", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$XPathType;");
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "xPathType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$XPathType;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitLdcInsn("http://www.w3.org/2000/09/xmldsig#hmac-sha1");
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "symmetricSignature", "Ljava/lang/String;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitLdcInsn("http://www.w3.org/2000/09/xmldsig#rsa-sha1");
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "asymmetricSignature", "Ljava/lang/String;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "computedKey", "Ljava/lang/String;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "nestedPolicy", "Lorg/apache/neethi/Policy;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/wss4j/policy/model/AlgorithmSuite", "parseNestedPolicy", "(Lorg/apache/neethi/Policy;Lorg/apache/wss4j/policy/model/AlgorithmSuite;)V", false);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(3, 3);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getPolicy", "()Lorg/apache/neethi/Policy;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "nestedPolicy", "Lorg/apache/neethi/Policy;");
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(1, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getName", "()Ljavax/xml/namespace/QName;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/wss4j/policy/model/AlgorithmSuite", "getVersion", "()Lorg/apache/wss4j/policy/SPConstants$SPVersion;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/wss4j/policy/SPConstants$SPVersion", "getSPConstants", "()Lorg/apache/wss4j/policy/SPConstants;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/wss4j/policy/SPConstants", "getAlgorithmSuite", "()Ljavax/xml/namespace/QName;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(1, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "equals", "(Ljava/lang/Object;)Z", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 0);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IF_ACMPNE, label0);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitTypeInsn(INSTANCEOF, "org/apache/wss4j/policy/model/AlgorithmSuite");
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFNE, label1);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/wss4j/policy/model/AlgorithmSuite");
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "c14n", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$C14NType;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "c14n", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$C14NType;");
Label label2 = new Label();
methodVisitor.visitJumpInsn(IF_ACMPNE, label2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "soapNormType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$SOAPNormType;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "soapNormType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$SOAPNormType;");
methodVisitor.visitJumpInsn(IF_ACMPNE, label2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "strType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$STRType;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "strType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$STRType;");
methodVisitor.visitJumpInsn(IF_ACMPNE, label2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "xPathType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$XPathType;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "xPathType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$XPathType;");
Label label3 = new Label();
methodVisitor.visitJumpInsn(IF_ACMPEQ, label3);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/wss4j/policy/model/AlgorithmSuite"}, 0, null);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "algorithmSuiteType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType;");
Label label4 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label4);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "algorithmSuiteType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "algorithmSuiteType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType", "equals", "(Ljava/lang/Object;)Z", false);
Label label5 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label5);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "algorithmSuiteType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType;");
Label label6 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label6);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "algorithmSuiteType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType;");
methodVisitor.visitJumpInsn(IFNULL, label6);
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitLabel(label6);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "symmetricSignature", "Ljava/lang/String;");
Label label7 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label7);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "symmetricSignature", "Ljava/lang/String;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "symmetricSignature", "Ljava/lang/String;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z", false);
Label label8 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label8);
methodVisitor.visitLabel(label7);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "symmetricSignature", "Ljava/lang/String;");
Label label9 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label9);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "symmetricSignature", "Ljava/lang/String;");
methodVisitor.visitJumpInsn(IFNULL, label9);
methodVisitor.visitLabel(label8);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitLabel(label9);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "asymmetricSignature", "Ljava/lang/String;");
Label label10 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label10);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "asymmetricSignature", "Ljava/lang/String;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "asymmetricSignature", "Ljava/lang/String;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z", false);
Label label11 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label11);
methodVisitor.visitLabel(label10);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "asymmetricSignature", "Ljava/lang/String;");
Label label12 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label12);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "asymmetricSignature", "Ljava/lang/String;");
methodVisitor.visitJumpInsn(IFNULL, label12);
methodVisitor.visitLabel(label11);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitLabel(label12);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "computedKey", "Ljava/lang/String;");
Label label13 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label13);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "computedKey", "Ljava/lang/String;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "computedKey", "Ljava/lang/String;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z", false);
Label label14 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label14);
methodVisitor.visitLabel(label13);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "computedKey", "Ljava/lang/String;");
Label label15 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label15);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "computedKey", "Ljava/lang/String;");
methodVisitor.visitJumpInsn(IFNULL, label15);
methodVisitor.visitLabel(label14);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitLabel(label15);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/wss4j/policy/model/AbstractSecurityAssertion", "equals", "(Ljava/lang/Object;)Z", false);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitMaxs(2, 3);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "hashCode", "()I", null, null);
methodVisitor.visitCode();
methodVisitor.visitIntInsn(BIPUSH, 17);
methodVisitor.visitVarInsn(ISTORE, 1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "c14n", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$C14NType;");
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label0);
methodVisitor.visitIntInsn(BIPUSH, 31);
methodVisitor.visitVarInsn(ILOAD, 1);
methodVisitor.visitInsn(IMUL);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "c14n", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$C14NType;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/wss4j/policy/model/AlgorithmSuite$C14NType", "hashCode", "()I", false);
methodVisitor.visitInsn(IADD);
methodVisitor.visitVarInsn(ISTORE, 1);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "soapNormType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$SOAPNormType;");
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label1);
methodVisitor.visitIntInsn(BIPUSH, 31);
methodVisitor.visitVarInsn(ILOAD, 1);
methodVisitor.visitInsn(IMUL);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "soapNormType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$SOAPNormType;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/wss4j/policy/model/AlgorithmSuite$SOAPNormType", "hashCode", "()I", false);
methodVisitor.visitInsn(IADD);
methodVisitor.visitVarInsn(ISTORE, 1);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "strType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$STRType;");
Label label2 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label2);
methodVisitor.visitIntInsn(BIPUSH, 31);
methodVisitor.visitVarInsn(ILOAD, 1);
methodVisitor.visitInsn(IMUL);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "strType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$STRType;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/wss4j/policy/model/AlgorithmSuite$STRType", "hashCode", "()I", false);
methodVisitor.visitInsn(IADD);
methodVisitor.visitVarInsn(ISTORE, 1);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "xPathType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$XPathType;");
Label label3 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label3);
methodVisitor.visitIntInsn(BIPUSH, 31);
methodVisitor.visitVarInsn(ILOAD, 1);
methodVisitor.visitInsn(IMUL);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "xPathType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$XPathType;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/wss4j/policy/model/AlgorithmSuite$XPathType", "hashCode", "()I", false);
methodVisitor.visitInsn(IADD);
methodVisitor.visitVarInsn(ISTORE, 1);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "algorithmSuiteType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType;");
Label label4 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label4);
methodVisitor.visitIntInsn(BIPUSH, 31);
methodVisitor.visitVarInsn(ILOAD, 1);
methodVisitor.visitInsn(IMUL);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "algorithmSuiteType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType", "hashCode", "()I", false);
methodVisitor.visitInsn(IADD);
methodVisitor.visitVarInsn(ISTORE, 1);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "symmetricSignature", "Ljava/lang/String;");
Label label5 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label5);
methodVisitor.visitIntInsn(BIPUSH, 31);
methodVisitor.visitVarInsn(ILOAD, 1);
methodVisitor.visitInsn(IMUL);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "symmetricSignature", "Ljava/lang/String;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "hashCode", "()I", false);
methodVisitor.visitInsn(IADD);
methodVisitor.visitVarInsn(ISTORE, 1);
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "asymmetricSignature", "Ljava/lang/String;");
Label label6 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label6);
methodVisitor.visitIntInsn(BIPUSH, 31);
methodVisitor.visitVarInsn(ILOAD, 1);
methodVisitor.visitInsn(IMUL);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "asymmetricSignature", "Ljava/lang/String;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "hashCode", "()I", false);
methodVisitor.visitInsn(IADD);
methodVisitor.visitVarInsn(ISTORE, 1);
methodVisitor.visitLabel(label6);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "computedKey", "Ljava/lang/String;");
Label label7 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label7);
methodVisitor.visitIntInsn(BIPUSH, 31);
methodVisitor.visitVarInsn(ILOAD, 1);
methodVisitor.visitInsn(IMUL);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "computedKey", "Ljava/lang/String;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "hashCode", "()I", false);
methodVisitor.visitInsn(IADD);
methodVisitor.visitVarInsn(ISTORE, 1);
methodVisitor.visitLabel(label7);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitIntInsn(BIPUSH, 31);
methodVisitor.visitVarInsn(ILOAD, 1);
methodVisitor.visitInsn(IMUL);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/wss4j/policy/model/AbstractSecurityAssertion", "hashCode", "()I", false);
methodVisitor.visitInsn(IADD);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitMaxs(2, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "normalize", "()Lorg/apache/neethi/PolicyComponent;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/wss4j/policy/model/AlgorithmSuite", "getPolicy", "()Lorg/apache/neethi/Policy;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/wss4j/policy/model/AbstractSecurityAssertion", "normalize", "(Lorg/apache/neethi/Policy;)Lorg/apache/neethi/PolicyComponent;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(2, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "serialize", "(Ljavax/xml/stream/XMLStreamWriter;)V", null, new String[] { "javax/xml/stream/XMLStreamException" });
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/wss4j/policy/model/AlgorithmSuite", "getPolicy", "()Lorg/apache/neethi/Policy;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/wss4j/policy/model/AbstractSecurityAssertion", "serialize", "(Ljavax/xml/stream/XMLStreamWriter;Lorg/apache/neethi/Policy;)V", false);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(3, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PROTECTED, "cloneAssertion", "(Lorg/apache/neethi/Policy;)Lorg/apache/wss4j/policy/model/AbstractSecurityAssertion;", null, null);
methodVisitor.visitCode();
methodVisitor.visitTypeInsn(NEW, "org/apache/wss4j/policy/model/AlgorithmSuite");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/wss4j/policy/model/AlgorithmSuite", "getVersion", "()Lorg/apache/wss4j/policy/SPConstants$SPVersion;", false);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/wss4j/policy/model/AlgorithmSuite", "<init>", "(Lorg/apache/wss4j/policy/SPConstants$SPVersion;Lorg/apache/neethi/Policy;)V", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(4, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PROTECTED, "parseNestedPolicy", "(Lorg/apache/neethi/Policy;Lorg/apache/wss4j/policy/model/AlgorithmSuite;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/neethi/Policy", "getAlternatives", "()Ljava/util/Iterator;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
methodVisitor.visitTypeInsn(CHECKCAST, "java/util/List");
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "iterator", "()Ljava/util/Iterator;", true);
methodVisitor.visitVarInsn(ASTORE, 5);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_APPEND,3, new Object[] {"java/util/Iterator", "java/util/List", "java/util/Iterator"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true);
methodVisitor.visitJumpInsn(IFEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/neethi/Assertion");
methodVisitor.visitVarInsn(ASTORE, 6);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/neethi/Assertion", "getName", "()Ljavax/xml/namespace/QName;", true);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "javax/xml/namespace/QName", "getLocalPart", "()Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/neethi/Assertion", "getName", "()Ljavax/xml/namespace/QName;", true);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "javax/xml/namespace/QName", "getNamespaceURI", "()Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ASTORE, 8);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/wss4j/policy/model/AlgorithmSuite", "getVersion", "()Lorg/apache/wss4j/policy/SPConstants$SPVersion;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/wss4j/policy/SPConstants$SPVersion", "getNamespace", "()Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ALOAD, 8);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z", false);
Label label2 = new Label();
methodVisitor.visitJumpInsn(IFNE, label2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/wss4j/policy/model/AlgorithmSuite", "parseCustomAssertion", "(Lorg/apache/neethi/Assertion;)V", false);
methodVisitor.visitJumpInsn(GOTO, label1);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_APPEND,3, new Object[] {"org/apache/neethi/Assertion", "java/lang/String", "java/lang/String"}, 0, null);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/wss4j/policy/model/AlgorithmSuite", "ALGORITHM_SUITE_TYPES", "Ljava/util/Map;");
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType");
methodVisitor.visitVarInsn(ASTORE, 9);
methodVisitor.visitVarInsn(ALOAD, 9);
Label label3 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label3);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/wss4j/policy/model/AlgorithmSuite", "getAlgorithmSuiteType", "()Lorg/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType;", false);
Label label4 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label4);
methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("Invalid Policy");
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType"}, 0, null);
methodVisitor.visitTypeInsn(NEW, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 9);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType", "<init>", "(Lorg/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType;)V", false);
methodVisitor.visitVarInsn(ASTORE, 10);
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/wss4j/policy/model/AlgorithmSuite", "getVersion", "()Lorg/apache/wss4j/policy/SPConstants$SPVersion;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/wss4j/policy/SPConstants$SPVersion", "getNamespace", "()Ljava/lang/String;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType", "setNamespace", "(Ljava/lang/String;)V", false);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/wss4j/policy/model/AlgorithmSuite", "setAlgorithmSuiteType", "(Lorg/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType;)V", false);
methodVisitor.visitJumpInsn(GOTO, label1);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "firstInvalidAlgorithmSuite", "Ljava/lang/String;");
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/wss4j/policy/model/AlgorithmSuite$C14NType", "lookUp", "(Ljava/lang/String;)Lorg/apache/wss4j/policy/model/AlgorithmSuite$C14NType;", false);
methodVisitor.visitVarInsn(ASTORE, 10);
methodVisitor.visitVarInsn(ALOAD, 10);
Label label5 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label5);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/wss4j/policy/model/AlgorithmSuite", "setC14n", "(Lorg/apache/wss4j/policy/model/AlgorithmSuite$C14NType;)V", false);
methodVisitor.visitJumpInsn(GOTO, label1);
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/wss4j/policy/model/AlgorithmSuite$C14NType"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/wss4j/policy/model/AlgorithmSuite$SOAPNormType", "lookUp", "(Ljava/lang/String;)Lorg/apache/wss4j/policy/model/AlgorithmSuite$SOAPNormType;", false);
methodVisitor.visitVarInsn(ASTORE, 11);
methodVisitor.visitVarInsn(ALOAD, 11);
Label label6 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label6);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/wss4j/policy/model/AlgorithmSuite", "getSoapNormType", "()Lorg/apache/wss4j/policy/model/AlgorithmSuite$SOAPNormType;", false);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/wss4j/policy/model/AlgorithmSuite$SOAPNormType", "SOAPNormalization10", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$SOAPNormType;");
Label label7 = new Label();
methodVisitor.visitJumpInsn(IF_ACMPNE, label7);
methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("Invalid Policy");
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label7);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/wss4j/policy/model/AlgorithmSuite$SOAPNormType"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 11);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/wss4j/policy/model/AlgorithmSuite", "setSoapNormType", "(Lorg/apache/wss4j/policy/model/AlgorithmSuite$SOAPNormType;)V", false);
methodVisitor.visitJumpInsn(GOTO, label1);
methodVisitor.visitLabel(label6);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/wss4j/policy/model/AlgorithmSuite$STRType", "lookUp", "(Ljava/lang/String;)Lorg/apache/wss4j/policy/model/AlgorithmSuite$STRType;", false);
methodVisitor.visitVarInsn(ASTORE, 12);
methodVisitor.visitVarInsn(ALOAD, 12);
Label label8 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label8);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/wss4j/policy/model/AlgorithmSuite", "getStrType", "()Lorg/apache/wss4j/policy/model/AlgorithmSuite$STRType;", false);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/wss4j/policy/model/AlgorithmSuite$STRType", "STRTransform10", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$STRType;");
Label label9 = new Label();
methodVisitor.visitJumpInsn(IF_ACMPNE, label9);
methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("Invalid Policy");
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label9);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/wss4j/policy/model/AlgorithmSuite$STRType"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 12);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/wss4j/policy/model/AlgorithmSuite", "setStrType", "(Lorg/apache/wss4j/policy/model/AlgorithmSuite$STRType;)V", false);
methodVisitor.visitJumpInsn(GOTO, label1);
methodVisitor.visitLabel(label8);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/wss4j/policy/model/AlgorithmSuite$XPathType", "lookUp", "(Ljava/lang/String;)Lorg/apache/wss4j/policy/model/AlgorithmSuite$XPathType;", false);
methodVisitor.visitVarInsn(ASTORE, 13);
methodVisitor.visitVarInsn(ALOAD, 13);
Label label10 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label10);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/wss4j/policy/model/AlgorithmSuite", "getXPathType", "()Lorg/apache/wss4j/policy/model/AlgorithmSuite$XPathType;", false);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/wss4j/policy/model/AlgorithmSuite$XPathType", "XPathNone", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$XPathType;");
Label label11 = new Label();
methodVisitor.visitJumpInsn(IF_ACMPEQ, label11);
methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("Invalid Policy");
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label11);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/wss4j/policy/model/AlgorithmSuite$XPathType"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 13);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/wss4j/policy/model/AlgorithmSuite", "setXPathType", "(Lorg/apache/wss4j/policy/model/AlgorithmSuite$XPathType;)V", false);
methodVisitor.visitJumpInsn(GOTO, label1);
methodVisitor.visitLabel(label10);
methodVisitor.visitFrame(Opcodes.F_FULL, 6, new Object[] {"org/apache/wss4j/policy/model/AlgorithmSuite", "org/apache/neethi/Policy", "org/apache/wss4j/policy/model/AlgorithmSuite", "java/util/Iterator", "java/util/List", "java/util/Iterator"}, 0, new Object[] {});
methodVisitor.visitJumpInsn(GOTO, label1);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(3, 14);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PROTECTED, "parseCustomAssertion", "(Lorg/apache/neethi/Assertion;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(0, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getAlgorithmSuiteType", "()Lorg/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "algorithmSuiteType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType;");
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(1, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PROTECTED, "setAlgorithmSuiteType", "(Lorg/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "algorithmSuiteType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType;");
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(2, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getC14n", "()Lorg/apache/wss4j/policy/model/AlgorithmSuite$C14NType;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "c14n", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$C14NType;");
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(1, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PROTECTED, "setC14n", "(Lorg/apache/wss4j/policy/model/AlgorithmSuite$C14NType;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "c14n", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$C14NType;");
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(2, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getSoapNormType", "()Lorg/apache/wss4j/policy/model/AlgorithmSuite$SOAPNormType;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "soapNormType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$SOAPNormType;");
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(1, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PROTECTED, "setSoapNormType", "(Lorg/apache/wss4j/policy/model/AlgorithmSuite$SOAPNormType;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "soapNormType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$SOAPNormType;");
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(2, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getStrType", "()Lorg/apache/wss4j/policy/model/AlgorithmSuite$STRType;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "strType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$STRType;");
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(1, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PROTECTED, "setStrType", "(Lorg/apache/wss4j/policy/model/AlgorithmSuite$STRType;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "strType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$STRType;");
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(2, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getXPathType", "()Lorg/apache/wss4j/policy/model/AlgorithmSuite$XPathType;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "xPathType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$XPathType;");
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(1, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PROTECTED, "setXPathType", "(Lorg/apache/wss4j/policy/model/AlgorithmSuite$XPathType;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "xPathType", "Lorg/apache/wss4j/policy/model/AlgorithmSuite$XPathType;");
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(2, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getAsymmetricSignature", "()Ljava/lang/String;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "asymmetricSignature", "Ljava/lang/String;");
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(1, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getSymmetricSignature", "()Ljava/lang/String;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "symmetricSignature", "Ljava/lang/String;");
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(1, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getComputedKey", "()Ljava/lang/String;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "computedKey", "Ljava/lang/String;");
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(1, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, "getSupportedAlgorithmSuiteNames", "()Ljava/util/Collection;", "()Ljava/util/Collection<Ljava/lang/String;>;", null);
methodVisitor.visitCode();
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/wss4j/policy/model/AlgorithmSuite", "ALGORITHM_SUITE_TYPES", "Ljava/util/Map;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "keySet", "()Ljava/util/Set;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(1, 0);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "setSymmetricSignature", "(Ljava/lang/String;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "symmetricSignature", "Ljava/lang/String;");
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(2, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "setAsymmetricSignature", "(Ljava/lang/String;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "asymmetricSignature", "Ljava/lang/String;");
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(2, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getFirstInvalidAlgorithmSuite", "()Ljava/lang/String;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/wss4j/policy/model/AlgorithmSuite", "firstInvalidAlgorithmSuite", "Ljava/lang/String;");
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(1, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_STATIC, "<clinit>", "()V", null, null);
methodVisitor.visitCode();
methodVisitor.visitTypeInsn(NEW, "java/util/HashMap");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/HashMap", "<init>", "()V", false);
methodVisitor.visitFieldInsn(PUTSTATIC, "org/apache/wss4j/policy/model/AlgorithmSuite", "ALGORITHM_SUITE_TYPES", "Ljava/util/Map;");
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/wss4j/policy/model/AlgorithmSuite", "ALGORITHM_SUITE_TYPES", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("Basic256");
methodVisitor.visitTypeInsn(NEW, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("Basic256");
methodVisitor.visitLdcInsn("http://www.w3.org/2000/09/xmldsig#sha1");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#aes256-cbc");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#kw-aes256");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitIntInsn(SIPUSH, 256);
methodVisitor.visitIntInsn(SIPUSH, 192);
methodVisitor.visitIntInsn(SIPUSH, 256);
methodVisitor.visitIntInsn(SIPUSH, 256);
methodVisitor.visitIntInsn(SIPUSH, 1024);
methodVisitor.visitIntInsn(SIPUSH, 4096);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIIIII)V", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/wss4j/policy/model/AlgorithmSuite", "ALGORITHM_SUITE_TYPES", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("Basic192");
methodVisitor.visitTypeInsn(NEW, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("Basic192");
methodVisitor.visitLdcInsn("http://www.w3.org/2000/09/xmldsig#sha1");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#aes192-cbc");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#kw-aes192");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitIntInsn(SIPUSH, 192);
methodVisitor.visitIntInsn(SIPUSH, 192);
methodVisitor.visitIntInsn(SIPUSH, 192);
methodVisitor.visitIntInsn(SIPUSH, 256);
methodVisitor.visitIntInsn(SIPUSH, 1024);
methodVisitor.visitIntInsn(SIPUSH, 4096);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIIIII)V", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/wss4j/policy/model/AlgorithmSuite", "ALGORITHM_SUITE_TYPES", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("Basic128");
methodVisitor.visitTypeInsn(NEW, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("Basic128");
methodVisitor.visitLdcInsn("http://www.w3.org/2000/09/xmldsig#sha1");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#aes128-cbc");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#kw-aes128");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitIntInsn(SIPUSH, 128);
methodVisitor.visitIntInsn(SIPUSH, 128);
methodVisitor.visitIntInsn(SIPUSH, 128);
methodVisitor.visitIntInsn(SIPUSH, 256);
methodVisitor.visitIntInsn(SIPUSH, 1024);
methodVisitor.visitIntInsn(SIPUSH, 4096);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIIIII)V", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/wss4j/policy/model/AlgorithmSuite", "ALGORITHM_SUITE_TYPES", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("TripleDes");
methodVisitor.visitTypeInsn(NEW, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("TripleDes");
methodVisitor.visitLdcInsn("http://www.w3.org/2000/09/xmldsig#sha1");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#tripledes-cbc");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#kw-tripledes");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitIntInsn(SIPUSH, 192);
methodVisitor.visitIntInsn(SIPUSH, 192);
methodVisitor.visitIntInsn(SIPUSH, 192);
methodVisitor.visitIntInsn(SIPUSH, 256);
methodVisitor.visitIntInsn(SIPUSH, 1024);
methodVisitor.visitIntInsn(SIPUSH, 4096);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIIIII)V", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/wss4j/policy/model/AlgorithmSuite", "ALGORITHM_SUITE_TYPES", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("Basic256Rsa15");
methodVisitor.visitTypeInsn(NEW, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("Basic256Rsa15");
methodVisitor.visitLdcInsn("http://www.w3.org/2000/09/xmldsig#sha1");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#aes256-cbc");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#kw-aes256");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#rsa-1_5");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitIntInsn(SIPUSH, 256);
methodVisitor.visitIntInsn(SIPUSH, 192);
methodVisitor.visitIntInsn(SIPUSH, 256);
methodVisitor.visitIntInsn(SIPUSH, 256);
methodVisitor.visitIntInsn(SIPUSH, 1024);
methodVisitor.visitIntInsn(SIPUSH, 4096);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIIIII)V", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/wss4j/policy/model/AlgorithmSuite", "ALGORITHM_SUITE_TYPES", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("Basic192Rsa15");
methodVisitor.visitTypeInsn(NEW, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("Basic192Rsa15");
methodVisitor.visitLdcInsn("http://www.w3.org/2000/09/xmldsig#sha1");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#aes192-cbc");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#kw-aes192");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#rsa-1_5");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitIntInsn(SIPUSH, 192);
methodVisitor.visitIntInsn(SIPUSH, 192);
methodVisitor.visitIntInsn(SIPUSH, 192);
methodVisitor.visitIntInsn(SIPUSH, 256);
methodVisitor.visitIntInsn(SIPUSH, 1024);
methodVisitor.visitIntInsn(SIPUSH, 4096);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIIIII)V", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/wss4j/policy/model/AlgorithmSuite", "ALGORITHM_SUITE_TYPES", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("Basic128Rsa15");
methodVisitor.visitTypeInsn(NEW, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("Basic128Rsa15");
methodVisitor.visitLdcInsn("http://www.w3.org/2000/09/xmldsig#sha1");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#aes128-cbc");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#kw-aes128");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#rsa-1_5");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitIntInsn(SIPUSH, 128);
methodVisitor.visitIntInsn(SIPUSH, 128);
methodVisitor.visitIntInsn(SIPUSH, 128);
methodVisitor.visitIntInsn(SIPUSH, 256);
methodVisitor.visitIntInsn(SIPUSH, 1024);
methodVisitor.visitIntInsn(SIPUSH, 4096);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIIIII)V", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/wss4j/policy/model/AlgorithmSuite", "ALGORITHM_SUITE_TYPES", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("TripleDesRsa15");
methodVisitor.visitTypeInsn(NEW, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("TripleDesRsa15");
methodVisitor.visitLdcInsn("http://www.w3.org/2000/09/xmldsig#sha1");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#tripledes-cbc");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#kw-tripledes");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#rsa-1_5");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitIntInsn(SIPUSH, 192);
methodVisitor.visitIntInsn(SIPUSH, 192);
methodVisitor.visitIntInsn(SIPUSH, 192);
methodVisitor.visitIntInsn(SIPUSH, 256);
methodVisitor.visitIntInsn(SIPUSH, 1024);
methodVisitor.visitIntInsn(SIPUSH, 4096);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIIIII)V", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/wss4j/policy/model/AlgorithmSuite", "ALGORITHM_SUITE_TYPES", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("Basic256Sha256");
methodVisitor.visitTypeInsn(NEW, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("Basic256Sha256");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#sha256");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#aes256-cbc");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#kw-aes256");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitIntInsn(SIPUSH, 256);
methodVisitor.visitIntInsn(SIPUSH, 192);
methodVisitor.visitIntInsn(SIPUSH, 256);
methodVisitor.visitIntInsn(SIPUSH, 256);
methodVisitor.visitIntInsn(SIPUSH, 1024);
methodVisitor.visitIntInsn(SIPUSH, 4096);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIIIII)V", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/wss4j/policy/model/AlgorithmSuite", "ALGORITHM_SUITE_TYPES", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("Basic192Sha256");
methodVisitor.visitTypeInsn(NEW, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("Basic192Sha256");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#sha256");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#aes192-cbc");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#kw-aes192");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitIntInsn(SIPUSH, 192);
methodVisitor.visitIntInsn(SIPUSH, 192);
methodVisitor.visitIntInsn(SIPUSH, 192);
methodVisitor.visitIntInsn(SIPUSH, 256);
methodVisitor.visitIntInsn(SIPUSH, 1024);
methodVisitor.visitIntInsn(SIPUSH, 4096);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIIIII)V", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/wss4j/policy/model/AlgorithmSuite", "ALGORITHM_SUITE_TYPES", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("Basic128Sha256");
methodVisitor.visitTypeInsn(NEW, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("Basic128Sha256");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#sha256");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#aes128-cbc");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#kw-aes128");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitIntInsn(SIPUSH, 128);
methodVisitor.visitIntInsn(SIPUSH, 128);
methodVisitor.visitIntInsn(SIPUSH, 128);
methodVisitor.visitIntInsn(SIPUSH, 256);
methodVisitor.visitIntInsn(SIPUSH, 1024);
methodVisitor.visitIntInsn(SIPUSH, 4096);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIIIII)V", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/wss4j/policy/model/AlgorithmSuite", "ALGORITHM_SUITE_TYPES", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("TripleDesSha256");
methodVisitor.visitTypeInsn(NEW, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("TripleDesSha256");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#sha256");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#tripledes-cbc");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#kw-tripledes");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitIntInsn(SIPUSH, 192);
methodVisitor.visitIntInsn(SIPUSH, 192);
methodVisitor.visitIntInsn(SIPUSH, 192);
methodVisitor.visitIntInsn(SIPUSH, 256);
methodVisitor.visitIntInsn(SIPUSH, 1024);
methodVisitor.visitIntInsn(SIPUSH, 4096);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIIIII)V", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/wss4j/policy/model/AlgorithmSuite", "ALGORITHM_SUITE_TYPES", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("Basic256Sha256Rsa15");
methodVisitor.visitTypeInsn(NEW, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("Basic256Sha256Rsa15");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#sha256");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#aes256-cbc");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#kw-aes256");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#rsa-1_5");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitIntInsn(SIPUSH, 256);
methodVisitor.visitIntInsn(SIPUSH, 192);
methodVisitor.visitIntInsn(SIPUSH, 256);
methodVisitor.visitIntInsn(SIPUSH, 256);
methodVisitor.visitIntInsn(SIPUSH, 1024);
methodVisitor.visitIntInsn(SIPUSH, 4096);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIIIII)V", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/wss4j/policy/model/AlgorithmSuite", "ALGORITHM_SUITE_TYPES", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("Basic192Sha256Rsa15");
methodVisitor.visitTypeInsn(NEW, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("Basic192Sha256Rsa15");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#sha256");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#aes192-cbc");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#kw-aes192");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#rsa-1_5");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitIntInsn(SIPUSH, 192);
methodVisitor.visitIntInsn(SIPUSH, 192);
methodVisitor.visitIntInsn(SIPUSH, 192);
methodVisitor.visitIntInsn(SIPUSH, 256);
methodVisitor.visitIntInsn(SIPUSH, 1024);
methodVisitor.visitIntInsn(SIPUSH, 4096);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIIIII)V", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/wss4j/policy/model/AlgorithmSuite", "ALGORITHM_SUITE_TYPES", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("Basic128Sha256Rsa15");
methodVisitor.visitTypeInsn(NEW, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("Basic128Sha256Rsa15");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#sha256");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#aes128-cbc");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#kw-aes128");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#rsa-1_5");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitIntInsn(SIPUSH, 128);
methodVisitor.visitIntInsn(SIPUSH, 128);
methodVisitor.visitIntInsn(SIPUSH, 128);
methodVisitor.visitIntInsn(SIPUSH, 256);
methodVisitor.visitIntInsn(SIPUSH, 1024);
methodVisitor.visitIntInsn(SIPUSH, 4096);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIIIII)V", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/wss4j/policy/model/AlgorithmSuite", "ALGORITHM_SUITE_TYPES", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("TripleDesSha256Rsa15");
methodVisitor.visitTypeInsn(NEW, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("TripleDesSha256Rsa15");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#sha256");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#tripledes-cbc");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#kw-tripledes");
methodVisitor.visitLdcInsn("http://www.w3.org/2001/04/xmlenc#rsa-1_5");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitLdcInsn("http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");
methodVisitor.visitIntInsn(SIPUSH, 192);
methodVisitor.visitIntInsn(SIPUSH, 192);
methodVisitor.visitIntInsn(SIPUSH, 192);
methodVisitor.visitIntInsn(SIPUSH, 256);
methodVisitor.visitIntInsn(SIPUSH, 1024);
methodVisitor.visitIntInsn(SIPUSH, 4096);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/wss4j/policy/model/AlgorithmSuite$AlgorithmSuiteType", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIIIII)V", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(17, 0);
methodVisitor.visitEnd();
}
classWriter.visitEnd();

return classWriter.toByteArray();
}
}
