package asm.org.apache.geronimo.microprofile.metrics.common;
import org.objectweb.asm.AnnotationVisitor;
import org.objectweb.asm.Attribute;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.ConstantDynamic;
import org.objectweb.asm.FieldVisitor;
import org.objectweb.asm.Handle;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.RecordComponentVisitor;
import org.objectweb.asm.Type;
import org.objectweb.asm.TypePath;
public class BaseMetricsDump implements Opcodes {

public static byte[] dump () throws Exception {

ClassWriter classWriter = new ClassWriter(0);
FieldVisitor fieldVisitor;
RecordComponentVisitor recordComponentVisitor;
MethodVisitor methodVisitor;
AnnotationVisitor annotationVisitor0;

classWriter.visit(V1_8, ACC_PUBLIC | ACC_SUPER, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics", null, "java/lang/Object", null);

classWriter.visitInnerClass("org/apache/geronimo/microprofile/metrics/common/BaseMetrics$2", null, null, 0);

classWriter.visitInnerClass("org/apache/geronimo/microprofile/metrics/common/BaseMetrics$1", null, null, 0);

classWriter.visitInnerClass("java/lang/invoke/MethodHandles$Lookup", "java/lang/invoke/MethodHandles", "Lookup", ACC_PUBLIC | ACC_FINAL | ACC_STATIC);

{
fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL, "registry", "Lorg/eclipse/microprofile/metrics/MetricRegistry;", null, null);
fieldVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "<init>", "(Lorg/eclipse/microprofile/metrics/MetricRegistry;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics", "registry", "Lorg/eclipse/microprofile/metrics/MetricRegistry;");
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(2, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "register", "()V", null, null);
methodVisitor.visitCode();
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/management/ManagementFactory", "getRuntimeMXBean", "()Ljava/lang/management/RuntimeMXBean;", false);
methodVisitor.visitVarInsn(ASTORE, 1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics", "registry", "Lorg/eclipse/microprofile/metrics/MetricRegistry;");
methodVisitor.visitTypeInsn(NEW, "org/eclipse/microprofile/metrics/Metadata");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("jvm.uptime");
methodVisitor.visitLdcInsn("JVM Uptime");
methodVisitor.visitLdcInsn("Displays the start time of the Java virtual machine in milliseconds.This attribute displays the approximate time when the Java virtual machine started.");
methodVisitor.visitFieldInsn(GETSTATIC, "org/eclipse/microprofile/metrics/MetricType", "GAUGE", "Lorg/eclipse/microprofile/metrics/MetricType;");
methodVisitor.visitLdcInsn("milliseconds");
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/eclipse/microprofile/metrics/Metadata", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/eclipse/microprofile/metrics/MetricType;Ljava/lang/String;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitInvokeDynamicInsn("getAsLong", "(Ljava/lang/management/RuntimeMXBean;)Ljava/util/function/LongSupplier;", new Handle(Opcodes.H_INVOKESTATIC, "java/lang/invoke/LambdaMetafactory", "metafactory", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;", false), new Object[]{Type.getType("()J"), new Handle(Opcodes.H_INVOKEINTERFACE, "java/lang/management/RuntimeMXBean", "getUptime", "()J", true), Type.getType("()J")});
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics", "gauge", "(Ljava/util/function/LongSupplier;)Lorg/eclipse/microprofile/metrics/Gauge;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/eclipse/microprofile/metrics/MetricRegistry", "register", "(Lorg/eclipse/microprofile/metrics/Metadata;Lorg/eclipse/microprofile/metrics/Metric;)Lorg/eclipse/microprofile/metrics/Metric;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/management/ManagementFactory", "getOperatingSystemMXBean", "()Ljava/lang/management/OperatingSystemMXBean;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics", "registry", "Lorg/eclipse/microprofile/metrics/MetricRegistry;");
methodVisitor.visitTypeInsn(NEW, "org/eclipse/microprofile/metrics/Metadata");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("cpu.availableProcessors");
methodVisitor.visitLdcInsn("Available Processors");
methodVisitor.visitLdcInsn("Displays the number of processors available to the Java virtual machine. This value may change during a particular invocation of the virtual machine.");
methodVisitor.visitFieldInsn(GETSTATIC, "org/eclipse/microprofile/metrics/MetricType", "GAUGE", "Lorg/eclipse/microprofile/metrics/MetricType;");
methodVisitor.visitLdcInsn("none");
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/eclipse/microprofile/metrics/Metadata", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/eclipse/microprofile/metrics/MetricType;Ljava/lang/String;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitInvokeDynamicInsn("getAsLong", "(Ljava/lang/management/OperatingSystemMXBean;)Ljava/util/function/LongSupplier;", new Handle(Opcodes.H_INVOKESTATIC, "java/lang/invoke/LambdaMetafactory", "metafactory", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;", false), new Object[]{Type.getType("()J"), new Handle(Opcodes.H_INVOKEINTERFACE, "java/lang/management/OperatingSystemMXBean", "getAvailableProcessors", "()I", true), Type.getType("()J")});
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics", "gauge", "(Ljava/util/function/LongSupplier;)Lorg/eclipse/microprofile/metrics/Gauge;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/eclipse/microprofile/metrics/MetricRegistry", "register", "(Lorg/eclipse/microprofile/metrics/Metadata;Lorg/eclipse/microprofile/metrics/Metric;)Lorg/eclipse/microprofile/metrics/Metric;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/management/ManagementFactory", "getClassLoadingMXBean", "()Ljava/lang/management/ClassLoadingMXBean;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics", "registry", "Lorg/eclipse/microprofile/metrics/MetricRegistry;");
methodVisitor.visitTypeInsn(NEW, "org/eclipse/microprofile/metrics/Metadata");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("classloader.currentLoadedClass.count");
methodVisitor.visitLdcInsn("Current Loaded Class Count");
methodVisitor.visitLdcInsn("Displays the number of classes that are currently loaded in the Java virtual machine.");
methodVisitor.visitFieldInsn(GETSTATIC, "org/eclipse/microprofile/metrics/MetricType", "COUNTER", "Lorg/eclipse/microprofile/metrics/MetricType;");
methodVisitor.visitLdcInsn("none");
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/eclipse/microprofile/metrics/Metadata", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/eclipse/microprofile/metrics/MetricType;Ljava/lang/String;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitInvokeDynamicInsn("getAsLong", "(Ljava/lang/management/ClassLoadingMXBean;)Ljava/util/function/LongSupplier;", new Handle(Opcodes.H_INVOKESTATIC, "java/lang/invoke/LambdaMetafactory", "metafactory", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;", false), new Object[]{Type.getType("()J"), new Handle(Opcodes.H_INVOKEINTERFACE, "java/lang/management/ClassLoadingMXBean", "getLoadedClassCount", "()I", true), Type.getType("()J")});
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics", "counter", "(Ljava/util/function/LongSupplier;)Lorg/eclipse/microprofile/metrics/Counter;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/eclipse/microprofile/metrics/MetricRegistry", "register", "(Lorg/eclipse/microprofile/metrics/Metadata;Lorg/eclipse/microprofile/metrics/Metric;)Lorg/eclipse/microprofile/metrics/Metric;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics", "registry", "Lorg/eclipse/microprofile/metrics/MetricRegistry;");
methodVisitor.visitTypeInsn(NEW, "org/eclipse/microprofile/metrics/Metadata");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("classloader.totalLoadedClass.count");
methodVisitor.visitLdcInsn("Total Loaded Class Count");
methodVisitor.visitLdcInsn("Displays the total number of classes that have been loaded since the Java virtual machine has started execution.");
methodVisitor.visitFieldInsn(GETSTATIC, "org/eclipse/microprofile/metrics/MetricType", "COUNTER", "Lorg/eclipse/microprofile/metrics/MetricType;");
methodVisitor.visitLdcInsn("none");
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/eclipse/microprofile/metrics/Metadata", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/eclipse/microprofile/metrics/MetricType;Ljava/lang/String;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitInvokeDynamicInsn("getAsLong", "(Ljava/lang/management/ClassLoadingMXBean;)Ljava/util/function/LongSupplier;", new Handle(Opcodes.H_INVOKESTATIC, "java/lang/invoke/LambdaMetafactory", "metafactory", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;", false), new Object[]{Type.getType("()J"), new Handle(Opcodes.H_INVOKEINTERFACE, "java/lang/management/ClassLoadingMXBean", "getTotalLoadedClassCount", "()J", true), Type.getType("()J")});
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics", "counter", "(Ljava/util/function/LongSupplier;)Lorg/eclipse/microprofile/metrics/Counter;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/eclipse/microprofile/metrics/MetricRegistry", "register", "(Lorg/eclipse/microprofile/metrics/Metadata;Lorg/eclipse/microprofile/metrics/Metric;)Lorg/eclipse/microprofile/metrics/Metric;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics", "registry", "Lorg/eclipse/microprofile/metrics/MetricRegistry;");
methodVisitor.visitTypeInsn(NEW, "org/eclipse/microprofile/metrics/Metadata");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("classloader.totalUnloadedClass.count");
methodVisitor.visitLdcInsn("Total Unloaded Loaded Class Count");
methodVisitor.visitLdcInsn("Displays the total number of classes unloaded since the Java virtual machine has started execution.");
methodVisitor.visitFieldInsn(GETSTATIC, "org/eclipse/microprofile/metrics/MetricType", "COUNTER", "Lorg/eclipse/microprofile/metrics/MetricType;");
methodVisitor.visitLdcInsn("none");
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/eclipse/microprofile/metrics/Metadata", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/eclipse/microprofile/metrics/MetricType;Ljava/lang/String;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitInvokeDynamicInsn("getAsLong", "(Ljava/lang/management/ClassLoadingMXBean;)Ljava/util/function/LongSupplier;", new Handle(Opcodes.H_INVOKESTATIC, "java/lang/invoke/LambdaMetafactory", "metafactory", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;", false), new Object[]{Type.getType("()J"), new Handle(Opcodes.H_INVOKEINTERFACE, "java/lang/management/ClassLoadingMXBean", "getTotalLoadedClassCount", "()J", true), Type.getType("()J")});
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics", "counter", "(Ljava/util/function/LongSupplier;)Lorg/eclipse/microprofile/metrics/Counter;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/eclipse/microprofile/metrics/MetricRegistry", "register", "(Lorg/eclipse/microprofile/metrics/Metadata;Lorg/eclipse/microprofile/metrics/Metric;)Lorg/eclipse/microprofile/metrics/Metric;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/management/ManagementFactory", "getThreadMXBean", "()Ljava/lang/management/ThreadMXBean;", false);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics", "registry", "Lorg/eclipse/microprofile/metrics/MetricRegistry;");
methodVisitor.visitTypeInsn(NEW, "org/eclipse/microprofile/metrics/Metadata");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("thread.count");
methodVisitor.visitLdcInsn("Thread Count");
methodVisitor.visitLdcInsn("Displays the current number of live threads including both daemon and non-daemon threads");
methodVisitor.visitFieldInsn(GETSTATIC, "org/eclipse/microprofile/metrics/MetricType", "COUNTER", "Lorg/eclipse/microprofile/metrics/MetricType;");
methodVisitor.visitLdcInsn("none");
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/eclipse/microprofile/metrics/Metadata", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/eclipse/microprofile/metrics/MetricType;Ljava/lang/String;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitInvokeDynamicInsn("getAsLong", "(Ljava/lang/management/ThreadMXBean;)Ljava/util/function/LongSupplier;", new Handle(Opcodes.H_INVOKESTATIC, "java/lang/invoke/LambdaMetafactory", "metafactory", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;", false), new Object[]{Type.getType("()J"), new Handle(Opcodes.H_INVOKEINTERFACE, "java/lang/management/ThreadMXBean", "getThreadCount", "()I", true), Type.getType("()J")});
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics", "counter", "(Ljava/util/function/LongSupplier;)Lorg/eclipse/microprofile/metrics/Counter;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/eclipse/microprofile/metrics/MetricRegistry", "register", "(Lorg/eclipse/microprofile/metrics/Metadata;Lorg/eclipse/microprofile/metrics/Metric;)Lorg/eclipse/microprofile/metrics/Metric;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics", "registry", "Lorg/eclipse/microprofile/metrics/MetricRegistry;");
methodVisitor.visitTypeInsn(NEW, "org/eclipse/microprofile/metrics/Metadata");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("thread.daemon.count");
methodVisitor.visitLdcInsn("Daemon Thread Count");
methodVisitor.visitLdcInsn("Displays the current number of live daemon threads.");
methodVisitor.visitFieldInsn(GETSTATIC, "org/eclipse/microprofile/metrics/MetricType", "COUNTER", "Lorg/eclipse/microprofile/metrics/MetricType;");
methodVisitor.visitLdcInsn("none");
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/eclipse/microprofile/metrics/Metadata", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/eclipse/microprofile/metrics/MetricType;Ljava/lang/String;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitInvokeDynamicInsn("getAsLong", "(Ljava/lang/management/ThreadMXBean;)Ljava/util/function/LongSupplier;", new Handle(Opcodes.H_INVOKESTATIC, "java/lang/invoke/LambdaMetafactory", "metafactory", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;", false), new Object[]{Type.getType("()J"), new Handle(Opcodes.H_INVOKEINTERFACE, "java/lang/management/ThreadMXBean", "getDaemonThreadCount", "()I", true), Type.getType("()J")});
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics", "counter", "(Ljava/util/function/LongSupplier;)Lorg/eclipse/microprofile/metrics/Counter;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/eclipse/microprofile/metrics/MetricRegistry", "register", "(Lorg/eclipse/microprofile/metrics/Metadata;Lorg/eclipse/microprofile/metrics/Metric;)Lorg/eclipse/microprofile/metrics/Metric;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics", "registry", "Lorg/eclipse/microprofile/metrics/MetricRegistry;");
methodVisitor.visitTypeInsn(NEW, "org/eclipse/microprofile/metrics/Metadata");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("thread.max.count");
methodVisitor.visitLdcInsn("Peak Thread Count");
methodVisitor.visitLdcInsn("Displays the peak live thread count since the Java virtual machine started or peak was reset.This includes daemon and non-daemon threads.");
methodVisitor.visitFieldInsn(GETSTATIC, "org/eclipse/microprofile/metrics/MetricType", "COUNTER", "Lorg/eclipse/microprofile/metrics/MetricType;");
methodVisitor.visitLdcInsn("none");
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/eclipse/microprofile/metrics/Metadata", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/eclipse/microprofile/metrics/MetricType;Ljava/lang/String;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitInvokeDynamicInsn("getAsLong", "(Ljava/lang/management/ThreadMXBean;)Ljava/util/function/LongSupplier;", new Handle(Opcodes.H_INVOKESTATIC, "java/lang/invoke/LambdaMetafactory", "metafactory", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;", false), new Object[]{Type.getType("()J"), new Handle(Opcodes.H_INVOKEINTERFACE, "java/lang/management/ThreadMXBean", "getPeakThreadCount", "()I", true), Type.getType("()J")});
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics", "counter", "(Ljava/util/function/LongSupplier;)Lorg/eclipse/microprofile/metrics/Counter;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/eclipse/microprofile/metrics/MetricRegistry", "register", "(Lorg/eclipse/microprofile/metrics/Metadata;Lorg/eclipse/microprofile/metrics/Metric;)Lorg/eclipse/microprofile/metrics/Metric;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/management/ManagementFactory", "getMemoryMXBean", "()Ljava/lang/management/MemoryMXBean;", false);
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics", "registry", "Lorg/eclipse/microprofile/metrics/MetricRegistry;");
methodVisitor.visitTypeInsn(NEW, "org/eclipse/microprofile/metrics/Metadata");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("memory.usedHeap");
methodVisitor.visitLdcInsn("Used Heap Memory");
methodVisitor.visitLdcInsn("Displays the amount of used heap memory in bytes.");
methodVisitor.visitFieldInsn(GETSTATIC, "org/eclipse/microprofile/metrics/MetricType", "GAUGE", "Lorg/eclipse/microprofile/metrics/MetricType;");
methodVisitor.visitLdcInsn("bytes");
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/eclipse/microprofile/metrics/Metadata", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/eclipse/microprofile/metrics/MetricType;Ljava/lang/String;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/lang/management/MemoryMXBean", "getHeapMemoryUsage", "()Ljava/lang/management/MemoryUsage;", true);
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitInvokeDynamicInsn("getAsLong", "(Ljava/lang/management/MemoryUsage;)Ljava/util/function/LongSupplier;", new Handle(Opcodes.H_INVOKESTATIC, "java/lang/invoke/LambdaMetafactory", "metafactory", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;", false), new Object[]{Type.getType("()J"), new Handle(Opcodes.H_INVOKEVIRTUAL, "java/lang/management/MemoryUsage", "getUsed", "()J", false), Type.getType("()J")});
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics", "gauge", "(Ljava/util/function/LongSupplier;)Lorg/eclipse/microprofile/metrics/Gauge;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/eclipse/microprofile/metrics/MetricRegistry", "register", "(Lorg/eclipse/microprofile/metrics/Metadata;Lorg/eclipse/microprofile/metrics/Metric;)Lorg/eclipse/microprofile/metrics/Metric;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics", "registry", "Lorg/eclipse/microprofile/metrics/MetricRegistry;");
methodVisitor.visitTypeInsn(NEW, "org/eclipse/microprofile/metrics/Metadata");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("memory.committedHeap");
methodVisitor.visitLdcInsn("Committed Heap Memory");
methodVisitor.visitLdcInsn("Displays the amount of memory in bytes that is committed for the Java virtual machine to use. This amount of memory is guaranteed for the Java virtual machine to use.");
methodVisitor.visitFieldInsn(GETSTATIC, "org/eclipse/microprofile/metrics/MetricType", "GAUGE", "Lorg/eclipse/microprofile/metrics/MetricType;");
methodVisitor.visitLdcInsn("bytes");
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/eclipse/microprofile/metrics/Metadata", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/eclipse/microprofile/metrics/MetricType;Ljava/lang/String;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/lang/management/MemoryMXBean", "getHeapMemoryUsage", "()Ljava/lang/management/MemoryUsage;", true);
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitInvokeDynamicInsn("getAsLong", "(Ljava/lang/management/MemoryUsage;)Ljava/util/function/LongSupplier;", new Handle(Opcodes.H_INVOKESTATIC, "java/lang/invoke/LambdaMetafactory", "metafactory", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;", false), new Object[]{Type.getType("()J"), new Handle(Opcodes.H_INVOKEVIRTUAL, "java/lang/management/MemoryUsage", "getCommitted", "()J", false), Type.getType("()J")});
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics", "gauge", "(Ljava/util/function/LongSupplier;)Lorg/eclipse/microprofile/metrics/Gauge;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/eclipse/microprofile/metrics/MetricRegistry", "register", "(Lorg/eclipse/microprofile/metrics/Metadata;Lorg/eclipse/microprofile/metrics/Metric;)Lorg/eclipse/microprofile/metrics/Metric;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics", "registry", "Lorg/eclipse/microprofile/metrics/MetricRegistry;");
methodVisitor.visitTypeInsn(NEW, "org/eclipse/microprofile/metrics/Metadata");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("memory.maxHeap");
methodVisitor.visitLdcInsn("Max Heap Memory");
methodVisitor.visitLdcInsn("Displays the maximum amount of heap memory in bytes that can be used for memory management. This attribute displays -1 if the maximum heap memory size is undefined. This amount of memory is not guaranteed to be available for memory management if it is greater than the amount of committed memory. The Java virtual machine may fail to allocate memory even if the amount of used memory does not exceed this maximum size.");
methodVisitor.visitFieldInsn(GETSTATIC, "org/eclipse/microprofile/metrics/MetricType", "GAUGE", "Lorg/eclipse/microprofile/metrics/MetricType;");
methodVisitor.visitLdcInsn("bytes");
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/eclipse/microprofile/metrics/Metadata", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/eclipse/microprofile/metrics/MetricType;Ljava/lang/String;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/lang/management/MemoryMXBean", "getHeapMemoryUsage", "()Ljava/lang/management/MemoryUsage;", true);
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitInvokeDynamicInsn("getAsLong", "(Ljava/lang/management/MemoryUsage;)Ljava/util/function/LongSupplier;", new Handle(Opcodes.H_INVOKESTATIC, "java/lang/invoke/LambdaMetafactory", "metafactory", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;", false), new Object[]{Type.getType("()J"), new Handle(Opcodes.H_INVOKEVIRTUAL, "java/lang/management/MemoryUsage", "getMax", "()J", false), Type.getType("()J")});
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics", "gauge", "(Ljava/util/function/LongSupplier;)Lorg/eclipse/microprofile/metrics/Gauge;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/eclipse/microprofile/metrics/MetricRegistry", "register", "(Lorg/eclipse/microprofile/metrics/Metadata;Lorg/eclipse/microprofile/metrics/Metric;)Lorg/eclipse/microprofile/metrics/Metric;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/management/ManagementFactory", "getGarbageCollectorMXBeans", "()Ljava/util/List;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInvokeDynamicInsn("accept", "(Lorg/apache/geronimo/microprofile/metrics/common/BaseMetrics;)Ljava/util/function/Consumer;", new Handle(Opcodes.H_INVOKESTATIC, "java/lang/invoke/LambdaMetafactory", "metafactory", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;", false), new Object[]{Type.getType("(Ljava/lang/Object;)V"), new Handle(Opcodes.H_INVOKESPECIAL, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics", "lambda$register$0", "(Ljava/lang/management/GarbageCollectorMXBean;)V", false), Type.getType("(Ljava/lang/management/GarbageCollectorMXBean;)V")});
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "forEach", "(Ljava/util/function/Consumer;)V", true);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(8, 6);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "gauge", "(Ljava/util/function/LongSupplier;)Lorg/eclipse/microprofile/metrics/Gauge;", "(Ljava/util/function/LongSupplier;)Lorg/eclipse/microprofile/metrics/Gauge<Ljava/lang/Long;>;", null);
methodVisitor.visitCode();
methodVisitor.visitTypeInsn(NEW, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics$1");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics$1", "<init>", "(Lorg/apache/geronimo/microprofile/metrics/common/BaseMetrics;Ljava/util/function/LongSupplier;)V", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(4, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "counter", "(Ljava/util/function/LongSupplier;)Lorg/eclipse/microprofile/metrics/Counter;", null, null);
methodVisitor.visitCode();
methodVisitor.visitTypeInsn(NEW, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics$2");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics$2", "<init>", "(Lorg/apache/geronimo/microprofile/metrics/common/BaseMetrics;Ljava/util/function/LongSupplier;)V", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(4, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE | ACC_SYNTHETIC, "lambda$register$0", "(Ljava/lang/management/GarbageCollectorMXBean;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics", "registry", "Lorg/eclipse/microprofile/metrics/MetricRegistry;");
methodVisitor.visitTypeInsn(NEW, "org/eclipse/microprofile/metrics/Metadata");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("gc.%s.count");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/lang/management/GarbageCollectorMXBean", "getName", "()Ljava/lang/String;", true);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/String", "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;", false);
methodVisitor.visitLdcInsn("Garbage Collection Count");
methodVisitor.visitLdcInsn("Displays the total number of collections that have occurred.This attribute lists -1 if the collection count is undefined for this collector.");
methodVisitor.visitFieldInsn(GETSTATIC, "org/eclipse/microprofile/metrics/MetricType", "COUNTER", "Lorg/eclipse/microprofile/metrics/MetricType;");
methodVisitor.visitLdcInsn("none");
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/eclipse/microprofile/metrics/Metadata", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/eclipse/microprofile/metrics/MetricType;Ljava/lang/String;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitInvokeDynamicInsn("getAsLong", "(Ljava/lang/management/GarbageCollectorMXBean;)Ljava/util/function/LongSupplier;", new Handle(Opcodes.H_INVOKESTATIC, "java/lang/invoke/LambdaMetafactory", "metafactory", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;", false), new Object[]{Type.getType("()J"), new Handle(Opcodes.H_INVOKEINTERFACE, "java/lang/management/GarbageCollectorMXBean", "getCollectionCount", "()J", true), Type.getType("()J")});
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics", "counter", "(Ljava/util/function/LongSupplier;)Lorg/eclipse/microprofile/metrics/Counter;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/eclipse/microprofile/metrics/MetricRegistry", "register", "(Lorg/eclipse/microprofile/metrics/Metadata;Lorg/eclipse/microprofile/metrics/Metric;)Lorg/eclipse/microprofile/metrics/Metric;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics", "registry", "Lorg/eclipse/microprofile/metrics/MetricRegistry;");
methodVisitor.visitTypeInsn(NEW, "org/eclipse/microprofile/metrics/Metadata");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("gc.%s.time");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/lang/management/GarbageCollectorMXBean", "getName", "()Ljava/lang/String;", true);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/String", "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;", false);
methodVisitor.visitLdcInsn("Garbage Collection Time");
methodVisitor.visitLdcInsn("Displays the approximate accumulated collection elapsed time in milliseconds.This attribute displays -1 if the collection elapsed time is undefined for this collector.The Java virtual machine implementation may use a high resolution timer to measure the elapsed time.This attribute may display the same value even if the collection count has been incremented ifthe collection elapsed time is very short.");
methodVisitor.visitFieldInsn(GETSTATIC, "org/eclipse/microprofile/metrics/MetricType", "GAUGE", "Lorg/eclipse/microprofile/metrics/MetricType;");
methodVisitor.visitLdcInsn("milliseconds");
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/eclipse/microprofile/metrics/Metadata", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/eclipse/microprofile/metrics/MetricType;Ljava/lang/String;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitInvokeDynamicInsn("getAsLong", "(Ljava/lang/management/GarbageCollectorMXBean;)Ljava/util/function/LongSupplier;", new Handle(Opcodes.H_INVOKESTATIC, "java/lang/invoke/LambdaMetafactory", "metafactory", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;", false), new Object[]{Type.getType("()J"), new Handle(Opcodes.H_INVOKEINTERFACE, "java/lang/management/GarbageCollectorMXBean", "getCollectionTime", "()J", true), Type.getType("()J")});
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/geronimo/microprofile/metrics/common/BaseMetrics", "gauge", "(Ljava/util/function/LongSupplier;)Lorg/eclipse/microprofile/metrics/Gauge;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/eclipse/microprofile/metrics/MetricRegistry", "register", "(Lorg/eclipse/microprofile/metrics/Metadata;Lorg/eclipse/microprofile/metrics/Metric;)Lorg/eclipse/microprofile/metrics/Metric;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(8, 2);
methodVisitor.visitEnd();
}
classWriter.visitEnd();

return classWriter.toByteArray();
}
}
