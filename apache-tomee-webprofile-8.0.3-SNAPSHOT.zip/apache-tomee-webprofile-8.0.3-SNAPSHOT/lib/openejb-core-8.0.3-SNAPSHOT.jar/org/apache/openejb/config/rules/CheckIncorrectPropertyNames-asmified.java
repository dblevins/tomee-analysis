package asm.org.apache.openejb.config.rules;
import org.objectweb.asm.AnnotationVisitor;
import org.objectweb.asm.Attribute;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.ConstantDynamic;
import org.objectweb.asm.FieldVisitor;
import org.objectweb.asm.Handle;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.RecordComponentVisitor;
import org.objectweb.asm.Type;
import org.objectweb.asm.TypePath;
public class CheckIncorrectPropertyNamesDump implements Opcodes {

public static byte[] dump () throws Exception {

ClassWriter classWriter = new ClassWriter(0);
FieldVisitor fieldVisitor;
RecordComponentVisitor recordComponentVisitor;
MethodVisitor methodVisitor;
AnnotationVisitor annotationVisitor0;

classWriter.visit(V1_8, ACC_PUBLIC | ACC_SUPER, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", null, "org/apache/openejb/config/rules/ValidationBase", null);

classWriter.visitInnerClass("java/util/Map$Entry", "java/util/Map", "Entry", ACC_PUBLIC | ACC_STATIC | ACC_ABSTRACT | ACC_INTERFACE);

{
fieldVisitor = classWriter.visitField(0, "incorrectAndCorrectPropNames", "Ljava/util/Map;", null, null);
fieldVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openejb/config/rules/ValidationBase", "<init>", "()V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "java/util/HashMap");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/HashMap", "<init>", "()V", false);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("java.persistence.provider");
methodVisitor.visitLdcInsn("jakarta.persistence.provider");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("java.persistence.transactionType");
methodVisitor.visitLdcInsn("jakarta.persistence.transactionType");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("java.persistence.jtaDataSource");
methodVisitor.visitLdcInsn("jakarta.persistence.jtaDataSource");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("java.persistence.nonJtaDataSource");
methodVisitor.visitLdcInsn("jakarta.persistence.nonJtaDataSource");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("java.net.ssl.keyStore");
methodVisitor.visitLdcInsn("javax.net.ssl.keyStore");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("java.net.ssl.keyStorePassword");
methodVisitor.visitLdcInsn("javax.net.ssl.keyStorePassword");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("java.net.ssl.trustStore");
methodVisitor.visitLdcInsn("javax.net.ssl.trustStore");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("java.security.jacc.PolicyConfigurationFactory.provider");
methodVisitor.visitLdcInsn("jakarta.security.jacc.PolicyConfigurationFactory.provider");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("java.security.jacc.policy.provider");
methodVisitor.visitLdcInsn("jakarta.security.jacc.policy.provider");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("java.xml.ws.spi.Provider");
methodVisitor.visitLdcInsn("jakarta.xml.ws.spi.Provider");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("java.xml.soap.MessageFactory");
methodVisitor.visitLdcInsn("jakarta.xml.soap.MessageFactory");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("java.xml.soap.SOAPFactory");
methodVisitor.visitLdcInsn("jakarta.xml.soap.SOAPFactory");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("java.xml.soap.SOAPConnectionFactory");
methodVisitor.visitLdcInsn("jakarta.xml.soap.SOAPConnectionFactory");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("java.xml.soap.MetaFactory");
methodVisitor.visitLdcInsn("jakarta.xml.soap.MetaFactory");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("java.persistence.sharedCache.mode");
methodVisitor.visitLdcInsn("jakarta.persistence.sharedCache.mode");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("java.persistence.validation.mode");
methodVisitor.visitLdcInsn("jakarta.persistence.validation.mode");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("java.persistence.transactionType");
methodVisitor.visitLdcInsn("jakarta.persistence.transactionType");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("javax.naming.applet");
methodVisitor.visitLdcInsn("java.naming.applet");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("javax.naming.authoritative");
methodVisitor.visitLdcInsn("java.naming.authoritative");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("javax.naming.batchsize");
methodVisitor.visitLdcInsn("java.naming.batchsize");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("javax.naming.dns.url");
methodVisitor.visitLdcInsn("java.naming.dns.url");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("javax.naming.factory.initial");
methodVisitor.visitLdcInsn("java.naming.factory.initial");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("javax.naming.factory.object");
methodVisitor.visitLdcInsn("java.naming.factory.object");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("javax.naming.factory.state");
methodVisitor.visitLdcInsn("java.naming.factory.state");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("javax.naming.factory.url.pkgs");
methodVisitor.visitLdcInsn("java.naming.factory.url.pkgs");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("javax.naming.language");
methodVisitor.visitLdcInsn("java.naming.language");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("javax.naming.provider.url");
methodVisitor.visitLdcInsn("java.naming.provider.url");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("javax.naming.referral");
methodVisitor.visitLdcInsn("java.naming.referral");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("javax.naming.security.authentication");
methodVisitor.visitLdcInsn("java.naming.security.authentication");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("javax.naming.security.credentials");
methodVisitor.visitLdcInsn("java.naming.security.credentials");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("javax.naming.security.principal");
methodVisitor.visitLdcInsn("java.naming.security.principal");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitLdcInsn("javax.naming.security.protocol");
methodVisitor.visitLdcInsn("java.naming.security.protocol");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(3, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "validate", "(Lorg/apache/openejb/config/AppModule;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "module", "Lorg/apache/openejb/config/DeploymentModule;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openejb/loader/SystemInstance", "get", "()Lorg/apache/openejb/loader/SystemInstance;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openejb/loader/SystemInstance", "getProperties", "()Ljava/util/Properties;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "incorrectAndCorrectPropNames", "Ljava/util/Map;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "entrySet", "()Ljava/util/Set;", true);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "iterator", "()Ljava/util/Iterator;", true);
methodVisitor.visitVarInsn(ASTORE, 3);
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"java/util/Properties", "java/util/Iterator"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label1);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitTypeInsn(CHECKCAST, "java/util/Map$Entry");
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map$Entry", "getKey", "()Ljava/lang/Object;", true);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/Properties", "containsKey", "(Ljava/lang/Object;)Z", false);
Label label2 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openejb/config/AppModule", "toString", "()Ljava/lang/String;", false);
methodVisitor.visitLdcInsn("incorrect.property.name");
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map$Entry", "getKey", "()Ljava/lang/Object;", true);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map$Entry", "getValue", "()Ljava/lang/Object;", true);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openejb/config/rules/CheckIncorrectPropertyNames", "warn", "(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V", false);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitJumpInsn(GOTO, label0);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(7, 6);
methodVisitor.visitEnd();
}
classWriter.visitEnd();

return classWriter.toByteArray();
}
}
