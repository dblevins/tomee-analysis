package asm.org.apache.openjpa.kernel.jpql;
import org.objectweb.asm.AnnotationVisitor;
import org.objectweb.asm.Attribute;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.ConstantDynamic;
import org.objectweb.asm.FieldVisitor;
import org.objectweb.asm.Handle;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.RecordComponentVisitor;
import org.objectweb.asm.Type;
import org.objectweb.asm.TypePath;
public class JPQLExpressionBuilderDump implements Opcodes {

public static byte[] dump () throws Exception {

ClassWriter classWriter = new ClassWriter(0);
FieldVisitor fieldVisitor;
RecordComponentVisitor recordComponentVisitor;
MethodVisitor methodVisitor;
AnnotationVisitor annotationVisitor0;

classWriter.visit(V1_8, ACC_PUBLIC | ACC_SUPER, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", null, "org/apache/openjpa/kernel/exps/AbstractExpressionBuilder", new String[] { "org/apache/openjpa/kernel/jpql/JPQLTreeConstants" });

classWriter.visitInnerClass("org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$ParsedJPQL", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ParsedJPQL", ACC_PUBLIC | ACC_STATIC);

classWriter.visitInnerClass("org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "JPQLNode", ACC_PROTECTED | ACC_STATIC | ACC_ABSTRACT);

classWriter.visitInnerClass("org/apache/openjpa/lib/util/Localizer$Message", "org/apache/openjpa/lib/util/Localizer", "Message", ACC_PUBLIC | ACC_STATIC);

classWriter.visitInnerClass("org/apache/openjpa/kernel/FillStrategy$Array", "org/apache/openjpa/kernel/FillStrategy", "Array", ACC_PUBLIC | ACC_STATIC);

classWriter.visitInnerClass("org/apache/openjpa/kernel/FillStrategy$NewInstance", "org/apache/openjpa/kernel/FillStrategy", "NewInstance", ACC_PUBLIC | ACC_STATIC);

classWriter.visitInnerClass("org/apache/openjpa/kernel/FillStrategy$Assign", "org/apache/openjpa/kernel/FillStrategy", "Assign", ACC_PUBLIC | ACC_STATIC);

{
fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL | ACC_STATIC, "VAR_PATH", "I", null, new Integer(1));
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL | ACC_STATIC, "VAR_ERROR", "I", null, new Integer(2));
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL | ACC_STATIC, "_loc", "Lorg/apache/openjpa/lib/util/Localizer;", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL, "contexts", "Ljava/util/Stack;", "Ljava/util/Stack<Lorg/apache/openjpa/kernel/exps/Context;>;", null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE, "parameterTypes", "Lorg/apache/openjpa/lib/util/OrderedMap;", "Lorg/apache/openjpa/lib/util/OrderedMap<Ljava/lang/Object;Ljava/lang/Class<*>;>;", null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE, "aliasCount", "I", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE, "inAssignSubselectProjection", "Z", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE, "hasParameterizedInExpression", "Z", null, null);
fieldVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "<init>", "(Lorg/apache/openjpa/kernel/exps/ExpressionFactory;Lorg/apache/openjpa/kernel/ExpressionStoreQuery;Ljava/lang/Object;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/ExpressionStoreQuery", "getResolver", "()Lorg/apache/openjpa/kernel/exps/Resolver;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/exps/AbstractExpressionBuilder", "<init>", "(Lorg/apache/openjpa/kernel/exps/ExpressionFactory;Lorg/apache/openjpa/kernel/exps/Resolver;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "java/util/Stack");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/Stack", "<init>", "()V", false);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "contexts", "Ljava/util/Stack;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "aliasCount", "I");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "inAssignSubselectProjection", "Z");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "hasParameterizedInExpression", "Z");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "contexts", "Ljava/util/Stack;");
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitTypeInsn(NEW, "org/apache/openjpa/kernel/exps/Context");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitTypeInsn(INSTANCEOF, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$ParsedJPQL");
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label1);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$ParsedJPQL");
Label label2 = new Label();
methodVisitor.visitJumpInsn(GOTO, label2);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_FULL, 4, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/exps/ExpressionFactory", "org/apache/openjpa/kernel/ExpressionStoreQuery", "java/lang/Object"}, 3, new Object[] {"java/util/Stack", label0, label0});
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitTypeInsn(INSTANCEOF, "java/lang/String");
Label label3 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitTypeInsn(CHECKCAST, "java/lang/String");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getParsedQuery", "(Ljava/lang/String;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$ParsedJPQL;", false);
methodVisitor.visitJumpInsn(GOTO, label2);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_FULL, 4, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/exps/ExpressionFactory", "org/apache/openjpa/kernel/ExpressionStoreQuery", "java/lang/Object"}, 3, new Object[] {"java/util/Stack", label0, label0});
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_FULL, 4, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/exps/ExpressionFactory", "org/apache/openjpa/kernel/ExpressionStoreQuery", "java/lang/Object"}, 4, new Object[] {"java/util/Stack", label0, label0, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$ParsedJPQL"});
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/exps/Context", "<init>", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$ParsedJPQL;Lorg/apache/openjpa/kernel/exps/Subquery;Lorg/apache/openjpa/kernel/exps/Context;)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/Stack", "push", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/Context", "parsed", "Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$ParsedJPQL;");
Label label4 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label4);
methodVisitor.visitTypeInsn(NEW, "org/apache/openjpa/util/InternalException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/Object;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn("");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/util/InternalException", "<init>", "(Ljava/lang/String;)V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(6, 4);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PROTECTED, "getLocalizer", "()Lorg/apache/openjpa/lib/util/Localizer;", null, null);
methodVisitor.visitCode();
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "_loc", "Lorg/apache/openjpa/lib/util/Localizer;");
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(1, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PROTECTED, "getClassLoader", "()Ljava/lang/ClassLoader;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getClassLoader", "()Ljava/lang/ClassLoader;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(1, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PROTECTED, "getParsedQuery", "()Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$ParsedJPQL;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/Context", "parsed", "Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$ParsedJPQL;");
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(1, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PROTECTED, "getParsedQuery", "(Ljava/lang/String;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$ParsedJPQL;", null, null);
methodVisitor.visitCode();
methodVisitor.visitTypeInsn(NEW, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$ParsedJPQL");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$ParsedJPQL", "<init>", "(Ljava/lang/String;)V", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(3, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "setCandidate", "(Lorg/apache/openjpa/meta/ClassMetaData;Ljava/lang/String;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "addAccessPath", "(Lorg/apache/openjpa/meta/ClassMetaData;)Lorg/apache/openjpa/meta/ClassMetaData;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 1);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/Context", "meta", "Lorg/apache/openjpa/meta/ClassMetaData;");
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 2);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/Context", "schemaAlias", "Ljava/lang/String;");
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(2, 3);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "nextAlias", "()Ljava/lang/String;", null, null);
methodVisitor.visitCode();
methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
methodVisitor.visitLdcInsn("jpqlalias");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(DUP);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "aliasCount", "I");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(IADD);
methodVisitor.visitInsn(DUP_X1);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "aliasCount", "I");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(I)Ljava/lang/StringBuilder;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(4, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PROTECTED, "resolveClassMetaData", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/meta/ClassMetaData;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "assertSchemaName", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getClassMetaData", "(Ljava/lang/String;Z)Lorg/apache/openjpa/meta/ClassMetaData;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 3);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label0);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"java/lang/String", "org/apache/openjpa/meta/ClassMetaData"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "isPath", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Z", false);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getPath", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Path;", false);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Path", "last", "()Lorg/apache/openjpa/meta/FieldMetaData;", true);
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getFieldType", "(Lorg/apache/openjpa/meta/FieldMetaData;)Lorg/apache/openjpa/meta/ClassMetaData;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 3);
Label label2 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label2);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/FieldMetaData", "isElementCollection", "()Z", false);
methodVisitor.visitJumpInsn(IFEQ, label2);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/FieldMetaData", "getDefiningMetaData", "()Lorg/apache/openjpa/meta/ClassMetaData;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"org/apache/openjpa/kernel/exps/Path", "org/apache/openjpa/meta/FieldMetaData"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getClassMetaData", "(Ljava/lang/String;Z)Lorg/apache/openjpa/meta/ClassMetaData;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(3, 6);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "getClassMetaData", "(Ljava/lang/String;Z)Lorg/apache/openjpa/meta/ClassMetaData;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getClassLoader", "()Ljava/lang/ClassLoader;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "resolver", "Lorg/apache/openjpa/kernel/exps/Resolver;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Resolver", "getConfiguration", "()Lorg/apache/openjpa/conf/OpenJPAConfiguration;", true);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/conf/OpenJPAConfiguration", "getMetaDataRepositoryInstance", "()Lorg/apache/openjpa/meta/MetaDataRepository;", true);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/MetaDataRepository", "getMetaData", "(Ljava/lang/String;Ljava/lang/ClassLoader;Z)Lorg/apache/openjpa/meta/ClassMetaData;", false);
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitVarInsn(ALOAD, 5);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label0);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,3, new Object[] {"java/lang/ClassLoader", "org/apache/openjpa/meta/MetaDataRepository", "org/apache/openjpa/meta/ClassMetaData"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "resolver", "Lorg/apache/openjpa/kernel/exps/Resolver;");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Resolver", "classForName", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Class;", true);
methodVisitor.visitVarInsn(ASTORE, 6);
methodVisitor.visitVarInsn(ALOAD, 6);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label1);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/MetaDataRepository", "getMetaData", "(Ljava/lang/Class;Ljava/lang/ClassLoader;Z)Lorg/apache/openjpa/meta/ClassMetaData;", false);
methodVisitor.visitVarInsn(ASTORE, 5);
Label label2 = new Label();
methodVisitor.visitJumpInsn(GOTO, label2);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/Class"}, 0, null);
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitJumpInsn(IFEQ, label2);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/MetaDataRepository", "getMetaData", "(Ljava/lang/String;Ljava/lang/ClassLoader;Z)Lorg/apache/openjpa/meta/ClassMetaData;", false);
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 5);
Label label3 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label3);
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitJumpInsn(IFEQ, label3);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/MetaDataRepository", "getClosestAliasName", "(Ljava/lang/String;)Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitVarInsn(ALOAD, 7);
Label label4 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label4);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("not-schema-name-hint");
methodVisitor.visitInsn(ICONST_3);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/MetaDataRepository", "getAliasNames", "()Ljava/util/Collection;", false);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/String"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("not-schema-name");
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/MetaDataRepository", "getAliasNames", "()Ljava/util/Collection;", false);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(7, 8);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "getCandidateType", "()Ljava/lang/Class;", "()Ljava/lang/Class<*>;", null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getCandidateMetaData", "()Lorg/apache/openjpa/meta/ClassMetaData;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/ClassMetaData", "getDescribedType", "()Ljava/lang/Class;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(1, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "getCandidateMetaData", "()Lorg/apache/openjpa/meta/ClassMetaData;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/Context", "meta", "Lorg/apache/openjpa/meta/ClassMetaData;");
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/Context", "meta", "Lorg/apache/openjpa/meta/ClassMetaData;");
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "root", "()Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getCandidateMetaData", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/meta/ClassMetaData;", false);
methodVisitor.visitVarInsn(ASTORE, 1);
methodVisitor.visitVarInsn(ALOAD, 1);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("not-schema-name");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "root", "()Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/meta/ClassMetaData"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setCandidate", "(Lorg/apache/openjpa/meta/ClassMetaData;Ljava/lang/String;)V", false);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(7, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PROTECTED, "getCandidateMetaData", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/meta/ClassMetaData;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ICONST_5);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "findChildByID", "(IZ)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 2);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 33);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label1);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ICONST_4);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "findChildByID", "(IZ)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitJumpInsn(GOTO, label0);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("no-from-clause");
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ISTORE, 3);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
methodVisitor.visitVarInsn(ILOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitInsn(ARRAYLENGTH);
Label label3 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPGE, label3);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitVarInsn(ILOAD, 3);
methodVisitor.visitInsn(AALOAD);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 96);
Label label4 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label4);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "resolveClassMetaData", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/meta/ClassMetaData;", false);
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitVarInsn(ALOAD, 5);
Label label5 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label5);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/meta/ClassMetaData"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "assertSchemaName", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ASTORE, 6);
methodVisitor.visitVarInsn(ALOAD, 6);
Label label6 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label6);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("not-schema-name");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "root", "()Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label6);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/String"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getClassMetaData", "(Ljava/lang/String;Z)Lorg/apache/openjpa/meta/ClassMetaData;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 33);
Label label7 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label7);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 6);
Label label8 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label8);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "getChild", "(I)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitLabel(label8);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 10);
methodVisitor.visitJumpInsn(IF_ICMPNE, label7);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getPath", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Path;", false);
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Path", "last", "()Lorg/apache/openjpa/meta/FieldMetaData;", true);
methodVisitor.visitVarInsn(ASTORE, 6);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getFieldType", "(Lorg/apache/openjpa/meta/FieldMetaData;)Lorg/apache/openjpa/meta/ClassMetaData;", false);
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitVarInsn(ALOAD, 7);
Label label9 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label9);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/FieldMetaData", "isElementCollection", "()Z", false);
methodVisitor.visitJumpInsn(IFEQ, label9);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/FieldMetaData", "getDefiningMetaData", "()Lorg/apache/openjpa/meta/ClassMetaData;", false);
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitLabel(label9);
methodVisitor.visitFrame(Opcodes.F_APPEND,3, new Object[] {"org/apache/openjpa/kernel/exps/Path", "org/apache/openjpa/meta/FieldMetaData", "org/apache/openjpa/meta/ClassMetaData"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 7);
Label label10 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label10);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label10);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("no-alias");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label7);
methodVisitor.visitFrame(Opcodes.F_FULL, 4, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", Opcodes.INTEGER}, 0, new Object[] {});
methodVisitor.visitIincInsn(3, 1);
methodVisitor.visitJumpInsn(GOTO, label2);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(7, 8);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PROTECTED, "currentQuery", "()Ljava/lang/String;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/Context", "parsed", "Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$ParsedJPQL;");
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "root", "()Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "parser", "Lorg/apache/openjpa/kernel/jpql/JPQL;");
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label1);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(ACONST_NULL);
Label label2 = new Label();
methodVisitor.visitJumpInsn(GOTO, label2);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "root", "()Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "parser", "Lorg/apache/openjpa/kernel/jpql/JPQL;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQL", "jpql", "Ljava/lang/String;");
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/String"});
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(1, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "getQueryExpressions", "()Lorg/apache/openjpa/kernel/exps/QueryExpressions;", null, null);
methodVisitor.visitCode();
methodVisitor.visitTypeInsn(NEW, "org/apache/openjpa/kernel/exps/QueryExpressions");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/exps/QueryExpressions", "<init>", "()V", false);
methodVisitor.visitVarInsn(ASTORE, 1);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "contexts", "Ljava/util/Stack;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/exps/QueryExpressions", "setContexts", "(Ljava/util/Stack;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "evalQueryOperation", "(Lorg/apache/openjpa/kernel/exps/QueryExpressions;)V", false);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/Context", "from", "Lorg/apache/openjpa/kernel/exps/Expression;");
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 3);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "root", "()Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitInsn(ICONST_1);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label1);
methodVisitor.visitInsn(ICONST_1);
Label label2 = new Label();
methodVisitor.visitJumpInsn(GOTO, label2);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_FULL, 4, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/exps/QueryExpressions", "org/apache/openjpa/kernel/exps/Expression", "org/apache/openjpa/kernel/exps/Expression"}, 1, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder"});
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_FULL, 4, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/exps/QueryExpressions", "org/apache/openjpa/kernel/exps/Expression", "org/apache/openjpa/kernel/exps/Expression"}, 2, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", Opcodes.INTEGER});
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "evalFromClause", "(Z)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "and", "(Lorg/apache/openjpa/kernel/exps/Expression;Lorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "evalWhereClause", "()Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "and", "(Lorg/apache/openjpa/kernel/exps/Expression;Lorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "evalSelectClause", "(Lorg/apache/openjpa/kernel/exps/QueryExpressions;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "and", "(Lorg/apache/openjpa/kernel/exps/Expression;Lorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 2);
Label label3 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "emptyExpression", "()Lorg/apache/openjpa/kernel/exps/Expression;", true);
Label label4 = new Label();
methodVisitor.visitJumpInsn(GOTO, label4);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"org/apache/openjpa/kernel/exps/QueryExpressions"});
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_FULL, 4, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/exps/QueryExpressions", "org/apache/openjpa/kernel/exps/Expression", "org/apache/openjpa/kernel/exps/Expression"}, 2, new Object[] {"org/apache/openjpa/kernel/exps/QueryExpressions", "org/apache/openjpa/kernel/exps/Expression"});
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "filter", "Lorg/apache/openjpa/kernel/exps/Expression;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "evalGroupingClause", "(Lorg/apache/openjpa/kernel/exps/QueryExpressions;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "evalHavingClause", "(Lorg/apache/openjpa/kernel/exps/QueryExpressions;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "evalFetchJoins", "(Lorg/apache/openjpa/kernel/exps/QueryExpressions;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "evalSetClause", "(Lorg/apache/openjpa/kernel/exps/QueryExpressions;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "evalOrderingClauses", "(Lorg/apache/openjpa/kernel/exps/QueryExpressions;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parameterTypes", "Lorg/apache/openjpa/lib/util/OrderedMap;");
Label label5 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label5);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parameterTypes", "Lorg/apache/openjpa/lib/util/OrderedMap;");
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "parameterTypes", "Lorg/apache/openjpa/lib/util/OrderedMap;");
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getAccessPath", "()[Lorg/apache/openjpa/meta/ClassMetaData;", false);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "accessPath", "[Lorg/apache/openjpa/meta/ClassMetaData;");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "hasParameterizedInExpression", "Z");
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "hasInExpression", "Z");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "validateParameters", "()V", false);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(3, 4);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "and", "(Lorg/apache/openjpa/kernel/exps/Expression;Lorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 1);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label0);
methodVisitor.visitVarInsn(ALOAD, 2);
Label label1 = new Label();
methodVisitor.visitJumpInsn(GOTO, label1);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 2);
Label label2 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label2);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitJumpInsn(GOTO, label1);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "and", "(Lorg/apache/openjpa/kernel/exps/Expression;Lorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"org/apache/openjpa/kernel/exps/Expression"});
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(3, 3);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE | ACC_STATIC, "assemble", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/String;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitLdcInsn(".");
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "assemble", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;Ljava/lang/String;I)Ljava/lang/String;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(3, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE | ACC_STATIC, "assemble", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;Ljava/lang/String;I)Ljava/lang/String;", null, null);
methodVisitor.visitCode();
methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ISTORE, 5);
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,3, new Object[] {"java/lang/StringBuilder", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", Opcodes.INTEGER}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 4);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label1);
methodVisitor.visitVarInsn(ILOAD, 5);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitInsn(ARRAYLENGTH);
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitInsn(ISUB);
methodVisitor.visitJumpInsn(IF_ICMPGE, label1);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "length", "()I", false);
Label label2 = new Label();
methodVisitor.visitJumpInsn(IFLE, label2);
methodVisitor.visitVarInsn(ALOAD, 1);
Label label3 = new Label();
methodVisitor.visitJumpInsn(GOTO, label3);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/StringBuilder"});
methodVisitor.visitLdcInsn("");
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_FULL, 6, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "java/lang/String", Opcodes.INTEGER, "java/lang/StringBuilder", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", Opcodes.INTEGER}, 2, new Object[] {"java/lang/StringBuilder", "java/lang/String"});
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitVarInsn(ILOAD, 5);
methodVisitor.visitInsn(AALOAD);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitIincInsn(5, 1);
methodVisitor.visitJumpInsn(GOTO, label0);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(3, 6);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "assignSubselectProjection", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;Lorg/apache/openjpa/kernel/exps/QueryExpressions;)Lorg/apache/openjpa/kernel/exps/Expression;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "inAssignSubselectProjection", "Z");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitTypeInsn(ANEWARRAY, "org/apache/openjpa/kernel/exps/Value");
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "projections", "[Lorg/apache/openjpa/kernel/exps/Value;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/String");
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "projectionClauses", "[Ljava/lang/String;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/String");
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "projectionAliases", "[Ljava/lang/String;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "projections", "[Lorg/apache/openjpa/kernel/exps/Value;");
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "projectionClauses", "[Ljava/lang/String;");
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 64);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "firstChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
Label label1 = new Label();
methodVisitor.visitJumpInsn(GOTO, label1);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_FULL, 4, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/QueryExpressions", "org/apache/openjpa/kernel/exps/Value"}, 3, new Object[] {"[Ljava/lang/String;", Opcodes.INTEGER, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder"});
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_FULL, 4, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/QueryExpressions", "org/apache/openjpa/kernel/exps/Value"}, 4, new Object[] {"[Ljava/lang/String;", Opcodes.INTEGER, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"});
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "projectionClause", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/String;", false);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "inAssignSubselectProjection", "Z");
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(5, 4);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "assignProjections", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;Lorg/apache/openjpa/kernel/exps/QueryExpressions;Ljava/util/List;Ljava/util/List;Ljava/util/List;)Lorg/apache/openjpa/kernel/exps/Expression;", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;Lorg/apache/openjpa/kernel/exps/QueryExpressions;Ljava/util/List<Lorg/apache/openjpa/kernel/exps/Value;>;Ljava/util/List<Ljava/lang/String;>;Ljava/util/List<Ljava/lang/String;>;)Lorg/apache/openjpa/kernel/exps/Expression;", null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "getChildCount", "()I", false);
methodVisitor.visitVarInsn(ISTORE, 6);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ISTORE, 8);
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,3, new Object[] {Opcodes.INTEGER, "org/apache/openjpa/kernel/exps/Expression", Opcodes.INTEGER}, 0, null);
methodVisitor.visitVarInsn(ILOAD, 8);
methodVisitor.visitVarInsn(ILOAD, 6);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPGE, label1);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ILOAD, 8);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "getChild", "(I)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 9);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 9);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "firstChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 10);
methodVisitor.visitVarInsn(ALOAD, 9);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitInsn(ARRAYLENGTH);
methodVisitor.visitInsn(ICONST_1);
Label label2 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPLE, label2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 9);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "right", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
Label label3 = new Label();
methodVisitor.visitJumpInsn(GOTO, label3);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 0, null);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"});
methodVisitor.visitVarInsn(ASTORE, 11);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 12);
methodVisitor.visitVarInsn(ALOAD, 11);
Label label4 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label4);
methodVisitor.visitVarInsn(ALOAD, 11);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
Label label5 = new Label();
methodVisitor.visitJumpInsn(GOTO, label5);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 64);
Label label6 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label6);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "firstChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
Label label7 = new Label();
methodVisitor.visitJumpInsn(GOTO, label7);
methodVisitor.visitLabel(label6);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder"});
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitLabel(label7);
methodVisitor.visitFrame(Opcodes.F_FULL, 13, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/QueryExpressions", "java/util/List", "java/util/List", "java/util/List", Opcodes.INTEGER, "org/apache/openjpa/kernel/exps/Expression", Opcodes.INTEGER, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value"}, 2, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"});
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "projectionClause", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/String;", false);
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/String"});
methodVisitor.visitVarInsn(ASTORE, 13);
methodVisitor.visitVarInsn(ALOAD, 11);
Label label8 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label8);
methodVisitor.visitVarInsn(ALOAD, 12);
methodVisitor.visitVarInsn(ALOAD, 13);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Value", "setAlias", "(Ljava/lang/String;)V", true);
methodVisitor.visitLabel(label8);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/String"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 12);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "add", "(Ljava/lang/Object;)Z", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 13);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "add", "(Ljava/lang/Object;)Z", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitVarInsn(ALOAD, 13);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "add", "(Ljava/lang/Object;)Z", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitIincInsn(8, 1);
methodVisitor.visitJumpInsn(GOTO, label0);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_FULL, 8, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/QueryExpressions", "java/util/List", "java/util/List", "java/util/List", Opcodes.INTEGER, "org/apache/openjpa/kernel/exps/Expression"}, 0, new Object[] {});
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(3, 14);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "evalProjectionsResultShape", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;Lorg/apache/openjpa/kernel/exps/QueryExpressions;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;Lorg/apache/openjpa/kernel/exps/QueryExpressions;Ljava/util/List<Lorg/apache/openjpa/kernel/exps/Value;>;Ljava/util/List<Ljava/lang/String;>;Ljava/util/List<Ljava/lang/String;>;)V", null);
methodVisitor.visitCode();
Label label0 = new Label();
Label label1 = new Label();
Label label2 = new Label();
methodVisitor.visitTryCatchBlock(label0, label1, label2, "java/lang/Exception");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "getChildCount", "()I", false);
methodVisitor.visitVarInsn(ISTORE, 6);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitVarInsn(ASTORE, 8);
methodVisitor.visitVarInsn(ILOAD, 6);
methodVisitor.visitInsn(ICONST_1);
Label label3 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPLE, label3);
methodVisitor.visitLdcInsn(Type.getType("[Ljava/lang/Object;"));
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitTypeInsn(NEW, "org/apache/openjpa/kernel/ResultShape");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitTypeInsn(NEW, "org/apache/openjpa/kernel/FillStrategy$Array");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn(Type.getType("[Ljava/lang/Object;"));
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/FillStrategy$Array", "<init>", "(Ljava/lang/Class;)V", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/ResultShape", "<init>", "(Ljava/lang/Class;Lorg/apache/openjpa/kernel/FillStrategy;)V", false);
methodVisitor.visitVarInsn(ASTORE, 8);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_APPEND,3, new Object[] {Opcodes.INTEGER, "java/lang/Class", "org/apache/openjpa/kernel/ResultShape"}, 0, null);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ISTORE, 9);
Label label4 = new Label();
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
methodVisitor.visitVarInsn(ILOAD, 9);
methodVisitor.visitVarInsn(ILOAD, 6);
Label label5 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPGE, label5);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ILOAD, 9);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "getChild", "(I)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 10);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "firstChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 11);
methodVisitor.visitVarInsn(ALOAD, 11);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 17);
Label label6 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label6);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 11);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "left", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "assemble", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ASTORE, 12);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "resolver", "Lorg/apache/openjpa/kernel/exps/Resolver;");
methodVisitor.visitVarInsn(ALOAD, 12);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Resolver", "classForName", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Class;", true);
methodVisitor.visitVarInsn(ASTORE, 13);
methodVisitor.visitVarInsn(ALOAD, 13);
Label label7 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label7);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 11);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "left", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "getChildCount", "()I", false);
methodVisitor.visitVarInsn(ISTORE, 14);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 11);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "left", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ILOAD, 14);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(ISUB);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "getChild", "(I)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitVarInsn(ASTORE, 15);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "resolver", "Lorg/apache/openjpa/kernel/exps/Resolver;");
methodVisitor.visitVarInsn(ALOAD, 15);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Resolver", "classForName", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Class;", true);
methodVisitor.visitVarInsn(ASTORE, 13);
methodVisitor.visitLabel(label7);
methodVisitor.visitFrame(Opcodes.F_FULL, 14, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/QueryExpressions", "java/util/List", "java/util/List", "java/util/List", Opcodes.INTEGER, "java/lang/Class", "org/apache/openjpa/kernel/ResultShape", Opcodes.INTEGER, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "java/lang/String", "java/lang/Class"}, 0, new Object[] {});
methodVisitor.visitVarInsn(ALOAD, 13);
Label label8 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label8);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "resolver", "Lorg/apache/openjpa/kernel/exps/Resolver;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Resolver", "getConfiguration", "()Lorg/apache/openjpa/conf/OpenJPAConfiguration;", true);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/conf/OpenJPAConfiguration", "getUseTCCLinSelectNew", "()Z", true);
methodVisitor.visitJumpInsn(IFEQ, label8);
methodVisitor.visitLabel(label0);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/System", "getSecurityManager", "()Ljava/lang/SecurityManager;", false);
Label label9 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label9);
methodVisitor.visitVarInsn(ALOAD, 12);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/util/J2DoPrivHelper", "getContextClassLoaderAction", "()Ljava/security/PrivilegedAction;", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/security/AccessController", "doPrivileged", "(Ljava/security/PrivilegedAction;)Ljava/lang/Object;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "java/lang/ClassLoader");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/util/J2DoPrivHelper", "getForNameAction", "(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/security/PrivilegedExceptionAction;", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/security/AccessController", "doPrivileged", "(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "java/lang/Class");
methodVisitor.visitVarInsn(ASTORE, 13);
methodVisitor.visitJumpInsn(GOTO, label1);
methodVisitor.visitLabel(label9);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Thread", "currentThread", "()Ljava/lang/Thread;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Thread", "getContextClassLoader", "()Ljava/lang/ClassLoader;", false);
methodVisitor.visitVarInsn(ALOAD, 12);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ClassLoader", "loadClass", "(Ljava/lang/String;)Ljava/lang/Class;", false);
methodVisitor.visitVarInsn(ASTORE, 13);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitJumpInsn(GOTO, label8);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Exception"});
methodVisitor.visitVarInsn(ASTORE, 14);
methodVisitor.visitLabel(label8);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 13);
Label label10 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label10);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("no-constructor");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 12);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label10);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitTypeInsn(NEW, "java/util/ArrayList");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/ArrayList", "<init>", "()V", false);
methodVisitor.visitVarInsn(ASTORE, 14);
methodVisitor.visitTypeInsn(NEW, "java/util/ArrayList");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/ArrayList", "<init>", "()V", false);
methodVisitor.visitVarInsn(ASTORE, 15);
methodVisitor.visitTypeInsn(NEW, "java/util/ArrayList");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/ArrayList", "<init>", "()V", false);
methodVisitor.visitVarInsn(ASTORE, 16);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 11);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "right", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 14);
methodVisitor.visitVarInsn(ALOAD, 15);
methodVisitor.visitVarInsn(ALOAD, 16);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "assignProjections", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;Lorg/apache/openjpa/kernel/exps/QueryExpressions;Ljava/util/List;Ljava/util/List;Ljava/util/List;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitTypeInsn(NEW, "org/apache/openjpa/kernel/FillStrategy$NewInstance");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 13);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/FillStrategy$NewInstance", "<init>", "(Ljava/lang/Class;)V", false);
methodVisitor.visitVarInsn(ASTORE, 17);
methodVisitor.visitTypeInsn(NEW, "org/apache/openjpa/kernel/ResultShape");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 13);
methodVisitor.visitVarInsn(ALOAD, 17);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/ResultShape", "<init>", "(Ljava/lang/Class;Lorg/apache/openjpa/kernel/FillStrategy;)V", false);
methodVisitor.visitVarInsn(ASTORE, 18);
methodVisitor.visitVarInsn(ALOAD, 14);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "iterator", "()Ljava/util/Iterator;", true);
methodVisitor.visitVarInsn(ASTORE, 19);
Label label11 = new Label();
methodVisitor.visitLabel(label11);
methodVisitor.visitFrame(Opcodes.F_FULL, 20, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/QueryExpressions", "java/util/List", "java/util/List", "java/util/List", Opcodes.INTEGER, "java/lang/Class", "org/apache/openjpa/kernel/ResultShape", Opcodes.INTEGER, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "java/lang/String", "java/lang/Class", "java/util/List", "java/util/List", "java/util/List", "org/apache/openjpa/kernel/FillStrategy", "org/apache/openjpa/kernel/ResultShape", "java/util/Iterator"}, 0, new Object[] {});
methodVisitor.visitVarInsn(ALOAD, 19);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true);
Label label12 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label12);
methodVisitor.visitVarInsn(ALOAD, 19);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Value");
methodVisitor.visitVarInsn(ASTORE, 20);
methodVisitor.visitVarInsn(ALOAD, 20);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Value", "getType", "()Ljava/lang/Class;", true);
methodVisitor.visitVarInsn(ASTORE, 21);
methodVisitor.visitVarInsn(ALOAD, 18);
methodVisitor.visitTypeInsn(NEW, "org/apache/openjpa/kernel/ResultShape");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 21);
methodVisitor.visitTypeInsn(NEW, "org/apache/openjpa/kernel/FillStrategy$Assign");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/FillStrategy$Assign", "<init>", "()V", false);
methodVisitor.visitVarInsn(ALOAD, 21);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "isPrimitive", "()Z", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/ResultShape", "<init>", "(Ljava/lang/Class;Lorg/apache/openjpa/kernel/FillStrategy;Z)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/ResultShape", "nest", "(Lorg/apache/openjpa/kernel/ResultShape;)Lorg/apache/openjpa/kernel/ResultShape;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitJumpInsn(GOTO, label11);
methodVisitor.visitLabel(label12);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitVarInsn(ILOAD, 6);
methodVisitor.visitInsn(ICONST_1);
Label label13 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label13);
methodVisitor.visitVarInsn(ALOAD, 13);
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitVarInsn(ALOAD, 18);
methodVisitor.visitVarInsn(ASTORE, 8);
Label label14 = new Label();
methodVisitor.visitJumpInsn(GOTO, label14);
methodVisitor.visitLabel(label13);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 8);
methodVisitor.visitVarInsn(ALOAD, 18);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/ResultShape", "nest", "(Lorg/apache/openjpa/kernel/ResultShape;)Lorg/apache/openjpa/kernel/ResultShape;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitLabel(label14);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 14);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "addAll", "(Ljava/util/Collection;)Z", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitVarInsn(ALOAD, 15);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "addAll", "(Ljava/util/Collection;)Z", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 16);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "addAll", "(Ljava/util/Collection;)Z", true);
methodVisitor.visitInsn(POP);
Label label15 = new Label();
methodVisitor.visitJumpInsn(GOTO, label15);
methodVisitor.visitLabel(label6);
methodVisitor.visitFrame(Opcodes.F_FULL, 12, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/QueryExpressions", "java/util/List", "java/util/List", "java/util/List", Opcodes.INTEGER, "java/lang/Class", "org/apache/openjpa/kernel/ResultShape", Opcodes.INTEGER, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 0, new Object[] {});
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitInsn(ARRAYLENGTH);
methodVisitor.visitInsn(ICONST_1);
Label label16 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPLE, label16);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "right", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
Label label17 = new Label();
methodVisitor.visitJumpInsn(GOTO, label17);
methodVisitor.visitLabel(label16);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitLabel(label17);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"});
methodVisitor.visitVarInsn(ASTORE, 12);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 11);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 13);
methodVisitor.visitVarInsn(ALOAD, 12);
Label label18 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label18);
methodVisitor.visitVarInsn(ALOAD, 12);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
Label label19 = new Label();
methodVisitor.visitJumpInsn(GOTO, label19);
methodVisitor.visitLabel(label18);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 11);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 64);
Label label20 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label20);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 11);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "firstChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
Label label21 = new Label();
methodVisitor.visitJumpInsn(GOTO, label21);
methodVisitor.visitLabel(label20);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder"});
methodVisitor.visitVarInsn(ALOAD, 11);
methodVisitor.visitLabel(label21);
methodVisitor.visitFrame(Opcodes.F_FULL, 14, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/QueryExpressions", "java/util/List", "java/util/List", "java/util/List", Opcodes.INTEGER, "java/lang/Class", "org/apache/openjpa/kernel/ResultShape", Opcodes.INTEGER, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value"}, 2, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"});
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "projectionClause", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/String;", false);
methodVisitor.visitLabel(label19);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/String"});
methodVisitor.visitVarInsn(ASTORE, 14);
methodVisitor.visitVarInsn(ALOAD, 12);
Label label22 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label22);
methodVisitor.visitVarInsn(ALOAD, 13);
methodVisitor.visitVarInsn(ALOAD, 14);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Value", "setAlias", "(Ljava/lang/String;)V", true);
methodVisitor.visitLabel(label22);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/String"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 13);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "add", "(Ljava/lang/Object;)Z", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 14);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "add", "(Ljava/lang/Object;)Z", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitVarInsn(ALOAD, 14);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "add", "(Ljava/lang/Object;)Z", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 13);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Value", "getType", "()Ljava/lang/Class;", true);
methodVisitor.visitVarInsn(ASTORE, 15);
methodVisitor.visitTypeInsn(NEW, "org/apache/openjpa/kernel/ResultShape");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 15);
methodVisitor.visitTypeInsn(NEW, "org/apache/openjpa/kernel/FillStrategy$Assign");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/FillStrategy$Assign", "<init>", "()V", false);
methodVisitor.visitVarInsn(ALOAD, 15);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "isPrimitive", "()Z", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/ResultShape", "<init>", "(Ljava/lang/Class;Lorg/apache/openjpa/kernel/FillStrategy;Z)V", false);
methodVisitor.visitVarInsn(ASTORE, 16);
methodVisitor.visitVarInsn(ILOAD, 6);
methodVisitor.visitInsn(ICONST_1);
Label label23 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label23);
methodVisitor.visitVarInsn(ALOAD, 16);
methodVisitor.visitVarInsn(ASTORE, 8);
methodVisitor.visitJumpInsn(GOTO, label15);
methodVisitor.visitLabel(label23);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"java/lang/Class", "org/apache/openjpa/kernel/ResultShape"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 8);
methodVisitor.visitVarInsn(ALOAD, 16);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/ResultShape", "nest", "(Lorg/apache/openjpa/kernel/ResultShape;)Lorg/apache/openjpa/kernel/ResultShape;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitLabel(label15);
methodVisitor.visitFrame(Opcodes.F_FULL, 10, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/QueryExpressions", "java/util/List", "java/util/List", "java/util/List", Opcodes.INTEGER, "java/lang/Class", "org/apache/openjpa/kernel/ResultShape", Opcodes.INTEGER}, 0, new Object[] {});
methodVisitor.visitIincInsn(9, 1);
methodVisitor.visitJumpInsn(GOTO, label4);
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 8);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "shape", "Lorg/apache/openjpa/kernel/ResultShape;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "resultClass", "Ljava/lang/Class;");
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(7, 22);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "projectionClause", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/String;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
Label label0 = new Label();
Label label1 = new Label();
methodVisitor.visitLookupSwitchInsn(label1, new int[] { 63 }, new Label[] { label0 });
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "firstChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "projectionClause", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/String;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "assemble", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/String;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(3, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "evalQueryOperation", "(Lorg/apache/openjpa/kernel/exps/QueryExpressions;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "root", "()Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitInsn(ICONST_1);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "root", "()Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 33);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label1);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "operation", "I");
Label label2 = new Label();
methodVisitor.visitJumpInsn(GOTO, label2);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "root", "()Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitInsn(ICONST_3);
Label label3 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label3);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "operation", "I");
methodVisitor.visitJumpInsn(GOTO, label2);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "root", "()Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitInsn(ICONST_2);
Label label4 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label4);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ICONST_3);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "operation", "I");
methodVisitor.visitJumpInsn(GOTO, label2);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitLdcInsn("unrecognized-operation");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "root", "()Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(7, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "evalGroupingClause", "(Lorg/apache/openjpa/kernel/exps/QueryExpressions;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "root", "()Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitIntInsn(BIPUSH, 30);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "findChildByID", "(IZ)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 2);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label0);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "getChildCount", "()I", false);
methodVisitor.visitVarInsn(ISTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ILOAD, 3);
methodVisitor.visitTypeInsn(ANEWARRAY, "org/apache/openjpa/kernel/exps/Value");
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "grouping", "[Lorg/apache/openjpa/kernel/exps/Value;");
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ISTORE, 4);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
methodVisitor.visitVarInsn(ILOAD, 4);
methodVisitor.visitVarInsn(ILOAD, 3);
Label label2 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPGE, label2);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ILOAD, 4);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "getChild", "(I)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 6);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitTypeInsn(INSTANCEOF, "org/apache/openjpa/kernel/exps/Path");
Label label3 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label3);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Path");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Path", "last", "()Lorg/apache/openjpa/meta/FieldMetaData;", true);
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitJumpInsn(IFNULL, label3);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/FieldMetaData", "getValue", "()Lorg/apache/openjpa/meta/ValueMetaData;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/meta/ValueMetaData", "getTypeMetaData", "()Lorg/apache/openjpa/meta/ClassMetaData;", true);
methodVisitor.visitJumpInsn(IFNULL, label3);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/FieldMetaData", "getValue", "()Lorg/apache/openjpa/meta/ValueMetaData;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/meta/ValueMetaData", "isEmbedded", "()Z", true);
methodVisitor.visitJumpInsn(IFEQ, label3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("cant-groupby-embeddable");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "getChildCount", "()I", false);
methodVisitor.visitInsn(ICONST_1);
Label label4 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPLE, label4);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "assemble", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/String;", false);
Label label5 = new Label();
methodVisitor.visitJumpInsn(GOTO, label5);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_FULL, 8, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/exps/QueryExpressions", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", Opcodes.INTEGER, Opcodes.INTEGER, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/meta/FieldMetaData"}, 6, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", Opcodes.INTEGER, "java/lang/String", "[Ljava/lang/Object;", "[Ljava/lang/Object;", Opcodes.INTEGER});
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_FULL, 8, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/exps/QueryExpressions", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", Opcodes.INTEGER, Opcodes.INTEGER, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/meta/FieldMetaData"}, 7, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", Opcodes.INTEGER, "java/lang/String", "[Ljava/lang/Object;", "[Ljava/lang/Object;", Opcodes.INTEGER, "java/lang/Object"});
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "grouping", "[Lorg/apache/openjpa/kernel/exps/Value;");
methodVisitor.visitVarInsn(ILOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitIincInsn(4, 1);
methodVisitor.visitJumpInsn(GOTO, label1);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_CHOP,3, null, 0, null);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(8, 8);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "evalHavingClause", "(Lorg/apache/openjpa/kernel/exps/QueryExpressions;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "root", "()Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitIntInsn(BIPUSH, 32);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "findChildByID", "(IZ)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 2);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label0);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getExpression", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "having", "Lorg/apache/openjpa/kernel/exps/Expression;");
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(4, 3);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "evalOrderingClauses", "(Lorg/apache/openjpa/kernel/exps/QueryExpressions;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "root", "()Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitIntInsn(BIPUSH, 91);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "findChildByID", "(IZ)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 2);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "getChildCount", "()I", false);
methodVisitor.visitVarInsn(ISTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ILOAD, 3);
methodVisitor.visitTypeInsn(ANEWARRAY, "org/apache/openjpa/kernel/exps/Value");
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "ordering", "[Lorg/apache/openjpa/kernel/exps/Value;");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ILOAD, 3);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/String");
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "orderingClauses", "[Ljava/lang/String;");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ILOAD, 3);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/String");
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "orderingAliases", "[Ljava/lang/String;");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ILOAD, 3);
methodVisitor.visitIntInsn(NEWARRAY, T_BOOLEAN);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "ascending", "[Z");
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ISTORE, 4);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_APPEND,3, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
methodVisitor.visitVarInsn(ILOAD, 4);
methodVisitor.visitVarInsn(ILOAD, 3);
Label label2 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPGE, label2);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ILOAD, 4);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "getChild", "(I)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "firstChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 6);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "ordering", "[Lorg/apache/openjpa/kernel/exps/Value;");
methodVisitor.visitVarInsn(ILOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "orderingClauses", "[Ljava/lang/String;");
methodVisitor.visitVarInsn(ILOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "assemble", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/String;", false);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "orderingAliases", "[Ljava/lang/String;");
methodVisitor.visitVarInsn(ILOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "ascending", "[Z");
methodVisitor.visitVarInsn(ILOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "getChildCount", "()I", false);
methodVisitor.visitInsn(ICONST_1);
Label label3 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPLE, label3);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "lastChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 93);
Label label4 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label4);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_FULL, 7, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/exps/QueryExpressions", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", Opcodes.INTEGER, Opcodes.INTEGER, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 2, new Object[] {"[Z", Opcodes.INTEGER});
methodVisitor.visitInsn(ICONST_1);
Label label5 = new Label();
methodVisitor.visitJumpInsn(GOTO, label5);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_FULL, 7, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/exps/QueryExpressions", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", Opcodes.INTEGER, Opcodes.INTEGER, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 2, new Object[] {"[Z", Opcodes.INTEGER});
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_FULL, 7, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/exps/QueryExpressions", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", Opcodes.INTEGER, Opcodes.INTEGER, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 3, new Object[] {"[Z", Opcodes.INTEGER, Opcodes.INTEGER});
methodVisitor.visitInsn(BASTORE);
methodVisitor.visitIincInsn(4, 1);
methodVisitor.visitJumpInsn(GOTO, label1);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_CHOP,3, null, 0, null);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ISTORE, 4);
Label label6 = new Label();
methodVisitor.visitLabel(label6);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
methodVisitor.visitVarInsn(ILOAD, 4);
methodVisitor.visitVarInsn(ILOAD, 3);
methodVisitor.visitJumpInsn(IF_ICMPGE, label0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "orderingClauses", "[Ljava/lang/String;");
methodVisitor.visitVarInsn(ILOAD, 4);
methodVisitor.visitInsn(AALOAD);
Label label7 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label7);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "orderingClauses", "[Ljava/lang/String;");
methodVisitor.visitVarInsn(ILOAD, 4);
methodVisitor.visitInsn(AALOAD);
methodVisitor.visitLdcInsn("");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z", false);
methodVisitor.visitJumpInsn(IFNE, label7);
Label label8 = new Label();
methodVisitor.visitJumpInsn(GOTO, label8);
methodVisitor.visitLabel(label7);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ISTORE, 5);
Label label9 = new Label();
methodVisitor.visitLabel(label9);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
methodVisitor.visitVarInsn(ILOAD, 5);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "projections", "[Lorg/apache/openjpa/kernel/exps/Value;");
methodVisitor.visitInsn(ARRAYLENGTH);
methodVisitor.visitJumpInsn(IF_ICMPGE, label8);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "projectionAliases", "[Ljava/lang/String;");
methodVisitor.visitVarInsn(ILOAD, 5);
methodVisitor.visitInsn(AALOAD);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "orderingAliases", "[Ljava/lang/String;");
methodVisitor.visitVarInsn(ILOAD, 4);
methodVisitor.visitInsn(AALOAD);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
Label label10 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label10);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "ordering", "[Lorg/apache/openjpa/kernel/exps/Value;");
methodVisitor.visitVarInsn(ILOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "projections", "[Lorg/apache/openjpa/kernel/exps/Value;");
methodVisitor.visitVarInsn(ILOAD, 5);
methodVisitor.visitInsn(AALOAD);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitJumpInsn(GOTO, label8);
methodVisitor.visitLabel(label10);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitIincInsn(5, 1);
methodVisitor.visitJumpInsn(GOTO, label9);
methodVisitor.visitLabel(label8);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitIincInsn(4, 1);
methodVisitor.visitJumpInsn(GOTO, label6);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(4, 7);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "evalSelectClause", "(Lorg/apache/openjpa/kernel/exps/QueryExpressions;)Lorg/apache/openjpa/kernel/exps/Expression;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "operation", "I");
methodVisitor.visitInsn(ICONST_1);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPEQ, label0);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "root", "()Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitIntInsn(BIPUSH, 13);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "findChildByID", "(IZ)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 3);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label1);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitIntInsn(BIPUSH, 22);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "hasChildID", "(I)Z", false);
methodVisitor.visitJumpInsn(IFEQ, label1);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitIntInsn(BIPUSH, 6);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "distinct", "I");
Label label2 = new Label();
methodVisitor.visitJumpInsn(GOTO, label2);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitIntInsn(BIPUSH, 8);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "distinct", "I");
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitIntInsn(BIPUSH, 14);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "findChildByID", "(IZ)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 4);
Label label3 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label3);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "getChildCount", "()I", false);
methodVisitor.visitVarInsn(ISTORE, 5);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "firstChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 6);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "parent", "Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 33);
Label label4 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label4);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(DUP);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "distinct", "I");
methodVisitor.visitIntInsn(BIPUSH, -3);
methodVisitor.visitInsn(IAND);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "distinct", "I");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "assignSubselectProjection", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;Lorg/apache/openjpa/kernel/exps/QueryExpressions;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {Opcodes.INTEGER, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 0, null);
methodVisitor.visitVarInsn(ILOAD, 5);
methodVisitor.visitInsn(ICONST_1);
Label label5 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label5);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitJumpInsn(IFNULL, label5);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "getChildCount", "()I", false);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitJumpInsn(IF_ICMPNE, label5);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitJumpInsn(IFNULL, label5);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 64);
Label label6 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label6);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitLabel(label6);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "assertSchemaAlias", "()Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
methodVisitor.visitJumpInsn(IFEQ, label5);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(DUP);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "distinct", "I");
methodVisitor.visitIntInsn(BIPUSH, -3);
methodVisitor.visitInsn(IAND);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "distinct", "I");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ILOAD, 5);
methodVisitor.visitTypeInsn(ANEWARRAY, "org/apache/openjpa/kernel/exps/Value");
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "projections", "[Lorg/apache/openjpa/kernel/exps/Value;");
methodVisitor.visitTypeInsn(NEW, "java/util/ArrayList");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/ArrayList", "<init>", "()V", false);
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitTypeInsn(NEW, "java/util/ArrayList");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/ArrayList", "<init>", "()V", false);
methodVisitor.visitVarInsn(ASTORE, 8);
methodVisitor.visitTypeInsn(NEW, "java/util/ArrayList");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/ArrayList", "<init>", "()V", false);
methodVisitor.visitVarInsn(ASTORE, 9);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitVarInsn(ALOAD, 8);
methodVisitor.visitVarInsn(ALOAD, 9);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "evalProjectionsResultShape", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;Lorg/apache/openjpa/kernel/exps/QueryExpressions;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V", false);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "size", "()I", true);
methodVisitor.visitTypeInsn(ANEWARRAY, "org/apache/openjpa/kernel/exps/Value");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;", true);
methodVisitor.visitTypeInsn(CHECKCAST, "[Lorg/apache/openjpa/kernel/exps/Value;");
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "projections", "[Lorg/apache/openjpa/kernel/exps/Value;");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 8);
methodVisitor.visitVarInsn(ALOAD, 8);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "size", "()I", true);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/String");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;", true);
methodVisitor.visitTypeInsn(CHECKCAST, "[Ljava/lang/String;");
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "projectionAliases", "[Ljava/lang/String;");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 9);
methodVisitor.visitVarInsn(ALOAD, 9);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "size", "()I", true);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/String");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;", true);
methodVisitor.visitTypeInsn(CHECKCAST, "[Ljava/lang/String;");
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "projectionClauses", "[Ljava/lang/String;");
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(6, 10);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "assertSchemaAlias", "()Ljava/lang/String;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/Context", "schemaAlias", "Ljava/lang/String;");
methodVisitor.visitVarInsn(ASTORE, 1);
methodVisitor.visitVarInsn(ALOAD, 1);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("alias-required");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/Context", "meta", "Lorg/apache/openjpa/meta/ClassMetaData;");
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/String"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(7, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PROTECTED, "evalFetchJoins", "(Lorg/apache/openjpa/kernel/exps/QueryExpressions;)Lorg/apache/openjpa/kernel/exps/Expression;", null, null);
methodVisitor.visitCode();
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "root", "()Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitIntInsn(BIPUSH, 8);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "findChildrenByID", "(I)[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ISTORE, 6);
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_FULL, 7, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/exps/QueryExpressions", "org/apache/openjpa/kernel/exps/Expression", "java/util/Set", "java/util/Set", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", Opcodes.INTEGER}, 0, new Object[] {});
methodVisitor.visitVarInsn(ALOAD, 5);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label1);
methodVisitor.visitVarInsn(ILOAD, 6);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitInsn(ARRAYLENGTH);
methodVisitor.visitJumpInsn(IF_ICMPGE, label1);
methodVisitor.visitVarInsn(ALOAD, 3);
Label label2 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label2);
methodVisitor.visitTypeInsn(NEW, "java/util/TreeSet");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/TreeSet", "<init>", "()V", false);
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ASTORE, 3);
Label label3 = new Label();
methodVisitor.visitJumpInsn(GOTO, label3);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/util/Set"});
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitVarInsn(ILOAD, 6);
methodVisitor.visitInsn(AALOAD);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getPath", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Path;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Path", "last", "()Lorg/apache/openjpa/meta/FieldMetaData;", true);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/FieldMetaData", "getFullName", "(Z)Ljava/lang/String;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "add", "(Ljava/lang/Object;)Z", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitIincInsn(6, 1);
methodVisitor.visitJumpInsn(GOTO, label0);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "root", "()Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitIntInsn(BIPUSH, 9);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "findChildrenByID", "(I)[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 6);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ISTORE, 7);
Label label4 = new Label();
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", Opcodes.INTEGER}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 6);
Label label5 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label5);
methodVisitor.visitVarInsn(ILOAD, 7);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitInsn(ARRAYLENGTH);
methodVisitor.visitJumpInsn(IF_ICMPGE, label5);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitVarInsn(ILOAD, 7);
methodVisitor.visitInsn(AALOAD);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getPath", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Path;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Path", "last", "()Lorg/apache/openjpa/meta/FieldMetaData;", true);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/FieldMetaData", "getFullName", "(Z)Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ASTORE, 8);
methodVisitor.visitVarInsn(ALOAD, 3);
Label label6 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label6);
methodVisitor.visitTypeInsn(NEW, "java/util/TreeSet");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/TreeSet", "<init>", "()V", false);
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ASTORE, 3);
Label label7 = new Label();
methodVisitor.visitJumpInsn(GOTO, label7);
methodVisitor.visitLabel(label6);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/String"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitLabel(label7);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/util/Set"});
methodVisitor.visitVarInsn(ALOAD, 8);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "add", "(Ljava/lang/Object;)Z", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 4);
Label label8 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label8);
methodVisitor.visitTypeInsn(NEW, "java/util/TreeSet");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/TreeSet", "<init>", "()V", false);
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ASTORE, 4);
Label label9 = new Label();
methodVisitor.visitJumpInsn(GOTO, label9);
methodVisitor.visitLabel(label8);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitLabel(label9);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/util/Set"});
methodVisitor.visitVarInsn(ALOAD, 8);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "add", "(Ljava/lang/Object;)Z", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitIincInsn(7, 1);
methodVisitor.visitJumpInsn(GOTO, label4);
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 3);
Label label10 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label10);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "size", "()I", true);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/String");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;", true);
methodVisitor.visitTypeInsn(CHECKCAST, "[Ljava/lang/String;");
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "fetchPaths", "[Ljava/lang/String;");
methodVisitor.visitLabel(label10);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 4);
Label label11 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label11);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "size", "()I", true);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/String");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;", true);
methodVisitor.visitTypeInsn(CHECKCAST, "[Ljava/lang/String;");
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "fetchInnerPaths", "[Ljava/lang/String;");
methodVisitor.visitLabel(label11);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(5, 9);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PROTECTED, "evalSetClause", "(Lorg/apache/openjpa/kernel/exps/QueryExpressions;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "root", "()Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitIntInsn(BIPUSH, 11);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "findChildrenByID", "(I)[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ISTORE, 3);
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", Opcodes.INTEGER}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 2);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label1);
methodVisitor.visitVarInsn(ILOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitInsn(ARRAYLENGTH);
methodVisitor.visitJumpInsn(IF_ICMPGE, label1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ILOAD, 3);
methodVisitor.visitInsn(AALOAD);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "firstChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getPath", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Path;", false);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Path", "last", "()Lorg/apache/openjpa/meta/FieldMetaData;", true);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/FieldMetaData", "getValue", "()Lorg/apache/openjpa/meta/ValueMetaData;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/meta/ValueMetaData", "getEmbeddedMetaData", "()Lorg/apache/openjpa/meta/ClassMetaData;", true);
Label label2 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("cant-bulk-update-embeddable");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ILOAD, 3);
methodVisitor.visitInsn(AALOAD);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "firstChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "assemble", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/String;", false);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/kernel/exps/Path"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ILOAD, 3);
methodVisitor.visitInsn(AALOAD);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "lastChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
Label label3 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label3);
methodVisitor.visitInsn(ACONST_NULL);
Label label4 = new Label();
methodVisitor.visitJumpInsn(GOTO, label4);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"org/apache/openjpa/kernel/exps/Value"});
methodVisitor.visitVarInsn(ASTORE, 6);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/exps/QueryExpressions", "putUpdate", "(Lorg/apache/openjpa/kernel/exps/Path;Lorg/apache/openjpa/kernel/exps/Value;)V", false);
methodVisitor.visitIincInsn(3, 1);
methodVisitor.visitJumpInsn(GOTO, label0);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_CHOP,3, null, 0, null);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(9, 7);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "evalWhereClause", "()Lorg/apache/openjpa/kernel/exps/Expression;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "root", "()Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitIntInsn(BIPUSH, 29);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "findChildByID", "(IZ)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 1);
methodVisitor.visitVarInsn(ALOAD, 1);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label0);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "eval", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/Object;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Expression");
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(3, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "evalFromClause", "(Z)Lorg/apache/openjpa/kernel/exps/Expression;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "root", "()Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitInsn(ICONST_4);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "findChildByID", "(IZ)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 2);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("no-from-clause");
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ILOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "evalFromClause", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;Z)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(5, 3);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "evalFromClause", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;Z)Lorg/apache/openjpa/kernel/exps/Expression;", null, null);
methodVisitor.visitCode();
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ISTORE, 4);
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"org/apache/openjpa/kernel/exps/Expression", Opcodes.INTEGER}, 0, null);
methodVisitor.visitVarInsn(ILOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitInsn(ARRAYLENGTH);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPGE, label1);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitVarInsn(ILOAD, 4);
methodVisitor.visitInsn(AALOAD);
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitInsn(ICONST_5);
Label label2 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "evalFromItem", "(Lorg/apache/openjpa/kernel/exps/Expression;Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;Z)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
Label label3 = new Label();
methodVisitor.visitJumpInsn(GOTO, label3);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 7);
Label label4 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label4);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "addJoin", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;ZLorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitJumpInsn(GOTO, label3);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 6);
Label label5 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label5);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "addJoin", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;ZLorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitJumpInsn(GOTO, label3);
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 9);
Label label6 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label6);
methodVisitor.visitJumpInsn(GOTO, label3);
methodVisitor.visitLabel(label6);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 8);
Label label7 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label7);
methodVisitor.visitJumpInsn(GOTO, label3);
methodVisitor.visitLabel(label7);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("not-schema-name");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitIincInsn(4, 1);
methodVisitor.visitJumpInsn(GOTO, label0);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(7, 6);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "getSubquery", "(Ljava/lang/String;Lorg/apache/openjpa/kernel/exps/Path;Lorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getVariable", "(Ljava/lang/String;Z)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "bindVariable", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Path", "last", "()Lorg/apache/openjpa/meta/FieldMetaData;", true);
methodVisitor.visitVarInsn(ASTORE, 6);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getFieldType", "(Lorg/apache/openjpa/meta/FieldMetaData;)Lorg/apache/openjpa/meta/ClassMetaData;", false);
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitVarInsn(ALOAD, 7);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label0);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/FieldMetaData", "isElementCollection", "()Z", false);
methodVisitor.visitJumpInsn(IFEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/FieldMetaData", "getDefiningMetaData", "()Lorg/apache/openjpa/meta/ClassMetaData;", false);
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_FULL, 8, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "java/lang/String", "org/apache/openjpa/kernel/exps/Path", "org/apache/openjpa/kernel/exps/Expression", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Expression", "org/apache/openjpa/meta/FieldMetaData", "org/apache/openjpa/meta/ClassMetaData"}, 0, new Object[] {});
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setCandidate", "(Lorg/apache/openjpa/meta/ClassMetaData;Ljava/lang/String;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitVarInsn(ASTORE, 8);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/exps/Context", "getSubquery", "()Lorg/apache/openjpa/kernel/exps/Subquery;", false);
methodVisitor.visitVarInsn(ASTORE, 9);
methodVisitor.visitVarInsn(ALOAD, 9);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "newSubquery", "(Lorg/apache/openjpa/meta/ClassMetaData;ZLjava/lang/String;)Lorg/apache/openjpa/kernel/exps/Subquery;", true);
methodVisitor.visitVarInsn(ASTORE, 9);
methodVisitor.visitVarInsn(ALOAD, 8);
methodVisitor.visitVarInsn(ALOAD, 9);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/exps/Context", "setSubquery", "(Lorg/apache/openjpa/kernel/exps/Subquery;)V", false);
Label label2 = new Label();
methodVisitor.visitJumpInsn(GOTO, label2);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"org/apache/openjpa/kernel/exps/Context", "org/apache/openjpa/kernel/exps/Subquery"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 9);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Subquery", "setSubqAlias", "(Ljava/lang/String;)V", true);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 9);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "newPath", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Path;", true);
methodVisitor.visitVarInsn(ASTORE, 10);
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Path", "getCorrelationVar", "()Ljava/lang/String;", true);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Path", "setSchemaAlias", "(Ljava/lang/String;)V", true);
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Path", "setMetaData", "(Lorg/apache/openjpa/meta/ClassMetaData;)V", true);
methodVisitor.visitVarInsn(ALOAD, 9);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Subquery", "setMetaData", "(Lorg/apache/openjpa/meta/ClassMetaData;)V", true);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/FieldMetaData", "isElementCollection", "()Z", false);
Label label3 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "and", "(Lorg/apache/openjpa/kernel/exps/Expression;Lorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
Label label4 = new Label();
methodVisitor.visitJumpInsn(GOTO, label4);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/kernel/exps/Path"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "equal", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "and", "(Lorg/apache/openjpa/kernel/exps/Expression;Lorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(5, 11);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "addJoin", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;ZLorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "firstChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 57);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getQualifiedPath", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Path;", false);
methodVisitor.visitVarInsn(ASTORE, 5);
Label label1 = new Label();
methodVisitor.visitJumpInsn(GOTO, label1);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Path"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getPath", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;ZZ)Lorg/apache/openjpa/kernel/exps/Path;", false);
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "getChildCount", "()I", false);
methodVisitor.visitInsn(ICONST_2);
Label label2 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPLT, label2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "right", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
Label label3 = new Label();
methodVisitor.visitJumpInsn(GOTO, label3);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"});
methodVisitor.visitVarInsn(ASTORE, 6);
methodVisitor.visitVarInsn(ILOAD, 2);
Label label4 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label4);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/exps/Context", "getParent", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitJumpInsn(IFNULL, label4);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/Context", "schemaAlias", "Ljava/lang/String;");
methodVisitor.visitJumpInsn(IFNONNULL, label4);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getSubquery", "(Ljava/lang/String;Lorg/apache/openjpa/kernel/exps/Path;Lorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "addJoin", "(Lorg/apache/openjpa/kernel/exps/Path;Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;Lorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(4, 7);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "addJoin", "(Lorg/apache/openjpa/kernel/exps/Path;Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;Lorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Path", "last", "()Lorg/apache/openjpa/meta/FieldMetaData;", true);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 4);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("path-no-meta");
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/meta/FieldMetaData"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 2);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
Label label2 = new Label();
methodVisitor.visitJumpInsn(GOTO, label2);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "nextAlias", "()Ljava/lang/String;", false);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/String"});
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getVariable", "(Ljava/lang/String;Z)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 6);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getFieldType", "(Lorg/apache/openjpa/meta/FieldMetaData;)Lorg/apache/openjpa/meta/ClassMetaData;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Value", "setMetaData", "(Lorg/apache/openjpa/meta/ClassMetaData;)V", true);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "isBound", "(Lorg/apache/openjpa/kernel/exps/Value;)Z", false);
methodVisitor.visitVarInsn(ISTORE, 8);
methodVisitor.visitVarInsn(ILOAD, 8);
Label label3 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;I)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 6);
Label label4 = new Label();
methodVisitor.visitJumpInsn(GOTO, label4);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_FULL, 9, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/exps/Path", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Expression", "org/apache/openjpa/meta/FieldMetaData", "java/lang/String", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Expression", Opcodes.INTEGER}, 0, new Object[] {});
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "bind", "(Lorg/apache/openjpa/kernel/exps/Value;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "bindVariable", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "and", "(Lorg/apache/openjpa/kernel/exps/Expression;Lorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/FieldMetaData", "isTypePC", "()Z", false);
Label label5 = new Label();
methodVisitor.visitJumpInsn(IFNE, label5);
methodVisitor.visitVarInsn(ILOAD, 8);
Label label6 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label6);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "contains", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "and", "(Lorg/apache/openjpa/kernel/exps/Expression;Lorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitLabel(label6);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitContainsTypes", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;I)V", false);
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "and", "(Lorg/apache/openjpa/kernel/exps/Expression;Lorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(7, 9);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "evalFromItem", "(Lorg/apache/openjpa/kernel/exps/Expression;Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;Z)Lorg/apache/openjpa/kernel/exps/Expression;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "firstChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "resolveClassMetaData", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/meta/ClassMetaData;", false);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "getChildCount", "()I", false);
methodVisitor.visitInsn(ICONST_2);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPGE, label0);
methodVisitor.visitVarInsn(ILOAD, 3);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("alias-required");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"org/apache/openjpa/meta/ClassMetaData", "java/lang/String"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "right", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "left", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 6);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "addSchemaToContext", "(Ljava/lang/String;Lorg/apache/openjpa/meta/ClassMetaData;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "isPath", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Z", false);
Label label2 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getPath", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Path;", false);
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getSubquery", "(Ljava/lang/String;Lorg/apache/openjpa/kernel/exps/Path;Lorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getVariable", "(Ljava/lang/String;Z)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Value", "setMetaData", "(Lorg/apache/openjpa/meta/ClassMetaData;)V", true);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "bind", "(Lorg/apache/openjpa/kernel/exps/Value;)V", false);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/Context", "schemaAlias", "Ljava/lang/String;");
Label label3 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setCandidate", "(Lorg/apache/openjpa/meta/ClassMetaData;Ljava/lang/String;)V", false);
Label label4 = new Label();
methodVisitor.visitJumpInsn(GOTO, label4);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "addAccessPath", "(Lorg/apache/openjpa/meta/ClassMetaData;)Lorg/apache/openjpa/meta/ClassMetaData;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(7, 8);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PROTECTED, "isDeclaredVariable", "(Ljava/lang/String;)Z", null, null);
methodVisitor.visitCode();
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitMaxs(1, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "isPath", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Z", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "getChildCount", "()I", false);
methodVisitor.visitInsn(ICONST_2);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPGE, label0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "firstChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 2);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label1);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/String"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getMetaDataForAlias", "(Ljava/lang/String;)Lorg/apache/openjpa/meta/ClassMetaData;", false);
Label label2 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label2);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "isSeenVariable", "(Ljava/lang/String;)Z", false);
Label label3 = new Label();
methodVisitor.visitJumpInsn(IFNE, label3);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getVariable", "(Ljava/lang/String;Z)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 3);
Label label4 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label4);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "isBound", "(Lorg/apache/openjpa/kernel/exps/Value;)Z", false);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/kernel/exps/Value"}, 0, null);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitMaxs(3, 4);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE | ACC_STATIC, "getFieldType", "(Lorg/apache/openjpa/meta/FieldMetaData;)Lorg/apache/openjpa/meta/ClassMetaData;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label0);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitVarInsn(ASTORE, 1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/FieldMetaData", "getElement", "()Lorg/apache/openjpa/meta/ValueMetaData;", false);
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ASTORE, 2);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/meta/ValueMetaData", "getDeclaredTypeMetaData", "()Lorg/apache/openjpa/meta/ClassMetaData;", true);
methodVisitor.visitVarInsn(ASTORE, 1);
Label label2 = new Label();
methodVisitor.visitJumpInsn(GOTO, label2);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"org/apache/openjpa/meta/ClassMetaData", "org/apache/openjpa/meta/ValueMetaData"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/FieldMetaData", "getKey", "()Lorg/apache/openjpa/meta/ValueMetaData;", false);
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ASTORE, 2);
Label label3 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label3);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/meta/ValueMetaData", "getDeclaredTypeMetaData", "()Lorg/apache/openjpa/meta/ClassMetaData;", true);
methodVisitor.visitVarInsn(ASTORE, 1);
methodVisitor.visitJumpInsn(GOTO, label2);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/FieldMetaData", "getValue", "()Lorg/apache/openjpa/meta/ValueMetaData;", false);
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitJumpInsn(IFNULL, label2);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/meta/ValueMetaData", "getDeclaredTypeMetaData", "()Lorg/apache/openjpa/meta/ClassMetaData;", true);
methodVisitor.visitVarInsn(ASTORE, 1);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
Label label4 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label4);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/ClassMetaData", "getDescribedType", "()Ljava/lang/Class;", false);
methodVisitor.visitLdcInsn(Type.getType("Ljava/lang/Object;"));
Label label5 = new Label();
methodVisitor.visitJumpInsn(IF_ACMPNE, label5);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/FieldMetaData", "getDeclaredTypeMetaData", "()Lorg/apache/openjpa/meta/ClassMetaData;", false);
methodVisitor.visitVarInsn(ASTORE, 1);
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(2, 3);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PROTECTED, "getVariable", "(Ljava/lang/String;Z)Lorg/apache/openjpa/kernel/exps/Value;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 1);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label0);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ILOAD, 2);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getDefinedVariable", "(Ljava/lang/String;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitJumpInsn(IFNONNULL, label1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "createVariable", "(Ljava/lang/String;Z)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "toLowerCase", "()Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/exps/AbstractExpressionBuilder", "getVariable", "(Ljava/lang/String;Z)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(3, 3);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PROTECTED, "getDefinedVariable", "(Ljava/lang/String;)Lorg/apache/openjpa/kernel/exps/Value;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/exps/Context", "getVariable", "(Ljava/lang/String;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(2, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PROTECTED, "isSeenVariable", "(Ljava/lang/String;)Z", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/exps/Context", "findContext", "(Ljava/lang/String;)Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 2);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label0);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/kernel/exps/Context"}, 0, null);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitMaxs(2, 3);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "assertSchemaName", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/String;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 96);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("not-identifer");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "assemble", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/String;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(7, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "checkEmbeddable", "(Lorg/apache/openjpa/kernel/exps/Value;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "currentQuery", "()Ljava/lang/String;", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "checkEmbeddable", "(Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/String;)V", false);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(2, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, "checkEmbeddable", "(Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/String;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(INSTANCEOF, "org/apache/openjpa/kernel/exps/Path");
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Path");
Label label1 = new Label();
methodVisitor.visitJumpInsn(GOTO, label1);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"org/apache/openjpa/kernel/exps/Path"});
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 2);
Label label2 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label2);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/kernel/exps/Path"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Path", "last", "()Lorg/apache/openjpa/meta/FieldMetaData;", true);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 3);
Label label3 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label3);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/meta/FieldMetaData"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/FieldMetaData", "isElementCollection", "()Z", false);
Label label4 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label4);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/FieldMetaData", "getElement", "()Lorg/apache/openjpa/meta/ValueMetaData;", false);
Label label5 = new Label();
methodVisitor.visitJumpInsn(GOTO, label5);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/FieldMetaData", "getValue", "()Lorg/apache/openjpa/meta/ValueMetaData;", false);
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"org/apache/openjpa/meta/ValueMetaData"});
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/meta/ValueMetaData", "getEmbeddedMetaData", "()Lorg/apache/openjpa/meta/ClassMetaData;", true);
Label label6 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label6);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "_loc", "Lorg/apache/openjpa/lib/util/Localizer;");
methodVisitor.visitLdcInsn("bad-predicate");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/FieldMetaData", "getName", "()Ljava/lang/String;", false);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/util/Localizer", "get", "(Ljava/lang/String;[Ljava/lang/Object;)Lorg/apache/openjpa/lib/util/Localizer$Message;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/util/Localizer$Message", "getMessage", "()Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "_loc", "Lorg/apache/openjpa/lib/util/Localizer;");
methodVisitor.visitLdcInsn("parse-error");
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/util/Localizer", "get", "(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)Lorg/apache/openjpa/lib/util/Localizer$Message;", false);
methodVisitor.visitVarInsn(ASTORE, 6);
methodVisitor.visitTypeInsn(NEW, "org/apache/openjpa/util/UserException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/util/UserException", "<init>", "(Lorg/apache/openjpa/lib/util/Localizer$Message;Ljava/lang/Throwable;)V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label6);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/meta/ValueMetaData"}, 0, null);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(6, 7);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "eval", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/Object;", null, null);
methodVisitor.visitCode();
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "not", "Z");
methodVisitor.visitVarInsn(ISTORE, 5);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
Label label0 = new Label();
Label label1 = new Label();
Label label2 = new Label();
Label label3 = new Label();
Label label4 = new Label();
Label label5 = new Label();
Label label6 = new Label();
Label label7 = new Label();
Label label8 = new Label();
Label label9 = new Label();
Label label10 = new Label();
Label label11 = new Label();
Label label12 = new Label();
Label label13 = new Label();
Label label14 = new Label();
Label label15 = new Label();
Label label16 = new Label();
Label label17 = new Label();
Label label18 = new Label();
Label label19 = new Label();
Label label20 = new Label();
Label label21 = new Label();
Label label22 = new Label();
Label label23 = new Label();
Label label24 = new Label();
Label label25 = new Label();
Label label26 = new Label();
Label label27 = new Label();
Label label28 = new Label();
Label label29 = new Label();
Label label30 = new Label();
Label label31 = new Label();
Label label32 = new Label();
Label label33 = new Label();
Label label34 = new Label();
Label label35 = new Label();
Label label36 = new Label();
Label label37 = new Label();
Label label38 = new Label();
Label label39 = new Label();
Label label40 = new Label();
Label label41 = new Label();
Label label42 = new Label();
Label label43 = new Label();
Label label44 = new Label();
Label label45 = new Label();
Label label46 = new Label();
Label label47 = new Label();
Label label48 = new Label();
Label label49 = new Label();
Label label50 = new Label();
Label label51 = new Label();
Label label52 = new Label();
Label label53 = new Label();
Label label54 = new Label();
Label label55 = new Label();
Label label56 = new Label();
Label label57 = new Label();
Label label58 = new Label();
Label label59 = new Label();
Label label60 = new Label();
Label label61 = new Label();
Label label62 = new Label();
Label label63 = new Label();
Label label64 = new Label();
Label label65 = new Label();
Label label66 = new Label();
Label label67 = new Label();
Label label68 = new Label();
Label label69 = new Label();
Label label70 = new Label();
Label label71 = new Label();
Label label72 = new Label();
Label label73 = new Label();
Label label74 = new Label();
Label label75 = new Label();
Label label76 = new Label();
Label label77 = new Label();
methodVisitor.visitTableSwitchInsn(10, 113, label1, new Label[] { label0, label1, label1, label1, label1, label1, label2, label1, label3, label1, label1, label4, label1, label5, label6, label7, label8, label9, label10, label11, label1, label12, label1, label13, label14, label15, label16, label17, label18, label19, label20, label21, label22, label23, label24, label25, label26, label27, label28, label29, label30, label31, label32, label33, label34, label35, label36, label37, label1, label38, label1, label1, label39, label40, label41, label42, label43, label44, label45, label46, label47, label48, label1, label49, label50, label51, label52, label53, label1, label1, label1, label54, label55, label56, label57, label58, label59, label60, label61, label62, label63, label1, label1, label1, label1, label64, label1, label1, label65, label65, label66, label67, label68, label69, label70, label71, label72, label73, label74, label75, label76, label77, label69, label69 });
methodVisitor.visitLabel(label41);
methodVisitor.visitFrame(Opcodes.F_FULL, 6, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", Opcodes.INTEGER}, 0, new Object[] {});
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "eval", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/Object;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label40);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getType", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label19);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getTypeLiteral", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getPathOrConstant", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label42);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "eval", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/Object;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label45);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getSimpleCaseExpression", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label43);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getGeneralCaseExpression", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label44);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getWhenCondition", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label46);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getWhenScalar", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label47);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getCoalesceExpression", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label48);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getNullIfExpression", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label11);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getExpression", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label68);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitLdcInsn("true");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
Label label78 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label78);
methodVisitor.visitFieldInsn(GETSTATIC, "java/lang/Boolean", "TRUE", "Ljava/lang/Boolean;");
Label label79 = new Label();
methodVisitor.visitJumpInsn(GOTO, label79);
methodVisitor.visitLabel(label78);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"org/apache/openjpa/kernel/exps/ExpressionFactory"});
methodVisitor.visitFieldInsn(GETSTATIC, "java/lang/Boolean", "FALSE", "Ljava/lang/Boolean;");
methodVisitor.visitLabel(label79);
methodVisitor.visitFrame(Opcodes.F_FULL, 6, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", Opcodes.INTEGER}, 2, new Object[] {"org/apache/openjpa/kernel/exps/ExpressionFactory", "java/lang/Boolean"});
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "newLiteral", "(Ljava/lang/Object;I)Lorg/apache/openjpa/kernel/exps/Literal;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label66);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitTypeInsn(NEW, "java/math/BigDecimal");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitLdcInsn("l");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "endsWith", "(Ljava/lang/String;)Z", false);
Label label80 = new Label();
methodVisitor.visitJumpInsn(IFNE, label80);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitLdcInsn("L");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "endsWith", "(Ljava/lang/String;)Z", false);
Label label81 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label81);
methodVisitor.visitLabel(label80);
methodVisitor.visitFrame(Opcodes.F_FULL, 6, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", Opcodes.INTEGER}, 2, new Object[] {label66, label66});
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I", false);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(ISUB);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "substring", "(II)Ljava/lang/String;", false);
Label label82 = new Label();
methodVisitor.visitJumpInsn(GOTO, label82);
methodVisitor.visitLabel(label81);
methodVisitor.visitFrame(Opcodes.F_FULL, 6, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", Opcodes.INTEGER}, 2, new Object[] {label66, label66});
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitLabel(label82);
methodVisitor.visitFrame(Opcodes.F_FULL, 6, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", Opcodes.INTEGER}, 3, new Object[] {label66, label66, "java/lang/String"});
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/math/BigDecimal", "<init>", "(Ljava/lang/String;)V", false);
methodVisitor.visitTypeInsn(NEW, "java/math/BigDecimal");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "negative", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)S", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/math/BigDecimal", "<init>", "(I)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/math/BigDecimal", "multiply", "(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;", false);
methodVisitor.visitVarInsn(ASTORE, 6);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/math/BigDecimal", "longValue", "()J", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Long", "valueOf", "(J)Ljava/lang/Long;", false);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "newLiteral", "(Ljava/lang/Object;I)Lorg/apache/openjpa/kernel/exps/Literal;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label67);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitTypeInsn(NEW, "java/math/BigDecimal");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitLdcInsn("d");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "endsWith", "(Ljava/lang/String;)Z", false);
Label label83 = new Label();
methodVisitor.visitJumpInsn(IFNE, label83);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitLdcInsn("D");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "endsWith", "(Ljava/lang/String;)Z", false);
methodVisitor.visitJumpInsn(IFNE, label83);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitLdcInsn("f");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "endsWith", "(Ljava/lang/String;)Z", false);
methodVisitor.visitJumpInsn(IFNE, label83);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitLdcInsn("F");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "endsWith", "(Ljava/lang/String;)Z", false);
Label label84 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label84);
methodVisitor.visitLabel(label83);
methodVisitor.visitFrame(Opcodes.F_FULL, 6, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", Opcodes.INTEGER}, 2, new Object[] {label67, label67});
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I", false);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(ISUB);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "substring", "(II)Ljava/lang/String;", false);
Label label85 = new Label();
methodVisitor.visitJumpInsn(GOTO, label85);
methodVisitor.visitLabel(label84);
methodVisitor.visitFrame(Opcodes.F_FULL, 6, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", Opcodes.INTEGER}, 2, new Object[] {label67, label67});
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitLabel(label85);
methodVisitor.visitFrame(Opcodes.F_FULL, 6, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", Opcodes.INTEGER}, 3, new Object[] {label67, label67, "java/lang/String"});
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/math/BigDecimal", "<init>", "(Ljava/lang/String;)V", false);
methodVisitor.visitTypeInsn(NEW, "java/math/BigDecimal");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "negative", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)S", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/math/BigDecimal", "<init>", "(I)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/math/BigDecimal", "multiply", "(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;", false);
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "newLiteral", "(Ljava/lang/Object;I)Lorg/apache/openjpa/kernel/exps/Literal;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label69);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "trimQuotes", "(Ljava/lang/String;)Ljava/lang/String;", false);
methodVisitor.visitInsn(ICONST_4);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "newLiteral", "(Ljava/lang/Object;I)Lorg/apache/openjpa/kernel/exps/Literal;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label70);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "trimDoubleQuotes", "(Ljava/lang/String;)Ljava/lang/String;", false);
methodVisitor.visitInsn(ICONST_4);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "newLiteral", "(Ljava/lang/Object;I)Lorg/apache/openjpa/kernel/exps/Literal;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label77);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "firstChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "eval", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/Object;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label75);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getParameter", "(Ljava/lang/String;ZZ)Lorg/apache/openjpa/kernel/exps/Parameter;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label76);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getParameter", "(Ljava/lang/String;ZZ)Lorg/apache/openjpa/kernel/exps/Parameter;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label74);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 8);
methodVisitor.visitVarInsn(ALOAD, 8);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 110);
Label label86 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label86);
methodVisitor.visitInsn(ICONST_1);
Label label87 = new Label();
methodVisitor.visitJumpInsn(GOTO, label87);
methodVisitor.visitLabel(label86);
methodVisitor.visitFrame(Opcodes.F_APPEND,3, new Object[] {Opcodes.TOP, Opcodes.TOP, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 0, null);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLabel(label87);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
methodVisitor.visitVarInsn(ISTORE, 9);
methodVisitor.visitVarInsn(ILOAD, 9);
Label label88 = new Label();
methodVisitor.visitJumpInsn(IFNE, label88);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 8);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 8);
methodVisitor.visitLabel(label88);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 8);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitVarInsn(ILOAD, 9);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getParameter", "(Ljava/lang/String;ZZ)Lorg/apache/openjpa/kernel/exps/Parameter;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label14);
methodVisitor.visitFrame(Opcodes.F_FULL, 6, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", Opcodes.INTEGER}, 0, new Object[] {});
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "left", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getExpression", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "right", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getExpression", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "or", "(Lorg/apache/openjpa/kernel/exps/Expression;Lorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label15);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "left", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getExpression", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "right", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getExpression", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "and", "(Lorg/apache/openjpa/kernel/exps/Expression;Lorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label27);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "left", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "right", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitTypes", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "equal", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label28);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "left", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "right", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitTypes", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "notEqual", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label31);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "left", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "right", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitTypes", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "lessThan", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label32);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "left", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "right", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitTypes", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "lessThanEqual", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label29);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "left", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "right", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitTypes", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "greaterThan", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label30);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "left", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "right", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitTypes", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "greaterThanEqual", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label33);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "left", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "right", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "TYPE_NUMBER", "Ljava/lang/Class;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitTypes", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "add", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label34);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "left", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "right", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "TYPE_NUMBER", "Ljava/lang/Class;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitTypes", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "subtract", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label35);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "left", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "right", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "TYPE_NUMBER", "Ljava/lang/Class;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitTypes", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "multiply", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label36);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "left", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "right", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "TYPE_NUMBER", "Ljava/lang/Class;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitTypes", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "divide", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label17);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitInsn(ICONST_3);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "child", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;II)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(ICONST_3);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "child", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;II)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitInsn(ICONST_3);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "child", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;II)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitTypes", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitTypes", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ILOAD, 5);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "greaterThanEqual", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "lessThanEqual", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "and", "(Lorg/apache/openjpa/kernel/exps/Expression;Lorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "evalNot", "(ZLorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label18);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitVarInsn(ASTORE, 10);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "iterator", "()Ljava/util/Iterator;", false);
methodVisitor.visitVarInsn(ASTORE, 11);
methodVisitor.visitVarInsn(ALOAD, 11);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode");
methodVisitor.visitVarInsn(ASTORE, 12);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 12);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
Label label89 = new Label();
methodVisitor.visitLabel(label89);
methodVisitor.visitFrame(Opcodes.F_FULL, 13, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", Opcodes.INTEGER, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, "org/apache/openjpa/kernel/exps/Expression", "java/util/Iterator", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 0, new Object[] {});
methodVisitor.visitVarInsn(ALOAD, 11);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true);
Label label90 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label90);
methodVisitor.visitVarInsn(ALOAD, 11);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode");
methodVisitor.visitVarInsn(ASTORE, 13);
methodVisitor.visitVarInsn(ALOAD, 12);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 63);
Label label91 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label91);
methodVisitor.visitVarInsn(ALOAD, 13);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 39);
methodVisitor.visitJumpInsn(IF_ICMPNE, label91);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 13);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getTypeLiteral", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
Label label92 = new Label();
methodVisitor.visitJumpInsn(GOTO, label92);
methodVisitor.visitLabel(label91);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 13);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitLabel(label92);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitTypeInsn(INSTANCEOF, "org/apache/openjpa/kernel/exps/Parameter");
Label label93 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label93);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "hasParameterizedInExpression", "Z");
methodVisitor.visitLabel(label93);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ILOAD, 5);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "useContains", "(ZLorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Z", false);
Label label94 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label94);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ILOAD, 5);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "contains", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "evalNot", "(ZLorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label94);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitTypes", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "isVerticalTypeInExpr", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Z", false);
Label label95 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label95);
methodVisitor.visitVarInsn(ILOAD, 5);
methodVisitor.visitJumpInsn(IFEQ, label95);
methodVisitor.visitVarInsn(ALOAD, 10);
Label label96 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label96);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "notEqual", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitVarInsn(ASTORE, 10);
Label label97 = new Label();
methodVisitor.visitJumpInsn(GOTO, label97);
methodVisitor.visitLabel(label96);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "notEqual", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "and", "(Lorg/apache/openjpa/kernel/exps/Expression;Lorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitVarInsn(ASTORE, 10);
methodVisitor.visitJumpInsn(GOTO, label97);
methodVisitor.visitLabel(label95);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 10);
Label label98 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label98);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "equal", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitVarInsn(ASTORE, 10);
methodVisitor.visitJumpInsn(GOTO, label97);
methodVisitor.visitLabel(label98);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "equal", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "or", "(Lorg/apache/openjpa/kernel/exps/Expression;Lorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitVarInsn(ASTORE, 10);
methodVisitor.visitLabel(label97);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitJumpInsn(GOTO, label89);
methodVisitor.visitLabel(label90);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "isVerticalTypeInExpr", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Z", false);
Label label99 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label99);
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label99);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ILOAD, 5);
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "evalNot", "(ZLorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "getNull", "()Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "notEqual", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "and", "(Lorg/apache/openjpa/kernel/exps/Expression;Lorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label21);
methodVisitor.visitFrame(Opcodes.F_FULL, 6, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", Opcodes.INTEGER}, 0, new Object[] {});
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "checkEmbeddable", "(Lorg/apache/openjpa/kernel/exps/Value;)V", false);
methodVisitor.visitVarInsn(ILOAD, 5);
Label label100 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label100);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "getNull", "()Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "notEqual", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label100);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "getNull", "()Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "equal", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getPathOrConstant", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label65);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getIdentifier", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label37);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getQualifiedPath", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Path;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label38);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getQualifiedIdentifier", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label39);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "parent", "Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "parent", "Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 29);
Label label101 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPEQ, label101);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "parent", "Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 30);
Label label102 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label102);
methodVisitor.visitLabel(label101);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getGeneralIdentifier", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;Z)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label102);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getQualifiedIdentifier", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label16);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getExpression", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "not", "(Lorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label20);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "left", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "right", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "TYPE_STRING", "Ljava/lang/Class;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitType", "(Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;)V", false);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "TYPE_STRING", "Ljava/lang/Class;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitType", "(Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;)V", false);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitVarInsn(ASTORE, 13);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "right", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitIntInsn(BIPUSH, 112);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "findChildByID", "(IZ)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 14);
methodVisitor.visitVarInsn(ALOAD, 14);
Label label103 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label103);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 14);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "trimQuotes", "(Ljava/lang/String;)Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ASTORE, 13);
methodVisitor.visitLabel(label103);
methodVisitor.visitFrame(Opcodes.F_FULL, 15, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", Opcodes.INTEGER, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, "java/lang/String", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 0, new Object[] {});
methodVisitor.visitVarInsn(ILOAD, 5);
Label label104 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label104);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitLdcInsn("_");
methodVisitor.visitLdcInsn("%");
methodVisitor.visitVarInsn(ALOAD, 13);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "notMatches", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label104);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitLdcInsn("_");
methodVisitor.visitLdcInsn("%");
methodVisitor.visitVarInsn(ALOAD, 13);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "matches", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label22);
methodVisitor.visitFrame(Opcodes.F_FULL, 6, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", Opcodes.INTEGER}, 0, new Object[] {});
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ILOAD, 5);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "isEmpty", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "evalNot", "(ZLorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label59);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "size", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label60);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "index", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label53);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "TYPE_STRING", "Ljava/lang/Class;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitType", "(Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "toUpperCase", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label52);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getStringValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "toLowerCase", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label54);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getStringValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "stringLength", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label56);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getNumberValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "abs", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label57);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getNumberValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "sqrt", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label58);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "left", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "right", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "TYPE_NUMBER", "Ljava/lang/Class;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitTypes", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "mod", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label51);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "lastChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "TYPE_STRING", "Ljava/lang/Class;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitType", "(Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;)V", false);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitVarInsn(ASTORE, 15);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "firstChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 16);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "getChildCount", "()I", false);
methodVisitor.visitInsn(ICONST_1);
Label label105 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPLE, label105);
methodVisitor.visitVarInsn(ALOAD, 16);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 78);
Label label106 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label106);
methodVisitor.visitFieldInsn(GETSTATIC, "java/lang/Boolean", "TRUE", "Ljava/lang/Boolean;");
Label label107 = new Label();
methodVisitor.visitJumpInsn(GOTO, label107);
methodVisitor.visitLabel(label106);
methodVisitor.visitFrame(Opcodes.F_FULL, 17, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", Opcodes.INTEGER, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, "java/lang/Boolean", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 0, new Object[] {});
methodVisitor.visitVarInsn(ALOAD, 16);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 79);
Label label108 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label108);
methodVisitor.visitFieldInsn(GETSTATIC, "java/lang/Boolean", "FALSE", "Ljava/lang/Boolean;");
methodVisitor.visitJumpInsn(GOTO, label107);
methodVisitor.visitLabel(label108);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitLabel(label107);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Boolean"});
methodVisitor.visitVarInsn(ASTORE, 15);
methodVisitor.visitLabel(label105);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "getChildCount", "()I", false);
methodVisitor.visitInsn(ICONST_3);
Label label109 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label109);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "secondChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 17);
Label label110 = new Label();
methodVisitor.visitJumpInsn(GOTO, label110);
methodVisitor.visitLabel(label109);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "getChildCount", "()I", false);
methodVisitor.visitInsn(ICONST_2);
Label label111 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label111);
methodVisitor.visitVarInsn(ALOAD, 16);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 78);
methodVisitor.visitJumpInsn(IF_ICMPEQ, label111);
methodVisitor.visitVarInsn(ALOAD, 16);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 79);
methodVisitor.visitJumpInsn(IF_ICMPEQ, label111);
methodVisitor.visitVarInsn(ALOAD, 16);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 80);
methodVisitor.visitJumpInsn(IF_ICMPEQ, label111);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "firstChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 17);
methodVisitor.visitJumpInsn(GOTO, label110);
methodVisitor.visitLabel(label111);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitLdcInsn(" ");
methodVisitor.visitInsn(ICONST_3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "newLiteral", "(Ljava/lang/Object;I)Lorg/apache/openjpa/kernel/exps/Literal;", true);
methodVisitor.visitVarInsn(ASTORE, 17);
methodVisitor.visitLabel(label110);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/kernel/exps/Value"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 17);
methodVisitor.visitVarInsn(ALOAD, 15);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "trim", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Boolean;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label49);
methodVisitor.visitFrame(Opcodes.F_FULL, 6, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", Opcodes.INTEGER}, 0, new Object[] {});
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitInsn(ARRAYLENGTH);
methodVisitor.visitInsn(ICONST_2);
Label label112 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPGE, label112);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("less-child-count");
methodVisitor.visitInsn(ICONST_3);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/util/Arrays", "asList", "([Ljava/lang/Object;)Ljava/util/List;", false);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label112);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "firstChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "secondChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "TYPE_STRING", "Ljava/lang/Class;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitType", "(Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;)V", false);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "TYPE_STRING", "Ljava/lang/Class;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitType", "(Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "concat", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitVarInsn(ASTORE, 18);
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitVarInsn(ISTORE, 19);
Label label113 = new Label();
methodVisitor.visitLabel(label113);
methodVisitor.visitFrame(Opcodes.F_FULL, 20, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", Opcodes.INTEGER, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, "org/apache/openjpa/kernel/exps/Value", Opcodes.INTEGER}, 0, new Object[] {});
methodVisitor.visitVarInsn(ILOAD, 19);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitInsn(ARRAYLENGTH);
Label label114 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPGE, label114);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitVarInsn(ILOAD, 19);
methodVisitor.visitInsn(AALOAD);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "TYPE_STRING", "Ljava/lang/Class;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitType", "(Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 18);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "concat", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitVarInsn(ASTORE, 18);
methodVisitor.visitIincInsn(19, 1);
methodVisitor.visitJumpInsn(GOTO, label113);
methodVisitor.visitLabel(label114);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 18);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label50);
methodVisitor.visitFrame(Opcodes.F_FULL, 6, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", Opcodes.INTEGER}, 0, new Object[] {});
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "firstChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "secondChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 19);
methodVisitor.visitVarInsn(ALOAD, 19);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 100);
Label label115 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label115);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 19);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getIntegerValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
Label label116 = new Label();
methodVisitor.visitJumpInsn(GOTO, label116);
methodVisitor.visitLabel(label115);
methodVisitor.visitFrame(Opcodes.F_FULL, 20, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", Opcodes.INTEGER, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 0, new Object[] {});
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 19);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitLabel(label116);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "getChildCount", "()I", false);
methodVisitor.visitInsn(ICONST_3);
Label label117 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label117);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "thirdChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 20);
methodVisitor.visitVarInsn(ALOAD, 20);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 100);
Label label118 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label118);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 20);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getIntegerValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitJumpInsn(GOTO, label117);
methodVisitor.visitLabel(label118);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 20);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitLabel(label117);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "TYPE_STRING", "Ljava/lang/Class;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitType", "(Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;)V", false);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitFieldInsn(GETSTATIC, "java/lang/Integer", "TYPE", "Ljava/lang/Class;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitType", "(Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;)V", false);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitInsn(ARRAYLENGTH);
methodVisitor.visitInsn(ICONST_3);
Label label119 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label119);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitFieldInsn(GETSTATIC, "java/lang/Integer", "TYPE", "Ljava/lang/Class;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitType", "(Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;)V", false);
methodVisitor.visitLabel(label119);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "convertSubstringArguments", "(Lorg/apache/openjpa/kernel/exps/ExpressionFactory;Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label55);
methodVisitor.visitFrame(Opcodes.F_FULL, 6, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", Opcodes.INTEGER}, 0, new Object[] {});
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "firstChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 20);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "secondChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 21);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitVarInsn(ASTORE, 22);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "getChildCount", "()I", false);
methodVisitor.visitInsn(ICONST_2);
Label label120 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPLE, label120);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "thirdChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 23);
methodVisitor.visitVarInsn(ALOAD, 23);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 100);
Label label121 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label121);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 23);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getIntegerValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 22);
methodVisitor.visitJumpInsn(GOTO, label120);
methodVisitor.visitLabel(label121);
methodVisitor.visitFrame(Opcodes.F_FULL, 24, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", Opcodes.INTEGER, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 0, new Object[] {});
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 23);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 22);
methodVisitor.visitLabel(label120);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 20);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "TYPE_STRING", "Ljava/lang/Class;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitType", "(Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;)V", false);
methodVisitor.visitVarInsn(ALOAD, 21);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "TYPE_STRING", "Ljava/lang/Class;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitType", "(Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;)V", false);
methodVisitor.visitVarInsn(ALOAD, 22);
Label label122 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label122);
methodVisitor.visitVarInsn(ALOAD, 22);
methodVisitor.visitFieldInsn(GETSTATIC, "java/lang/Integer", "TYPE", "Ljava/lang/Class;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitType", "(Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;)V", false);
methodVisitor.visitLabel(label122);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 21);
methodVisitor.visitVarInsn(ALOAD, 22);
Label label123 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label123);
methodVisitor.visitVarInsn(ALOAD, 20);
Label label124 = new Label();
methodVisitor.visitJumpInsn(GOTO, label124);
methodVisitor.visitLabel(label123);
methodVisitor.visitFrame(Opcodes.F_FULL, 23, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", Opcodes.INTEGER, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value"}, 2, new Object[] {"org/apache/openjpa/kernel/exps/ExpressionFactory", "org/apache/openjpa/kernel/exps/Value"});
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 20);
methodVisitor.visitVarInsn(ALOAD, 22);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "newArgumentList", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Arguments;", true);
methodVisitor.visitLabel(label124);
methodVisitor.visitFrame(Opcodes.F_FULL, 23, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", Opcodes.INTEGER, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value"}, 3, new Object[] {"org/apache/openjpa/kernel/exps/ExpressionFactory", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value"});
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "indexOf", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_FULL, 6, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", Opcodes.INTEGER}, 0, new Object[] {});
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "eval", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/Object;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label6);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "lastChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 23);
methodVisitor.visitVarInsn(ALOAD, 23);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 98);
Label label125 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label125);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getPath", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;ZZ)Lorg/apache/openjpa/kernel/exps/Path;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "count", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label125);
methodVisitor.visitFrame(Opcodes.F_FULL, 24, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", Opcodes.INTEGER, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 0, new Object[] {});
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 23);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "count", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label8);
methodVisitor.visitFrame(Opcodes.F_FULL, 6, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/kernel/exps/Value", Opcodes.INTEGER}, 0, new Object[] {});
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getNumberValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "max", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label9);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getNumberValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "min", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label10);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getNumberValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "sum", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label7);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getNumberValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "avg", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "distinct", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label24);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "eval", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/Object;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Value");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "isNotEmpty", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label25);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "eval", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/Object;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Value");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "any", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label26);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "eval", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/Object;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Value");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "all", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label13);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getSubquery", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label23);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "left", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;I)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "right", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;I)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "checkEmbeddable", "(Lorg/apache/openjpa/kernel/exps/Value;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitContainsTypes", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;I)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ILOAD, 5);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "contains", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "evalNot", "(ZLorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label61);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitLdcInsn(Type.getType("Ljava/util/Date;"));
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "getCurrentDate", "(Ljava/lang/Class;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label62);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitLdcInsn(Type.getType("Ljava/sql/Time;"));
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "getCurrentTime", "(Ljava/lang/Class;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label63);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitLdcInsn(Type.getType("Ljava/sql/Timestamp;"));
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "getCurrentTimestamp", "(Ljava/lang/Class;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitLdcInsn("SELECT");
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "assertQueryExtensions", "(Ljava/lang/String;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "eval", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/Object;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label12);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitLdcInsn("GROUP BY");
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "assertQueryExtensions", "(Ljava/lang/String;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "eval", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/Object;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label64);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitLdcInsn("ORDER BY");
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "assertQueryExtensions", "(Ljava/lang/String;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "eval", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/Object;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label71);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitIntInsn(BIPUSH, 8);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "newLiteral", "(Ljava/lang/Object;I)Lorg/apache/openjpa/kernel/exps/Literal;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label72);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitIntInsn(BIPUSH, 9);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "newLiteral", "(Ljava/lang/Object;I)Lorg/apache/openjpa/kernel/exps/Literal;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label73);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitIntInsn(BIPUSH, 10);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "newLiteral", "(Ljava/lang/Object;I)Lorg/apache/openjpa/kernel/exps/Literal;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitLdcInsn("bad-tree");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitMaxs(7, 24);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "useContains", "(ZLorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Z", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "isVerticalTypeInExpr", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Z", false);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label0);
methodVisitor.visitVarInsn(ILOAD, 1);
methodVisitor.visitJumpInsn(IFEQ, label0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitTypeInsn(INSTANCEOF, "org/apache/openjpa/kernel/exps/Literal");
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFNE, label1);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "getChildCount", "()I", false);
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitJumpInsn(IF_ICMPNE, label1);
methodVisitor.visitInsn(ICONST_1);
Label label2 = new Label();
methodVisitor.visitJumpInsn(GOTO, label2);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitMaxs(3, 5);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "isVerticalTypeInExpr", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Z", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 38);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPEQ, label0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "isVerticalType", "(Lorg/apache/openjpa/kernel/exps/Value;)Z", true);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitMaxs(2, 3);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "getIntegerValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitTypeInsn(NEW, "java/math/BigDecimal");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitLdcInsn("l");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "endsWith", "(Ljava/lang/String;)Z", false);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFNE, label1);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitLdcInsn("L");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "endsWith", "(Ljava/lang/String;)Z", false);
Label label2 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label2);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_FULL, 2, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 2, new Object[] {label0, label0});
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I", false);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(ISUB);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "substring", "(II)Ljava/lang/String;", false);
Label label3 = new Label();
methodVisitor.visitJumpInsn(GOTO, label3);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_FULL, 2, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 2, new Object[] {label0, label0});
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_FULL, 2, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 3, new Object[] {label0, label0, "java/lang/String"});
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/math/BigDecimal", "<init>", "(Ljava/lang/String;)V", false);
methodVisitor.visitTypeInsn(NEW, "java/math/BigDecimal");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "negative", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)S", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/math/BigDecimal", "<init>", "(I)V", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/math/BigDecimal", "multiply", "(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/math/BigDecimal", "intValue", "()I", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "newLiteral", "(Ljava/lang/Object;I)Lorg/apache/openjpa/kernel/exps/Literal;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(6, 3);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, "convertSubstringArguments", "(Lorg/apache/openjpa/kernel/exps/ExpressionFactory;Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 3);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "newArgumentList", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Arguments;", true);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "substring", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "substring", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(5, 4);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "assertQueryExtensions", "(Ljava/lang/String;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "resolver", "Lorg/apache/openjpa/kernel/exps/Resolver;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Resolver", "getConfiguration", "()Lorg/apache/openjpa/conf/OpenJPAConfiguration;", true);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/conf/OpenJPAConfiguration", "getCompatibilityInstance", "()Lorg/apache/openjpa/conf/Compatibility;", true);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/conf/Compatibility", "getJPQL", "()I", false);
Label label0 = new Label();
Label label1 = new Label();
Label label2 = new Label();
Label label3 = new Label();
methodVisitor.visitTableSwitchInsn(0, 2, label3, new Label[] { label0, label1, label2 });
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/conf/OpenJPAConfiguration"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "resolver", "Lorg/apache/openjpa/kernel/exps/Resolver;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Resolver", "getQueryContext", "()Lorg/apache/openjpa/kernel/QueryContext;", true);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/QueryContext", "getStoreContext", "()Lorg/apache/openjpa/kernel/StoreContext;", true);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "currentQuery", "()Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/StoreContext", "getBroker", "()Lorg/apache/openjpa/kernel/Broker;", true);
Label label4 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label4);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitJumpInsn(IFNULL, label4);
methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getName", "()Ljava/lang/String;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitLdcInsn(":");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/StoreContext", "getBroker", "()Lorg/apache/openjpa/kernel/Broker;", true);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/Broker", "getBrokerFactory", "()Lorg/apache/openjpa/kernel/BrokerFactory;", true);
methodVisitor.visitVarInsn(ASTORE, 6);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/BrokerFactory", "getUserObject", "(Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitVarInsn(ALOAD, 7);
Label label5 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label5);
Label label6 = new Label();
methodVisitor.visitJumpInsn(GOTO, label6);
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_FULL, 8, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "java/lang/String", "org/apache/openjpa/conf/OpenJPAConfiguration", "org/apache/openjpa/kernel/StoreContext", "java/lang/String", "java/lang/String", "org/apache/openjpa/kernel/BrokerFactory", "java/lang/Object"}, 0, new Object[] {});
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitFieldInsn(GETSTATIC, "java/lang/Boolean", "TRUE", "Ljava/lang/Boolean;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/BrokerFactory", "putUserObject", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_CHOP,3, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitLdcInsn("openjpa.Query");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/conf/OpenJPAConfiguration", "getLog", "(Ljava/lang/String;)Lorg/apache/openjpa/lib/log/Log;", true);
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/lib/log/Log", "isWarnEnabled", "()Z", true);
methodVisitor.visitJumpInsn(IFEQ, label6);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "_loc", "Lorg/apache/openjpa/lib/util/Localizer;");
methodVisitor.visitLdcInsn("query-extensions-warning");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "currentQuery", "()Ljava/lang/String;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/util/Localizer", "get", "(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)Lorg/apache/openjpa/lib/util/Localizer$Message;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/lib/log/Log", "warn", "(Ljava/lang/Object;)V", true);
methodVisitor.visitJumpInsn(GOTO, label6);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
methodVisitor.visitTypeInsn(NEW, "org/apache/openjpa/kernel/jpql/ParseException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "_loc", "Lorg/apache/openjpa/lib/util/Localizer;");
methodVisitor.visitLdcInsn("query-extensions-error");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "currentQuery", "()Ljava/lang/String;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/util/Localizer", "get", "(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)Lorg/apache/openjpa/lib/util/Localizer$Message;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/util/Localizer$Message", "getMessage", "()Ljava/lang/String;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/ParseException", "<init>", "(Ljava/lang/String;)V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitJumpInsn(GOTO, label6);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalStateException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
methodVisitor.visitLdcInsn("Compatibility.getJPQL() == ");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/conf/OpenJPAConfiguration", "getCompatibilityInstance", "()Lorg/apache/openjpa/conf/Compatibility;", true);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/conf/Compatibility", "getJPQL", "()I", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(I)Ljava/lang/StringBuilder;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalStateException", "<init>", "(Ljava/lang/String;)V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label6);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(6, 8);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "setImplicitTypes", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;)V", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class<*>;)V", null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "currentQuery", "()Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "resolver", "Lorg/apache/openjpa/kernel/exps/Resolver;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parameterTypes", "Lorg/apache/openjpa/lib/util/OrderedMap;");
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitTypes", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;Lorg/apache/openjpa/kernel/exps/Resolver;Lorg/apache/openjpa/lib/util/OrderedMap;Ljava/lang/String;)V", false);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(6, 5);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, "setImplicitTypes", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;Lorg/apache/openjpa/kernel/exps/Resolver;Lorg/apache/openjpa/lib/util/OrderedMap;Ljava/lang/String;)V", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class<*>;Lorg/apache/openjpa/kernel/exps/Resolver;Lorg/apache/openjpa/lib/util/OrderedMap<Ljava/lang/Object;Ljava/lang/Class<*>;>;Ljava/lang/String;)V", null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/exps/AbstractExpressionBuilder", "setImplicitTypes", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;Lorg/apache/openjpa/kernel/exps/Resolver;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(INSTANCEOF, "org/apache/openjpa/kernel/exps/Parameter");
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Parameter");
Label label1 = new Label();
methodVisitor.visitJumpInsn(GOTO, label1);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitTypeInsn(INSTANCEOF, "org/apache/openjpa/kernel/exps/Parameter");
Label label2 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label2);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Parameter");
methodVisitor.visitJumpInsn(GOTO, label1);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"org/apache/openjpa/kernel/exps/Parameter"});
methodVisitor.visitVarInsn(ASTORE, 6);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(INSTANCEOF, "org/apache/openjpa/kernel/exps/Path");
Label label3 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Path");
Label label4 = new Label();
methodVisitor.visitJumpInsn(GOTO, label4);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/kernel/exps/Parameter"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitTypeInsn(INSTANCEOF, "org/apache/openjpa/kernel/exps/Path");
Label label5 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label5);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Path");
methodVisitor.visitJumpInsn(GOTO, label4);
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"org/apache/openjpa/kernel/exps/Path"});
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitVarInsn(ALOAD, 6);
Label label6 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label6);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitJumpInsn(IFNULL, label6);
methodVisitor.visitVarInsn(ALOAD, 4);
Label label7 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label7);
methodVisitor.visitLabel(label6);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/kernel/exps/Path"}, 0, null);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitLabel(label7);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Path", "last", "()Lorg/apache/openjpa/meta/FieldMetaData;", true);
methodVisitor.visitVarInsn(ASTORE, 8);
methodVisitor.visitVarInsn(ALOAD, 8);
Label label8 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label8);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitLabel(label8);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/meta/FieldMetaData"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 2);
Label label9 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label9);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "checkEmbeddable", "(Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/String;)V", false);
methodVisitor.visitLabel(label9);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Path", "getType", "()Ljava/lang/Class;", true);
methodVisitor.visitVarInsn(ASTORE, 9);
methodVisitor.visitVarInsn(ALOAD, 9);
Label label10 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label10);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitLabel(label10);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/Class"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Parameter", "getParameterKey", "()Ljava/lang/Object;", true);
methodVisitor.visitVarInsn(ASTORE, 10);
methodVisitor.visitVarInsn(ALOAD, 10);
Label label11 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label11);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitLabel(label11);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/Object"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/util/OrderedMap", "containsKey", "(Ljava/lang/Object;)Z", false);
Label label12 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label12);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitVarInsn(ALOAD, 9);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/util/OrderedMap", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitLabel(label12);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(4, 11);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "getStringValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "TYPE_STRING", "Ljava/lang/Class;");
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getTypeValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;Ljava/lang/Class;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(3, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "getNumberValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "TYPE_NUMBER", "Ljava/lang/Class;");
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getTypeValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;Ljava/lang/Class;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(3, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "getTypeValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;Ljava/lang/Class;)Lorg/apache/openjpa/kernel/exps/Value;", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;Ljava/lang/Class<*>;)Lorg/apache/openjpa/kernel/exps/Value;", null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "setImplicitType", "(Lorg/apache/openjpa/kernel/exps/Value;Ljava/lang/Class;)V", false);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(2, 4);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "getSubquery", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
Label label1 = new Label();
Label label2 = new Label();
methodVisitor.visitTryCatchBlock(label0, label1, label2, null);
Label label3 = new Label();
methodVisitor.visitTryCatchBlock(label2, label3, label2, null);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitVarInsn(ISTORE, 2);
methodVisitor.visitTypeInsn(NEW, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$ParsedJPQL");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "parser", "Lorg/apache/openjpa/kernel/jpql/JPQL;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQL", "jpql", "Ljava/lang/String;");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$ParsedJPQL", "<init>", "(Ljava/lang/String;Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)V", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitTypeInsn(NEW, "org/apache/openjpa/kernel/exps/Context");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/exps/Context", "<init>", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$ParsedJPQL;Lorg/apache/openjpa/kernel/exps/Subquery;Lorg/apache/openjpa/kernel/exps/Context;)V", false);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "contexts", "Ljava/util/Stack;");
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/Stack", "push", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getCandidateMetaData", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/meta/ClassMetaData;", false);
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/exps/Context", "getSubquery", "()Lorg/apache/openjpa/kernel/exps/Subquery;", false);
methodVisitor.visitVarInsn(ASTORE, 6);
methodVisitor.visitVarInsn(ALOAD, 6);
Label label4 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label4);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "nextAlias", "()Ljava/lang/String;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "newSubquery", "(Lorg/apache/openjpa/meta/ClassMetaData;ZLjava/lang/String;)Lorg/apache/openjpa/kernel/exps/Subquery;", true);
methodVisitor.visitVarInsn(ASTORE, 6);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/exps/Context", "setSubquery", "(Lorg/apache/openjpa/kernel/exps/Subquery;)V", false);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_FULL, 7, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", Opcodes.INTEGER, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$ParsedJPQL", "org/apache/openjpa/kernel/exps/Context", "org/apache/openjpa/meta/ClassMetaData", "org/apache/openjpa/kernel/exps/Subquery"}, 0, new Object[] {});
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Subquery", "setMetaData", "(Lorg/apache/openjpa/meta/ClassMetaData;)V", true);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "getChild", "(I)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "evalFromClause", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;Z)Lorg/apache/openjpa/kernel/exps/Expression;", false);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/exps/Context", "from", "Lorg/apache/openjpa/kernel/exps/Expression;");
methodVisitor.visitLabel(label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getQueryExpressions", "()Lorg/apache/openjpa/kernel/exps/QueryExpressions;", false);
methodVisitor.visitVarInsn(ASTORE, 8);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitVarInsn(ALOAD, 8);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Subquery", "setQueryExpressions", "(Lorg/apache/openjpa/kernel/exps/QueryExpressions;)V", true);
methodVisitor.visitVarInsn(ALOAD, 8);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "projections", "[Lorg/apache/openjpa/kernel/exps/Value;");
methodVisitor.visitInsn(ARRAYLENGTH);
Label label5 = new Label();
methodVisitor.visitJumpInsn(IFLE, label5);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 8);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/QueryExpressions", "projections", "[Lorg/apache/openjpa/kernel/exps/Value;");
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitInsn(AALOAD);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "checkEmbeddable", "(Lorg/apache/openjpa/kernel/exps/Value;)V", false);
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/QueryExpressions"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitVarInsn(ASTORE, 9);
methodVisitor.visitLabel(label1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "contexts", "Ljava/util/Stack;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/Stack", "pop", "()Ljava/lang/Object;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 9);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_FULL, 8, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", Opcodes.INTEGER, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$ParsedJPQL", "org/apache/openjpa/kernel/exps/Context", "org/apache/openjpa/meta/ClassMetaData", "org/apache/openjpa/kernel/exps/Subquery", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 1, new Object[] {"java/lang/Throwable"});
methodVisitor.visitVarInsn(ASTORE, 10);
methodVisitor.visitLabel(label3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "contexts", "Ljava/util/Stack;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/Stack", "pop", "()Ljava/lang/Object;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitMaxs(5, 11);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "getParameter", "(Ljava/lang/String;ZZ)Lorg/apache/openjpa/kernel/exps/Parameter;", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
Label label1 = new Label();
Label label2 = new Label();
methodVisitor.visitTryCatchBlock(label0, label1, label2, "java/lang/NumberFormatException");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parameterTypes", "Lorg/apache/openjpa/lib/util/OrderedMap;");
Label label3 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "org/apache/openjpa/lib/util/OrderedMap");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/lib/util/OrderedMap", "<init>", "()V", false);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parameterTypes", "Lorg/apache/openjpa/lib/util/OrderedMap;");
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ILOAD, 2);
Label label4 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label4);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "parseInt", "(Ljava/lang/String;)I", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
Label label5 = new Label();
methodVisitor.visitJumpInsn(GOTO, label5);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Object"});
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parameterTypes", "Lorg/apache/openjpa/lib/util/OrderedMap;");
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/util/OrderedMap", "containsKey", "(Ljava/lang/Object;)Z", false);
Label label6 = new Label();
methodVisitor.visitJumpInsn(IFNE, label6);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parameterTypes", "Lorg/apache/openjpa/lib/util/OrderedMap;");
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "TYPE_OBJECT", "Ljava/lang/Class;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/util/OrderedMap", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitLabel(label6);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/Object"}, 0, null);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitVarInsn(ILOAD, 2);
Label label7 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label7);
methodVisitor.visitLabel(label0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "parseInt", "(Ljava/lang/String;)I", false);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(ISUB);
methodVisitor.visitVarInsn(ISTORE, 6);
methodVisitor.visitLabel(label1);
Label label8 = new Label();
methodVisitor.visitJumpInsn(GOTO, label8);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_FULL, 6, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "java/lang/String", Opcodes.INTEGER, Opcodes.INTEGER, "java/lang/Object", "org/apache/openjpa/meta/ClassMetaData"}, 1, new Object[] {"java/lang/NumberFormatException"});
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("bad-positional-parameter");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label8);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
methodVisitor.visitVarInsn(ILOAD, 6);
Label label9 = new Label();
methodVisitor.visitJumpInsn(IFGE, label9);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("bad-positional-parameter");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label7);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parameterTypes", "Lorg/apache/openjpa/lib/util/OrderedMap;");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/util/OrderedMap", "indexOf", "(Ljava/lang/Object;)I", false);
methodVisitor.visitVarInsn(ISTORE, 6);
methodVisitor.visitLabel(label9);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
methodVisitor.visitVarInsn(ILOAD, 3);
Label label10 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label10);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "TYPE_OBJECT", "Ljava/lang/Class;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "newCollectionValuedParameter", "(Ljava/lang/Object;Ljava/lang/Class;)Lorg/apache/openjpa/kernel/exps/Parameter;", true);
Label label11 = new Label();
methodVisitor.visitJumpInsn(GOTO, label11);
methodVisitor.visitLabel(label10);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "TYPE_OBJECT", "Ljava/lang/Class;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "newParameter", "(Ljava/lang/Object;Ljava/lang/Class;)Lorg/apache/openjpa/kernel/exps/Parameter;", true);
methodVisitor.visitLabel(label11);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"org/apache/openjpa/kernel/exps/Parameter"});
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Parameter", "setMetaData", "(Lorg/apache/openjpa/meta/ClassMetaData;)V", true);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitVarInsn(ILOAD, 6);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Parameter", "setIndex", "(I)V", true);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(7, 8);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "evalNot", "(ZLorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ILOAD, 1);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "not", "(Lorg/apache/openjpa/kernel/exps/Expression;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
Label label1 = new Label();
methodVisitor.visitJumpInsn(GOTO, label1);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"org/apache/openjpa/kernel/exps/Expression"});
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(2, 3);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "trimQuotes", "(Ljava/lang/String;)Ljava/lang/String;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 1);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I", false);
methodVisitor.visitInsn(ICONST_1);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPGT, label1);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitLdcInsn("'");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "startsWith", "(Ljava/lang/String;)Z", false);
Label label2 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label2);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitLdcInsn("'");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "endsWith", "(Ljava/lang/String;)Z", false);
methodVisitor.visitJumpInsn(IFEQ, label2);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I", false);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(ISUB);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "substring", "(II)Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ASTORE, 1);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(ICONST_M1);
methodVisitor.visitVarInsn(ISTORE, 2);
Label label3 = new Label();
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitLdcInsn("''");
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(IADD);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "indexOf", "(Ljava/lang/String;I)I", false);
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ISTORE, 2);
methodVisitor.visitInsn(ICONST_M1);
Label label4 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPEQ, label4);
methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(IADD);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "substring", "(II)Ljava/lang/String;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitInsn(IADD);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "substring", "(I)Ljava/lang/String;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ASTORE, 1);
methodVisitor.visitJumpInsn(GOTO, label3);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(5, 3);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "trimDoubleQuotes", "(Ljava/lang/String;)Ljava/lang/String;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 1);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I", false);
methodVisitor.visitInsn(ICONST_1);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPGT, label1);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitLdcInsn("\"");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "startsWith", "(Ljava/lang/String;)Z", false);
Label label2 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label2);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitLdcInsn("\"");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "endsWith", "(Ljava/lang/String;)Z", false);
methodVisitor.visitJumpInsn(IFEQ, label2);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I", false);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(ISUB);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "substring", "(II)Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ASTORE, 1);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(4, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "negative", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)S", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitInsn(ARRAYLENGTH);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitJumpInsn(IF_ICMPNE, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "firstChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 72);
methodVisitor.visitJumpInsn(IF_ICMPNE, label0);
methodVisitor.visitInsn(ICONST_M1);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitMaxs(2, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "getIdentifier", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getVariable", "(Ljava/lang/String;Z)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getMetaDataForAlias", "(Ljava/lang/String;)Lorg/apache/openjpa/meta/ClassMetaData;", false);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 4);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label0);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/Context", "subquery", "Lorg/apache/openjpa/kernel/exps/Subquery;");
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "toLowerCase", "()Ljava/lang/String;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/exps/Context", "getSchema", "(Ljava/lang/String;)Lorg/apache/openjpa/meta/ClassMetaData;", false);
Label label2 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label2);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_FULL, 6, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "java/lang/String", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/meta/ClassMetaData", "org/apache/openjpa/kernel/exps/Value"}, 0, new Object[] {});
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/Context", "subquery", "Lorg/apache/openjpa/kernel/exps/Subquery;");
Label label3 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "inAssignSubselectProjection", "Z");
methodVisitor.visitJumpInsn(IFEQ, label3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/Context", "subquery", "Lorg/apache/openjpa/kernel/exps/Subquery;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "newPath", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Path;", true);
methodVisitor.visitVarInsn(ASTORE, 5);
Label label4 = new Label();
methodVisitor.visitJumpInsn(GOTO, label4);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "getThis", "()Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitJumpInsn(GOTO, label4);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/Context", "subquery", "Lorg/apache/openjpa/kernel/exps/Subquery;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "newPath", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Path;", true);
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Path");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Path", "setSchemaAlias", "(Ljava/lang/String;)V", true);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Value", "setMetaData", "(Lorg/apache/openjpa/meta/ClassMetaData;)V", true);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitTypeInsn(INSTANCEOF, "org/apache/openjpa/kernel/exps/Path");
Label label5 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label5);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitTypeInsn(INSTANCEOF, "org/apache/openjpa/kernel/exps/Value");
Label label6 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label6);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Value", "isVariable", "()Z", true);
Label label7 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label7);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "resolver", "Lorg/apache/openjpa/kernel/exps/Resolver;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Resolver", "classForName", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Class;", true);
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitJumpInsn(IFNULL, label7);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitInsn(ICONST_5);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "newTypeLiteral", "(Ljava/lang/Object;I)Lorg/apache/openjpa/kernel/exps/Literal;", true);
methodVisitor.visitVarInsn(ASTORE, 6);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getCandidateType", "()Ljava/lang/Class;", false);
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getName", "()Ljava/lang/String;", false);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getClassMetaData", "(Ljava/lang/String;Z)Lorg/apache/openjpa/meta/ClassMetaData;", false);
methodVisitor.visitVarInsn(ASTORE, 8);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getClassMetaData", "(Ljava/lang/String;Z)Lorg/apache/openjpa/meta/ClassMetaData;", false);
methodVisitor.visitVarInsn(ASTORE, 9);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "isAssignableFrom", "(Ljava/lang/Class;)Z", false);
Label label8 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label8);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitVarInsn(ALOAD, 9);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Value", "setMetaData", "(Lorg/apache/openjpa/meta/ClassMetaData;)V", true);
Label label9 = new Label();
methodVisitor.visitJumpInsn(GOTO, label9);
methodVisitor.visitLabel(label8);
methodVisitor.visitFrame(Opcodes.F_FULL, 10, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "java/lang/String", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/meta/ClassMetaData", "java/lang/Class", "org/apache/openjpa/kernel/exps/Value", "java/lang/Class", "org/apache/openjpa/meta/ClassMetaData", "org/apache/openjpa/meta/ClassMetaData"}, 0, new Object[] {});
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitVarInsn(ALOAD, 8);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Value", "setMetaData", "(Lorg/apache/openjpa/meta/ClassMetaData;)V", true);
methodVisitor.visitLabel(label9);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label7);
methodVisitor.visitFrame(Opcodes.F_FULL, 5, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "java/lang/String", "org/apache/openjpa/kernel/exps/Value", "org/apache/openjpa/meta/ClassMetaData"}, 0, new Object[] {});
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label6);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("unknown-identifier");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitMaxs(7, 10);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "validateMapPath", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Path;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Path");
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Path", "last", "()Lorg/apache/openjpa/meta/FieldMetaData;", true);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 4);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/Context", "subquery", "Lorg/apache/openjpa/kernel/exps/Subquery;");
methodVisitor.visitJumpInsn(IFNULL, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getVariable", "(Ljava/lang/String;Z)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitJumpInsn(IFNULL, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "newPath", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Path;", true);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Path", "last", "()Lorg/apache/openjpa/meta/FieldMetaData;", true);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"org/apache/openjpa/kernel/exps/Path", "org/apache/openjpa/meta/FieldMetaData"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 4);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label1);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/FieldMetaData", "getDeclaredTypeCode", "()I", false);
methodVisitor.visitIntInsn(BIPUSH, 13);
Label label2 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPEQ, label2);
methodVisitor.visitLdcInsn("VALUE");
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 61);
Label label3 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label3);
methodVisitor.visitLdcInsn("ENTRY");
methodVisitor.visitVarInsn(ASTORE, 5);
Label label4 = new Label();
methodVisitor.visitJumpInsn(GOTO, label4);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/String"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 58);
methodVisitor.visitJumpInsn(IF_ICMPNE, label4);
methodVisitor.visitLdcInsn("KEY");
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("bad-qualified-identifier");
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("unknown-type");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(7, 6);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "getGeneralIdentifier", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;Z)Lorg/apache/openjpa/kernel/exps/Value;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "validateMapPath", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Path;", false);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 58);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "getKey", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Path");
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Path"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Path", "last", "()Lorg/apache/openjpa/meta/FieldMetaData;", true);
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/FieldMetaData", "getKey", "()Lorg/apache/openjpa/meta/ValueMetaData;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/meta/ValueMetaData", "getTypeMetaData", "()Lorg/apache/openjpa/meta/ClassMetaData;", true);
methodVisitor.visitVarInsn(ASTORE, 6);
methodVisitor.visitVarInsn(ILOAD, 2);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label1);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 58);
methodVisitor.visitJumpInsn(IF_ICMPNE, label1);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitJumpInsn(IFNULL, label1);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/FieldMetaData", "getKey", "()Lorg/apache/openjpa/meta/ValueMetaData;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/meta/ValueMetaData", "isEmbedded", "()Z", true);
Label label2 = new Label();
methodVisitor.visitJumpInsn(IFNE, label2);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"org/apache/openjpa/meta/FieldMetaData", "org/apache/openjpa/meta/ClassMetaData"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 60);
Label label3 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label3);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/FieldMetaData", "isElementCollection", "()Z", false);
methodVisitor.visitJumpInsn(IFEQ, label3);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/FieldMetaData", "getElement", "()Lorg/apache/openjpa/meta/ValueMetaData;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/meta/ValueMetaData", "getEmbeddedMetaData", "()Lorg/apache/openjpa/meta/ClassMetaData;", true);
methodVisitor.visitJumpInsn(IFNULL, label3);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "parent", "Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "parent", "Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 30);
Label label4 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label4);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("cant-groupby-key-value-embeddable");
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 60);
Label label5 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label5);
methodVisitor.visitLdcInsn("VALUE");
Label label6 = new Label();
methodVisitor.visitJumpInsn(GOTO, label6);
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_FULL, 7, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", Opcodes.INTEGER, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Path", "org/apache/openjpa/meta/FieldMetaData", "org/apache/openjpa/meta/ClassMetaData"}, 6, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", Opcodes.INTEGER, "java/lang/String", "[Ljava/lang/Object;", "[Ljava/lang/Object;", Opcodes.INTEGER});
methodVisitor.visitLdcInsn("KEY");
methodVisitor.visitLabel(label6);
methodVisitor.visitFrame(Opcodes.F_FULL, 7, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", Opcodes.INTEGER, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Path", "org/apache/openjpa/meta/FieldMetaData", "org/apache/openjpa/meta/ClassMetaData"}, 7, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", Opcodes.INTEGER, "java/lang/String", "[Ljava/lang/Object;", "[Ljava/lang/Object;", Opcodes.INTEGER, "java/lang/Object"});
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("bad-general-identifier");
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 60);
Label label7 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label7);
methodVisitor.visitLdcInsn("VALUE");
Label label8 = new Label();
methodVisitor.visitJumpInsn(GOTO, label8);
methodVisitor.visitLabel(label7);
methodVisitor.visitFrame(Opcodes.F_FULL, 7, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", Opcodes.INTEGER, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Path", "org/apache/openjpa/meta/FieldMetaData", "org/apache/openjpa/meta/ClassMetaData"}, 6, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", Opcodes.INTEGER, "java/lang/String", "[Ljava/lang/Object;", "[Ljava/lang/Object;", Opcodes.INTEGER});
methodVisitor.visitLdcInsn("KEY");
methodVisitor.visitLabel(label8);
methodVisitor.visitFrame(Opcodes.F_FULL, 7, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", Opcodes.INTEGER, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Path", "org/apache/openjpa/meta/FieldMetaData", "org/apache/openjpa/meta/ClassMetaData"}, 7, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", Opcodes.INTEGER, "java/lang/String", "[Ljava/lang/Object;", "[Ljava/lang/Object;", Opcodes.INTEGER, "java/lang/Object"});
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(8, 7);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "getQualifiedIdentifier", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "validateMapPath", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Path;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 60);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label0);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Path"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 58);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "mapKey", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/kernel/exps/Value"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "mapEntry", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(3, 5);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "getQualifiedPath", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Path;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getQualifiedPath", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;ZZ)Lorg/apache/openjpa/kernel/exps/Path;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(4, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "getQualifiedPath", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;ZZ)Lorg/apache/openjpa/kernel/exps/Path;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "getChildCount", "()I", false);
methodVisitor.visitVarInsn(ISTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "firstChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 58);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
Label label1 = new Label();
methodVisitor.visitJumpInsn(GOTO, label1);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {Opcodes.INTEGER, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"});
methodVisitor.visitVarInsn(ASTORE, 6);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "validateMapPath", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Path;", false);
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 98);
Label label2 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getPath", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Path;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "org/apache/openjpa/kernel/exps/Path"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Path", "last", "()Lorg/apache/openjpa/meta/FieldMetaData;", true);
methodVisitor.visitVarInsn(ASTORE, 8);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "getKey", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Path");
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitVarInsn(ALOAD, 8);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/FieldMetaData", "getKey", "()Lorg/apache/openjpa/meta/ValueMetaData;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/meta/ValueMetaData", "getTypeMetaData", "()Lorg/apache/openjpa/meta/ClassMetaData;", true);
methodVisitor.visitVarInsn(ASTORE, 9);
methodVisitor.visitVarInsn(ALOAD, 9);
Label label3 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("bad-qualified-path");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"org/apache/openjpa/meta/FieldMetaData", "org/apache/openjpa/meta/ClassMetaData"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitVarInsn(ALOAD, 9);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Path", "setMetaData", "(Lorg/apache/openjpa/meta/ClassMetaData;)V", true);
methodVisitor.visitVarInsn(ILOAD, 3);
Label label4 = new Label();
methodVisitor.visitJumpInsn(IFNE, label4);
methodVisitor.visitInsn(ICONST_1);
Label label5 = new Label();
methodVisitor.visitJumpInsn(GOTO, label5);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
methodVisitor.visitVarInsn(ISTORE, 10);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitVarInsn(ISTORE, 11);
Label label6 = new Label();
methodVisitor.visitLabel(label6);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
methodVisitor.visitVarInsn(ILOAD, 11);
methodVisitor.visitVarInsn(ILOAD, 4);
Label label7 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPGE, label7);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitVarInsn(ILOAD, 11);
methodVisitor.visitInsn(AALOAD);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitVarInsn(ILOAD, 10);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "traversePath", "(Lorg/apache/openjpa/kernel/exps/Path;Ljava/lang/String;ZZ)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Path");
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ISTORE, 10);
methodVisitor.visitIincInsn(11, 1);
methodVisitor.visitJumpInsn(GOTO, label6);
methodVisitor.visitLabel(label7);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(7, 12);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "getTypeLiteral", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getVariable", "(Ljava/lang/String;Z)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitTypeInsn(INSTANCEOF, "org/apache/openjpa/kernel/exps/Value");
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Value", "isVariable", "()Z", true);
methodVisitor.visitJumpInsn(IFEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "resolver", "Lorg/apache/openjpa/kernel/exps/Resolver;");
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Resolver", "classForName", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Class;", true);
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitJumpInsn(IFNULL, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitInsn(ICONST_5);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "newTypeLiteral", "(Ljava/lang/Object;I)Lorg/apache/openjpa/kernel/exps/Literal;", true);
methodVisitor.visitVarInsn(ASTORE, 6);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getClassMetaData", "(Ljava/lang/String;Z)Lorg/apache/openjpa/meta/ClassMetaData;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Value", "setMetaData", "(Lorg/apache/openjpa/meta/ClassMetaData;)V", true);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,3, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "java/lang/String", "org/apache/openjpa/kernel/exps/Value"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("not-type-literal");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitMaxs(7, 7);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "getPathOrConstant", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
Label label1 = new Label();
Label label2 = new Label();
methodVisitor.visitTryCatchBlock(label0, label1, label2, "java/lang/NoSuchFieldException");
Label label3 = new Label();
methodVisitor.visitTryCatchBlock(label0, label1, label3, "java/lang/Exception");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitLdcInsn(".");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "assemble", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;Ljava/lang/String;I)Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "resolver", "Lorg/apache/openjpa/kernel/exps/Resolver;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Resolver", "classForName", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Class;", true);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 3);
Label label4 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label4);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "lastChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "isEnum", "()Z", false);
Label label5 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label5);
methodVisitor.visitIntInsn(BIPUSH, 6);
Label label6 = new Label();
methodVisitor.visitJumpInsn(GOTO, label6);
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_APPEND,3, new Object[] {"java/lang/String", "java/lang/Class", "java/lang/String"}, 0, null);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLabel(label6);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
methodVisitor.visitVarInsn(ISTORE, 5);
methodVisitor.visitLabel(label0);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getField", "(Ljava/lang/String;)Ljava/lang/reflect/Field;", false);
methodVisitor.visitVarInsn(ASTORE, 6);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitVarInsn(ILOAD, 5);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "newLiteral", "(Ljava/lang/Object;I)Lorg/apache/openjpa/kernel/exps/Literal;", true);
methodVisitor.visitLabel(label1);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_FULL, 6, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "java/lang/String", "java/lang/Class", "java/lang/String", Opcodes.INTEGER}, 1, new Object[] {"java/lang/NoSuchFieldException"});
methodVisitor.visitVarInsn(ASTORE, 6);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "inEnumPath", "Z");
Label label7 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label7);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("no-field");
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getName", "()Ljava/lang/String;", false);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label7);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/NoSuchFieldException"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getPath", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;ZZ)Lorg/apache/openjpa/kernel/exps/Path;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_FULL, 6, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "java/lang/String", "java/lang/Class", "java/lang/String", Opcodes.INTEGER}, 1, new Object[] {"java/lang/Exception"});
methodVisitor.visitVarInsn(ASTORE, 6);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("unaccessible-field");
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getPath", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;ZZ)Lorg/apache/openjpa/kernel/exps/Path;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(7, 8);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "getType", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
Label label0 = new Label();
Label label1 = new Label();
Label label2 = new Label();
Label label3 = new Label();
Label label4 = new Label();
methodVisitor.visitLookupSwitchInsn(label4, new int[] { 62, 98, 109, 110 }, new Label[] { label0, label1, label2, label3 });
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "type", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getParameter", "(Ljava/lang/String;ZZ)Lorg/apache/openjpa/kernel/exps/Parameter;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "type", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getParameter", "(Ljava/lang/String;ZZ)Lorg/apache/openjpa/kernel/exps/Parameter;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "type", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getQualifiedIdentifier", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "type", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getPath", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;ZZ)Lorg/apache/openjpa/kernel/exps/Path;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "type", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(5, 3);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "getPath", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Path;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getPath", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;ZZ)Lorg/apache/openjpa/kernel/exps/Path;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(4, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "getPath", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;ZZ)Lorg/apache/openjpa/kernel/exps/Path;", null, null);
methodVisitor.visitCode();
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "firstChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getVariable", "(Ljava/lang/String;Z)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 6);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/Context", "schemaAlias", "Ljava/lang/String;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/Context", "subquery", "Lorg/apache/openjpa/kernel/exps/Subquery;");
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/Context", "subquery", "Lorg/apache/openjpa/kernel/exps/Subquery;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "newPath", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Path;", true);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/Context", "subquery", "Lorg/apache/openjpa/kernel/exps/Subquery;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Subquery", "getMetaData", "()Lorg/apache/openjpa/meta/ClassMetaData;", true);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Path", "setMetaData", "(Lorg/apache/openjpa/meta/ClassMetaData;)V", true);
Label label2 = new Label();
methodVisitor.visitJumpInsn(GOTO, label2);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_APPEND,3, new Object[] {"org/apache/openjpa/kernel/exps/Path", "java/lang/String", "org/apache/openjpa/kernel/exps/Value"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "newPath", "()Lorg/apache/openjpa/kernel/exps/Path;", true);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/Context", "meta", "Lorg/apache/openjpa/meta/ClassMetaData;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Path", "setMetaData", "(Lorg/apache/openjpa/meta/ClassMetaData;)V", true);
methodVisitor.visitJumpInsn(GOTO, label2);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getMetaDataForAlias", "(Ljava/lang/String;)Lorg/apache/openjpa/meta/ClassMetaData;", false);
Label label3 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getMetaDataForAlias", "(Ljava/lang/String;)Lorg/apache/openjpa/meta/ClassMetaData;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "newPath", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/meta/ClassMetaData;)Lorg/apache/openjpa/kernel/exps/Path;", false);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitJumpInsn(GOTO, label2);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitTypeInsn(INSTANCEOF, "org/apache/openjpa/kernel/exps/Path");
Label label4 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label4);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Path");
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitJumpInsn(GOTO, label2);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Value", "getMetaData", "()Lorg/apache/openjpa/meta/ClassMetaData;", true);
Label label5 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label5);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Value", "getMetaData", "()Lorg/apache/openjpa/meta/ClassMetaData;", true);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "newPath", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/meta/ClassMetaData;)Lorg/apache/openjpa/kernel/exps/Path;", false);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitJumpInsn(GOTO, label2);
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("path-invalid");
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "assemble", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/String;", false);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Path", "setSchemaAlias", "(Ljava/lang/String;)V", true);
methodVisitor.visitVarInsn(ILOAD, 3);
Label label6 = new Label();
methodVisitor.visitJumpInsn(IFNE, label6);
methodVisitor.visitInsn(ICONST_1);
Label label7 = new Label();
methodVisitor.visitJumpInsn(GOTO, label7);
methodVisitor.visitLabel(label6);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLabel(label7);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
methodVisitor.visitVarInsn(ISTORE, 7);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitVarInsn(ISTORE, 8);
Label label8 = new Label();
methodVisitor.visitLabel(label8);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
methodVisitor.visitVarInsn(ILOAD, 8);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitInsn(ARRAYLENGTH);
Label label9 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPGE, label9);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Path", "isXPath", "()Z", true);
Label label10 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label10);
methodVisitor.visitVarInsn(ILOAD, 8);
methodVisitor.visitVarInsn(ISTORE, 9);
Label label11 = new Label();
methodVisitor.visitLabel(label11);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
methodVisitor.visitVarInsn(ILOAD, 9);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitInsn(ARRAYLENGTH);
Label label12 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPGE, label12);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitVarInsn(ILOAD, 9);
methodVisitor.visitInsn(AALOAD);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "traverseXPath", "(Lorg/apache/openjpa/kernel/exps/Path;Ljava/lang/String;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Path");
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitIincInsn(9, 1);
methodVisitor.visitJumpInsn(GOTO, label11);
methodVisitor.visitLabel(label12);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label10);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitVarInsn(ILOAD, 8);
methodVisitor.visitInsn(AALOAD);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitVarInsn(ILOAD, 7);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "traversePath", "(Lorg/apache/openjpa/kernel/exps/Path;Ljava/lang/String;ZZ)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Path");
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/exps/Context", "getParent", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
Label label13 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label13);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Path", "getSchemaAlias", "()Ljava/lang/String;", true);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/exps/Context", "getVariable", "(Ljava/lang/String;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitJumpInsn(IFNONNULL, label13);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Path", "setSubqueryContext", "(Lorg/apache/openjpa/kernel/exps/Context;Ljava/lang/String;)V", true);
methodVisitor.visitLabel(label13);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ISTORE, 7);
methodVisitor.visitIincInsn(8, 1);
methodVisitor.visitJumpInsn(GOTO, label8);
methodVisitor.visitLabel(label9);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(7, 10);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PROTECTED, "getDeclaredVariableType", "(Ljava/lang/String;)Ljava/lang/Class;", "(Ljava/lang/String;)Ljava/lang/Class<*>;", null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getMetaDataForAlias", "(Ljava/lang/String;)Lorg/apache/openjpa/meta/ClassMetaData;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 2);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/meta/ClassMetaData", "getDescribedType", "()Ljava/lang/Class;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/meta/ClassMetaData"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label1);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/Context", "schemaAlias", "Ljava/lang/String;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z", false);
methodVisitor.visitJumpInsn(IFEQ, label1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getCandidateType", "()Ljava/lang/Class;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(2, 3);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "getExpression", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Expression;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "eval", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/Object;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitTypeInsn(INSTANCEOF, "org/apache/openjpa/kernel/exps/Expression");
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNE, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Value");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "asExpression", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/Object"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Expression");
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(2, 3);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "getSimpleCaseExpression", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "getChild", "(I)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "eval", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/Object;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "getChildCount", "()I", false);
methodVisitor.visitVarInsn(ISTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "lastChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "eval", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/Object;", false);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ILOAD, 3);
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitInsn(ISUB);
methodVisitor.visitTypeInsn(ANEWARRAY, "org/apache/openjpa/kernel/exps/Expression");
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitVarInsn(ISTORE, 6);
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_FULL, 7, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "java/lang/Object", Opcodes.INTEGER, "java/lang/Object", "[Ljava/lang/Object;", Opcodes.INTEGER}, 0, new Object[] {});
methodVisitor.visitVarInsn(ILOAD, 6);
methodVisitor.visitVarInsn(ILOAD, 3);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(ISUB);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPGE, label1);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitVarInsn(ILOAD, 6);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(ISUB);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitVarInsn(ILOAD, 6);
methodVisitor.visitInsn(AALOAD);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "eval", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/Object;", false);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitIincInsn(6, 1);
methodVisitor.visitJumpInsn(GOTO, label0);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Value");
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitTypeInsn(CHECKCAST, "[Lorg/apache/openjpa/kernel/exps/Expression;");
methodVisitor.visitTypeInsn(CHECKCAST, "[Lorg/apache/openjpa/kernel/exps/Expression;");
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Value");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "simpleCaseExpression", "(Lorg/apache/openjpa/kernel/exps/Value;[Lorg/apache/openjpa/kernel/exps/Expression;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(5, 7);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "getGeneralCaseExpression", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "getChildCount", "()I", false);
methodVisitor.visitVarInsn(ISTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "lastChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "eval", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/Object;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(ISUB);
methodVisitor.visitTypeInsn(ANEWARRAY, "org/apache/openjpa/kernel/exps/Expression");
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ISTORE, 5);
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_FULL, 6, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", Opcodes.INTEGER, "java/lang/Object", "[Ljava/lang/Object;", Opcodes.INTEGER}, 0, new Object[] {});
methodVisitor.visitVarInsn(ILOAD, 5);
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(ISUB);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPGE, label1);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitVarInsn(ILOAD, 5);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitVarInsn(ILOAD, 5);
methodVisitor.visitInsn(AALOAD);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "eval", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/Object;", false);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitIincInsn(5, 1);
methodVisitor.visitJumpInsn(GOTO, label0);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitTypeInsn(CHECKCAST, "[Lorg/apache/openjpa/kernel/exps/Expression;");
methodVisitor.visitTypeInsn(CHECKCAST, "[Lorg/apache/openjpa/kernel/exps/Expression;");
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Value");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "generalCaseExpression", "([Lorg/apache/openjpa/kernel/exps/Expression;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(5, 6);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "getWhenCondition", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Expression;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "firstChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "eval", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/Object;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "secondChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "eval", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/Object;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Expression");
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Value");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "whenCondition", "(Lorg/apache/openjpa/kernel/exps/Expression;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(3, 4);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "getWhenScalar", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Expression;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "firstChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "eval", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/Object;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "secondChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "eval", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/Object;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Value");
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Value");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "whenScalar", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Expression;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(3, 4);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "getCoalesceExpression", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "getChildCount", "()I", false);
methodVisitor.visitVarInsn(ISTORE, 2);
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitTypeInsn(ANEWARRAY, "org/apache/openjpa/kernel/exps/Value");
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ISTORE, 4);
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,3, new Object[] {Opcodes.INTEGER, "[Ljava/lang/Object;", Opcodes.INTEGER}, 0, null);
methodVisitor.visitVarInsn(ILOAD, 4);
methodVisitor.visitVarInsn(ILOAD, 2);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPGE, label1);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ILOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitVarInsn(ILOAD, 4);
methodVisitor.visitInsn(AALOAD);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "eval", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/Object;", false);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitIincInsn(4, 1);
methodVisitor.visitJumpInsn(GOTO, label0);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitTypeInsn(CHECKCAST, "[Lorg/apache/openjpa/kernel/exps/Value;");
methodVisitor.visitTypeInsn(CHECKCAST, "[Lorg/apache/openjpa/kernel/exps/Value;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "coalesceExpression", "([Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(5, 5);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "getNullIfExpression", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "firstChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "eval", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/Object;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "secondChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "eval", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/Object;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Value");
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Value");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "nullIfExpression", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Value;", true);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(3, 4);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "id", "I");
methodVisitor.visitIntInsn(BIPUSH, 59);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getQualifiedIdentifier", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;I)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(3, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "newPath", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/meta/ClassMetaData;)Lorg/apache/openjpa/kernel/exps/Path;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 1);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "newPath", "()Lorg/apache/openjpa/kernel/exps/Path;", true);
Label label1 = new Label();
methodVisitor.visitJumpInsn(GOTO, label1);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "factory", "Lorg/apache/openjpa/kernel/exps/ExpressionFactory;");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/ExpressionFactory", "newPath", "(Lorg/apache/openjpa/kernel/exps/Value;)Lorg/apache/openjpa/kernel/exps/Path;", true);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"org/apache/openjpa/kernel/exps/Path"});
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 2);
Label label2 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Path", "setMetaData", "(Lorg/apache/openjpa/meta/ClassMetaData;)V", true);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/kernel/exps/Path"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(2, 4);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "getValue", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;I)Lorg/apache/openjpa/kernel/exps/Value;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "eval", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Ljava/lang/Object;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Value");
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Value", "isVariable", "()Z", true);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNE, label0);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/kernel/exps/Value"}, 0, null);
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitInsn(ICONST_1);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label1);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitTypeInsn(INSTANCEOF, "org/apache/openjpa/kernel/exps/Path");
methodVisitor.visitJumpInsn(IFNE, label1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Value", "getMetaData", "()Lorg/apache/openjpa/meta/ClassMetaData;", true);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "newPath", "(Lorg/apache/openjpa/kernel/exps/Value;Lorg/apache/openjpa/meta/ClassMetaData;)Lorg/apache/openjpa/kernel/exps/Path;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitInsn(ICONST_2);
Label label2 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("unexpected-var");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "text", "Ljava/lang/String;");
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(7, 4);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "contexts", "Ljava/util/Stack;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/Stack", "peek", "()Ljava/lang/Object;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Context");
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(1, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "root", "()Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/Context", "parsed", "Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$ParsedJPQL;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$ParsedJPQL", "access$000", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$ParsedJPQL;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(1, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "getMetaDataForAlias", "(Ljava/lang/String;)Lorg/apache/openjpa/meta/ClassMetaData;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "contexts", "Ljava/util/Stack;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/Stack", "size", "()I", false);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(ISUB);
methodVisitor.visitVarInsn(ISTORE, 2);
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
methodVisitor.visitVarInsn(ILOAD, 2);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFLT, label1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "contexts", "Ljava/util/Stack;");
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/Stack", "get", "(I)Ljava/lang/Object;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openjpa/kernel/exps/Context");
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/Context", "schemaAlias", "Ljava/lang/String;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
Label label2 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/exps/Context", "meta", "Lorg/apache/openjpa/meta/ClassMetaData;");
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitIincInsn(2, -1);
methodVisitor.visitJumpInsn(GOTO, label0);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(2, 4);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PROTECTED, "addSchemaToContext", "(Ljava/lang/String;Lorg/apache/openjpa/meta/ClassMetaData;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "toLowerCase", "()Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/exps/Context", "addSchema", "(Ljava/lang/String;Lorg/apache/openjpa/meta/ClassMetaData;)V", false);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(3, 3);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PROTECTED, "addVariableToContext", "(Ljava/lang/String;Lorg/apache/openjpa/kernel/exps/Value;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/exps/Context", "addVariable", "(Ljava/lang/String;Lorg/apache/openjpa/kernel/exps/Value;)V", false);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(3, 3);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PROTECTED, "getVariable", "(Ljava/lang/String;)Lorg/apache/openjpa/kernel/exps/Value;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "ctx", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/exps/Context", "getVariable", "(Ljava/lang/String;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 3);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label0);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"org/apache/openjpa/kernel/exps/Context", "org/apache/openjpa/kernel/exps/Value"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/exps/Context", "getParent", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/exps/Context", "getParent", "()Lorg/apache/openjpa/kernel/exps/Context;", false);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/exps/Context", "findVariable", "(Ljava/lang/String;)Lorg/apache/openjpa/kernel/exps/Value;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(2, 4);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "onlyChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", null, new String[] { "org/apache/openjpa/util/UserException" });
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "firstChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitInsn(ARRAYLENGTH);
methodVisitor.visitInsn(ICONST_1);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPLE, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("multi-children");
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/util/Arrays", "asList", "([Ljava/lang/Object;)Ljava/util/List;", false);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(7, 3);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "left", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "child", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;II)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(4, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "right", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "child", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;II)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(4, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "child", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;II)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitInsn(ARRAYLENGTH);
methodVisitor.visitVarInsn(ILOAD, 3);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("wrong-child-count");
methodVisitor.visitInsn(ICONST_3);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ILOAD, 3);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/util/Arrays", "asList", "([Ljava/lang/Object;)Ljava/util/List;", false);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitInsn(AALOAD);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(7, 4);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "firstChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitInsn(ARRAYLENGTH);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFNE, label1);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLdcInsn("no-children");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parseException", "(ILjava/lang/String;[Ljava/lang/Object;Ljava/lang/Exception;)Lorg/apache/openjpa/util/OpenJPAException;", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitInsn(AALOAD);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(7, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE | ACC_STATIC, "secondChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(AALOAD);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(2, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE | ACC_STATIC, "thirdChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitInsn(AALOAD);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(2, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE | ACC_STATIC, "lastChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "lastChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;I)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(2, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE | ACC_STATIC, "lastChild", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;I)Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode", "children", "[Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder$JPQLNode;");
methodVisitor.visitInsn(ARRAYLENGTH);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitVarInsn(ILOAD, 1);
methodVisitor.visitInsn(IADD);
methodVisitor.visitInsn(ISUB);
methodVisitor.visitInsn(AALOAD);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(4, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "validateParameters", "()V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parameterTypes", "Lorg/apache/openjpa/lib/util/OrderedMap;");
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parameterTypes", "Lorg/apache/openjpa/lib/util/OrderedMap;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/util/OrderedMap", "isEmpty", "()Z", false);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label1);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ISTORE, 1);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ISTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parameterTypes", "Lorg/apache/openjpa/lib/util/OrderedMap;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/util/OrderedMap", "keySet", "()Ljava/util/Set;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "iterator", "()Ljava/util/Iterator;", true);
methodVisitor.visitVarInsn(ASTORE, 3);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_APPEND,3, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER, "java/util/Iterator"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true);
Label label3 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label3);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitTypeInsn(INSTANCEOF, "java/lang/Number");
Label label4 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label4);
methodVisitor.visitVarInsn(ILOAD, 2);
Label label5 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label5);
methodVisitor.visitTypeInsn(NEW, "org/apache/openjpa/util/UserException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "_loc", "Lorg/apache/openjpa/lib/util/Localizer;");
methodVisitor.visitLdcInsn("mixed-parameter-types");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "resolver", "Lorg/apache/openjpa/kernel/exps/Resolver;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Resolver", "getQueryContext", "()Lorg/apache/openjpa/kernel/QueryContext;", true);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/QueryContext", "getQueryString", "()Ljava/lang/String;", true);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parameterTypes", "Lorg/apache/openjpa/lib/util/OrderedMap;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/util/OrderedMap", "keySet", "()Ljava/util/Set;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "toString", "()Ljava/lang/String;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/util/Localizer", "get", "(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)Lorg/apache/openjpa/lib/util/Localizer$Message;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/util/UserException", "<init>", "(Lorg/apache/openjpa/lib/util/Localizer$Message;)V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/Object"}, 0, null);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitVarInsn(ISTORE, 1);
Label label6 = new Label();
methodVisitor.visitJumpInsn(GOTO, label6);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ILOAD, 1);
Label label7 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label7);
methodVisitor.visitTypeInsn(NEW, "org/apache/openjpa/util/UserException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "_loc", "Lorg/apache/openjpa/lib/util/Localizer;");
methodVisitor.visitLdcInsn("mixed-parameter-types");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "resolver", "Lorg/apache/openjpa/kernel/exps/Resolver;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Resolver", "getQueryContext", "()Lorg/apache/openjpa/kernel/QueryContext;", true);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/QueryContext", "getQueryString", "()Ljava/lang/String;", true);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parameterTypes", "Lorg/apache/openjpa/lib/util/OrderedMap;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/util/OrderedMap", "keySet", "()Ljava/util/Set;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "toString", "()Ljava/lang/String;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/util/Localizer", "get", "(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)Lorg/apache/openjpa/lib/util/Localizer$Message;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/util/UserException", "<init>", "(Lorg/apache/openjpa/lib/util/Localizer$Message;)V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label7);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitVarInsn(ISTORE, 2);
methodVisitor.visitLabel(label6);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitJumpInsn(GOTO, label2);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitVarInsn(ILOAD, 1);
Label label8 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label8);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parameterTypes", "Lorg/apache/openjpa/lib/util/OrderedMap;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/util/OrderedMap", "keySet", "()Ljava/util/Set;", false);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "contains", "(Ljava/lang/Object;)Z", true);
methodVisitor.visitJumpInsn(IFNE, label8);
methodVisitor.visitTypeInsn(NEW, "org/apache/openjpa/util/UserException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "_loc", "Lorg/apache/openjpa/lib/util/Localizer;");
methodVisitor.visitLdcInsn("missing-positional-parameter");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "resolver", "Lorg/apache/openjpa/kernel/exps/Resolver;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/exps/Resolver", "getQueryContext", "()Lorg/apache/openjpa/kernel/QueryContext;", true);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openjpa/kernel/QueryContext", "getQueryString", "()Ljava/lang/String;", true);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "parameterTypes", "Lorg/apache/openjpa/lib/util/OrderedMap;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/util/OrderedMap", "keySet", "()Ljava/util/Set;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "toString", "()Ljava/lang/String;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openjpa/lib/util/Localizer", "get", "(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)Lorg/apache/openjpa/lib/util/Localizer$Message;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/util/UserException", "<init>", "(Lorg/apache/openjpa/lib/util/Localizer$Message;)V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label8);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(6, 5);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_STATIC | ACC_SYNTHETIC, "access$100", "()Lorg/apache/openjpa/lib/util/Localizer;", null, null);
methodVisitor.visitCode();
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "_loc", "Lorg/apache/openjpa/lib/util/Localizer;");
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(1, 0);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_STATIC | ACC_SYNTHETIC, "access$200", "(Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder;)Ljava/lang/Class;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "getCandidateType", "()Ljava/lang/Class;", false);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(1, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_STATIC, "<clinit>", "()V", null, null);
methodVisitor.visitCode();
methodVisitor.visitLdcInsn(Type.getType("Lorg/apache/openjpa/kernel/jpql/JPQLExpressionBuilder;"));
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openjpa/lib/util/Localizer", "forPackage", "(Ljava/lang/Class;)Lorg/apache/openjpa/lib/util/Localizer;", false);
methodVisitor.visitFieldInsn(PUTSTATIC, "org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder", "_loc", "Lorg/apache/openjpa/lib/util/Localizer;");
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(1, 0);
methodVisitor.visitEnd();
}
classWriter.visitEnd();

return classWriter.toByteArray();
}
}
