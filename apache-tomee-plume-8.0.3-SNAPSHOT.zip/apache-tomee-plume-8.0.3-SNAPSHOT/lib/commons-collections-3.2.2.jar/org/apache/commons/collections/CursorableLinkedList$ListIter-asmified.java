package asm.org.apache.commons.collections;
import org.objectweb.asm.AnnotationVisitor;
import org.objectweb.asm.Attribute;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.ConstantDynamic;
import org.objectweb.asm.FieldVisitor;
import org.objectweb.asm.Handle;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.RecordComponentVisitor;
import org.objectweb.asm.Type;
import org.objectweb.asm.TypePath;
public class CursorableLinkedList$ListIterDump implements Opcodes {

public static byte[] dump () throws Exception {

ClassWriter classWriter = new ClassWriter(0);
FieldVisitor fieldVisitor;
RecordComponentVisitor recordComponentVisitor;
MethodVisitor methodVisitor;
AnnotationVisitor annotationVisitor0;

classWriter.visit(V1_3, ACC_SUPER, "org/apache/commons/collections/CursorableLinkedList$ListIter", null, "java/lang/Object", new String[] { "java/util/ListIterator" });

classWriter.visitInnerClass("org/apache/commons/collections/CursorableLinkedList$Listable", "org/apache/commons/collections/CursorableLinkedList", "Listable", ACC_STATIC);

classWriter.visitInnerClass("org/apache/commons/collections/CursorableLinkedList$ListIter", "org/apache/commons/collections/CursorableLinkedList", "ListIter", 0);

{
fieldVisitor = classWriter.visitField(0, "_cur", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(0, "_lastReturned", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(0, "_expectedModCount", "I", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(0, "_nextIndex", "I", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL | ACC_SYNTHETIC, "this$0", "Lorg/apache/commons/collections/CursorableLinkedList;", null, null);
fieldVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(0, "<init>", "(Lorg/apache/commons/collections/CursorableLinkedList;I)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "this$0", "Lorg/apache/commons/collections/CursorableLinkedList;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_cur", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_lastReturned", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "this$0", "Lorg/apache/commons/collections/CursorableLinkedList;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList", "_modCount", "I");
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_expectedModCount", "I");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_nextIndex", "I");
methodVisitor.visitVarInsn(ILOAD, 2);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNE, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "org/apache/commons/collections/CursorableLinkedList$Listable");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList", "_head", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "next", "()Lorg/apache/commons/collections/CursorableLinkedList$Listable;", false);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "<init>", "(Lorg/apache/commons/collections/CursorableLinkedList$Listable;Lorg/apache/commons/collections/CursorableLinkedList$Listable;Ljava/lang/Object;)V", false);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_cur", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_nextIndex", "I");
Label label1 = new Label();
methodVisitor.visitJumpInsn(GOTO, label1);
methodVisitor.visitLabel(label0);
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList", "_size", "I");
Label label2 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "org/apache/commons/collections/CursorableLinkedList$Listable");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList", "_head", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "prev", "()Lorg/apache/commons/collections/CursorableLinkedList$Listable;", false);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "<init>", "(Lorg/apache/commons/collections/CursorableLinkedList$Listable;Lorg/apache/commons/collections/CursorableLinkedList$Listable;Ljava/lang/Object;)V", false);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_cur", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList", "_size", "I");
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_nextIndex", "I");
methodVisitor.visitJumpInsn(GOTO, label1);
methodVisitor.visitLabel(label2);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList", "getListableAt", "(I)Lorg/apache/commons/collections/CursorableLinkedList$Listable;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "org/apache/commons/collections/CursorableLinkedList$Listable");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "prev", "()Lorg/apache/commons/collections/CursorableLinkedList$Listable;", false);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "<init>", "(Lorg/apache/commons/collections/CursorableLinkedList$Listable;Lorg/apache/commons/collections/CursorableLinkedList$Listable;Ljava/lang/Object;)V", false);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_cur", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_nextIndex", "I");
methodVisitor.visitLabel(label1);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(6, 4);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "previous", "()Ljava/lang/Object;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$ListIter", "checkForComod", "()V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$ListIter", "hasPrevious", "()Z", false);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNE, label0);
methodVisitor.visitTypeInsn(NEW, "java/util/NoSuchElementException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/NoSuchElementException", "<init>", "()V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_cur", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "prev", "()Lorg/apache/commons/collections/CursorableLinkedList$Listable;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "value", "()Ljava/lang/Object;", false);
methodVisitor.visitVarInsn(ASTORE, 1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_cur", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "prev", "()Lorg/apache/commons/collections/CursorableLinkedList$Listable;", false);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_lastReturned", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_cur", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_cur", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "prev", "()Lorg/apache/commons/collections/CursorableLinkedList$Listable;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "setNext", "(Lorg/apache/commons/collections/CursorableLinkedList$Listable;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_cur", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_cur", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "prev", "()Lorg/apache/commons/collections/CursorableLinkedList$Listable;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "prev", "()Lorg/apache/commons/collections/CursorableLinkedList$Listable;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "setPrev", "(Lorg/apache/commons/collections/CursorableLinkedList$Listable;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(DUP);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_nextIndex", "I");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(ISUB);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_nextIndex", "I");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(3, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "hasNext", "()Z", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$ListIter", "checkForComod", "()V", false);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_cur", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "next", "()Lorg/apache/commons/collections/CursorableLinkedList$Listable;", false);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IF_ACMPEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_cur", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "prev", "()Lorg/apache/commons/collections/CursorableLinkedList$Listable;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "this$0", "Lorg/apache/commons/collections/CursorableLinkedList;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList", "_head", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "prev", "()Lorg/apache/commons/collections/CursorableLinkedList$Listable;", false);
methodVisitor.visitJumpInsn(IF_ACMPEQ, label0);
methodVisitor.visitInsn(ICONST_1);
Label label1 = new Label();
methodVisitor.visitJumpInsn(GOTO, label1);
methodVisitor.visitLabel(label0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLabel(label1);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitMaxs(2, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "next", "()Ljava/lang/Object;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$ListIter", "checkForComod", "()V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$ListIter", "hasNext", "()Z", false);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNE, label0);
methodVisitor.visitTypeInsn(NEW, "java/util/NoSuchElementException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/NoSuchElementException", "<init>", "()V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_cur", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "next", "()Lorg/apache/commons/collections/CursorableLinkedList$Listable;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "value", "()Ljava/lang/Object;", false);
methodVisitor.visitVarInsn(ASTORE, 1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_cur", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "next", "()Lorg/apache/commons/collections/CursorableLinkedList$Listable;", false);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_lastReturned", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_cur", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_cur", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "next", "()Lorg/apache/commons/collections/CursorableLinkedList$Listable;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "setPrev", "(Lorg/apache/commons/collections/CursorableLinkedList$Listable;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_cur", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_cur", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "next", "()Lorg/apache/commons/collections/CursorableLinkedList$Listable;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "next", "()Lorg/apache/commons/collections/CursorableLinkedList$Listable;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "setNext", "(Lorg/apache/commons/collections/CursorableLinkedList$Listable;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(DUP);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_nextIndex", "I");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(IADD);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_nextIndex", "I");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(3, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "previousIndex", "()I", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$ListIter", "checkForComod", "()V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$ListIter", "hasPrevious", "()Z", false);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNE, label0);
methodVisitor.visitInsn(ICONST_M1);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitLabel(label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_nextIndex", "I");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(ISUB);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitMaxs(2, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "hasPrevious", "()Z", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$ListIter", "checkForComod", "()V", false);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_cur", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "prev", "()Lorg/apache/commons/collections/CursorableLinkedList$Listable;", false);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IF_ACMPEQ, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_cur", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "next", "()Lorg/apache/commons/collections/CursorableLinkedList$Listable;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "this$0", "Lorg/apache/commons/collections/CursorableLinkedList;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList", "_head", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "next", "()Lorg/apache/commons/collections/CursorableLinkedList$Listable;", false);
methodVisitor.visitJumpInsn(IF_ACMPEQ, label0);
methodVisitor.visitInsn(ICONST_1);
Label label1 = new Label();
methodVisitor.visitJumpInsn(GOTO, label1);
methodVisitor.visitLabel(label0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLabel(label1);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitMaxs(2, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "set", "(Ljava/lang/Object;)V", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
Label label1 = new Label();
Label label2 = new Label();
methodVisitor.visitTryCatchBlock(label0, label1, label2, "java/lang/NullPointerException");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$ListIter", "checkForComod", "()V", false);
methodVisitor.visitLabel(label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_lastReturned", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "setValue", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitLabel(label1);
Label label3 = new Label();
methodVisitor.visitJumpInsn(GOTO, label3);
methodVisitor.visitLabel(label2);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalStateException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalStateException", "<init>", "()V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label3);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(2, 3);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "nextIndex", "()I", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$ListIter", "checkForComod", "()V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$ListIter", "hasNext", "()Z", false);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNE, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "this$0", "Lorg/apache/commons/collections/CursorableLinkedList;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList", "size", "()I", false);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitLabel(label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_nextIndex", "I");
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitMaxs(1, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "remove", "()V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$ListIter", "checkForComod", "()V", false);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_lastReturned", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
Label label0 = new Label();
methodVisitor.visitJumpInsn(IF_ACMPNE, label0);
methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalStateException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalStateException", "<init>", "()V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_cur", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_lastReturned", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "this$0", "Lorg/apache/commons/collections/CursorableLinkedList;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList", "_head", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "prev", "()Lorg/apache/commons/collections/CursorableLinkedList$Listable;", false);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IF_ACMPNE, label1);
methodVisitor.visitInsn(ACONST_NULL);
Label label2 = new Label();
methodVisitor.visitJumpInsn(GOTO, label2);
methodVisitor.visitLabel(label1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_lastReturned", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "next", "()Lorg/apache/commons/collections/CursorableLinkedList$Listable;", false);
methodVisitor.visitLabel(label2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "setNext", "(Lorg/apache/commons/collections/CursorableLinkedList$Listable;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_cur", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_lastReturned", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "this$0", "Lorg/apache/commons/collections/CursorableLinkedList;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList", "_head", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "next", "()Lorg/apache/commons/collections/CursorableLinkedList$Listable;", false);
Label label3 = new Label();
methodVisitor.visitJumpInsn(IF_ACMPNE, label3);
methodVisitor.visitInsn(ACONST_NULL);
Label label4 = new Label();
methodVisitor.visitJumpInsn(GOTO, label4);
methodVisitor.visitLabel(label3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_lastReturned", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "prev", "()Lorg/apache/commons/collections/CursorableLinkedList$Listable;", false);
methodVisitor.visitLabel(label4);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "setPrev", "(Lorg/apache/commons/collections/CursorableLinkedList$Listable;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "this$0", "Lorg/apache/commons/collections/CursorableLinkedList;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_lastReturned", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList", "removeListable", "(Lorg/apache/commons/collections/CursorableLinkedList$Listable;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_lastReturned", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(DUP);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_nextIndex", "I");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(ISUB);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_nextIndex", "I");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(DUP);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_expectedModCount", "I");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(IADD);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_expectedModCount", "I");
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(3, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "add", "(Ljava/lang/Object;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$ListIter", "checkForComod", "()V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_cur", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "this$0", "Lorg/apache/commons/collections/CursorableLinkedList;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_cur", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "prev", "()Lorg/apache/commons/collections/CursorableLinkedList$Listable;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_cur", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "next", "()Lorg/apache/commons/collections/CursorableLinkedList$Listable;", false);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList", "insertListable", "(Lorg/apache/commons/collections/CursorableLinkedList$Listable;Lorg/apache/commons/collections/CursorableLinkedList$Listable;Ljava/lang/Object;)Lorg/apache/commons/collections/CursorableLinkedList$Listable;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/collections/CursorableLinkedList$Listable", "setPrev", "(Lorg/apache/commons/collections/CursorableLinkedList$Listable;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_lastReturned", "Lorg/apache/commons/collections/CursorableLinkedList$Listable;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(DUP);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_nextIndex", "I");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(IADD);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_nextIndex", "I");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(DUP);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_expectedModCount", "I");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(IADD);
methodVisitor.visitFieldInsn(PUTFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_expectedModCount", "I");
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(5, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PROTECTED, "checkForComod", "()V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "_expectedModCount", "I");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList$ListIter", "this$0", "Lorg/apache/commons/collections/CursorableLinkedList;");
methodVisitor.visitFieldInsn(GETFIELD, "org/apache/commons/collections/CursorableLinkedList", "_modCount", "I");
Label label0 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPEQ, label0);
methodVisitor.visitTypeInsn(NEW, "java/util/ConcurrentModificationException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/ConcurrentModificationException", "<init>", "()V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label0);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(2, 1);
methodVisitor.visitEnd();
}
classWriter.visitEnd();

return classWriter.toByteArray();
}
}
