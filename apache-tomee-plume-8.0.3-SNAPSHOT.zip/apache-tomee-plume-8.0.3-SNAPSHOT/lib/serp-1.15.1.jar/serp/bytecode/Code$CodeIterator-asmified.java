package asm.serp.bytecode;
import org.objectweb.asm.AnnotationVisitor;
import org.objectweb.asm.Attribute;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.ConstantDynamic;
import org.objectweb.asm.FieldVisitor;
import org.objectweb.asm.Handle;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.RecordComponentVisitor;
import org.objectweb.asm.Type;
import org.objectweb.asm.TypePath;
public class Code$CodeIteratorDump implements Opcodes {

public static byte[] dump () throws Exception {

ClassWriter classWriter = new ClassWriter(0);
FieldVisitor fieldVisitor;
RecordComponentVisitor recordComponentVisitor;
MethodVisitor methodVisitor;
AnnotationVisitor annotationVisitor0;

classWriter.visit(V1_6, ACC_SUPER, "serp/bytecode/Code$CodeIterator", null, "java/lang/Object", new String[] { "java/util/ListIterator" });

classWriter.visitInnerClass("serp/bytecode/Code$CodeIterator", "serp/bytecode/Code", "CodeIterator", ACC_PRIVATE);

{
fieldVisitor = classWriter.visitField(ACC_PUBLIC | ACC_FINAL | ACC_STATIC, "UNSET", "I", null, new Integer(-99));
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE, "_bn", "Lserp/bytecode/CodeEntry;", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE, "_last", "Lserp/bytecode/Instruction;", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE, "_index", "I", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_FINAL | ACC_SYNTHETIC, "this$0", "Lserp/bytecode/Code;", null, null);
fieldVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "<init>", "(Lserp/bytecode/Code;Lserp/bytecode/CodeEntry;I)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/Code$CodeIterator", "this$0", "Lserp/bytecode/Code;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/Code$CodeIterator", "_bn", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/Code$CodeIterator", "_last", "Lserp/bytecode/Instruction;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitIntInsn(BIPUSH, -99);
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/Code$CodeIterator", "_index", "I");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/Code$CodeIterator", "_bn", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ILOAD, 3);
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/Code$CodeIterator", "_index", "I");
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(2, 4);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "hasNext", "()Z", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_bn", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/CodeEntry", "next", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "this$0", "Lserp/bytecode/Code;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "serp/bytecode/Code", "access$100", "(Lserp/bytecode/Code;)Lserp/bytecode/CodeEntry;", false);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IF_ACMPEQ, label0);
methodVisitor.visitInsn(ICONST_1);
Label label1 = new Label();
methodVisitor.visitJumpInsn(GOTO, label1);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitMaxs(2, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "hasPrevious", "()Z", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_bn", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "this$0", "Lserp/bytecode/Code;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "serp/bytecode/Code", "access$200", "(Lserp/bytecode/Code;)Lserp/bytecode/CodeEntry;", false);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IF_ACMPEQ, label0);
methodVisitor.visitInsn(ICONST_1);
Label label1 = new Label();
methodVisitor.visitJumpInsn(GOTO, label1);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitMaxs(2, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "next", "()Ljava/lang/Object;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "serp/bytecode/Code$CodeIterator", "hasNext", "()Z", false);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNE, label0);
methodVisitor.visitTypeInsn(NEW, "java/util/NoSuchElementException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/NoSuchElementException", "<init>", "()V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_bn", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/CodeEntry", "next", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/Code$CodeIterator", "_bn", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_bn", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitTypeInsn(CHECKCAST, "serp/bytecode/Instruction");
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/Code$CodeIterator", "_last", "Lserp/bytecode/Instruction;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_index", "I");
methodVisitor.visitIntInsn(BIPUSH, -99);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPEQ, label1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(DUP);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_index", "I");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(IADD);
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/Code$CodeIterator", "_index", "I");
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_last", "Lserp/bytecode/Instruction;");
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(3, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "nextIndex", "()I", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "serp/bytecode/Code$CodeIterator", "initIndex", "()I", false);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(IADD);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitMaxs(2, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "previous", "()Ljava/lang/Object;", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "serp/bytecode/Code$CodeIterator", "hasPrevious", "()Z", false);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNE, label0);
methodVisitor.visitTypeInsn(NEW, "java/util/NoSuchElementException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/NoSuchElementException", "<init>", "()V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_bn", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitTypeInsn(CHECKCAST, "serp/bytecode/Instruction");
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/Code$CodeIterator", "_last", "Lserp/bytecode/Instruction;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_bn", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/CodeEntry", "prev", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/Code$CodeIterator", "_bn", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_index", "I");
methodVisitor.visitIntInsn(BIPUSH, -99);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPEQ, label1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(DUP);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_index", "I");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(ISUB);
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/Code$CodeIterator", "_index", "I");
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_last", "Lserp/bytecode/Instruction;");
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(3, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "previousIndex", "()I", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "serp/bytecode/Code$CodeIterator", "initIndex", "()I", false);
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitMaxs(1, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "initIndex", "()I", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_index", "I");
methodVisitor.visitIntInsn(BIPUSH, -99);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPNE, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_bn", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "this$0", "Lserp/bytecode/Code;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "serp/bytecode/Code", "access$200", "(Lserp/bytecode/Code;)Lserp/bytecode/CodeEntry;", false);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IF_ACMPNE, label1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_M1);
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/Code$CodeIterator", "_index", "I");
methodVisitor.visitJumpInsn(GOTO, label0);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "this$0", "Lserp/bytecode/Code;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_bn", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitTypeInsn(CHECKCAST, "serp/bytecode/Instruction");
methodVisitor.visitMethodInsn(INVOKESTATIC, "serp/bytecode/Code", "access$300", "(Lserp/bytecode/Code;Lserp/bytecode/Instruction;)I", false);
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/Code$CodeIterator", "_index", "I");
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_index", "I");
methodVisitor.visitInsn(IRETURN);
methodVisitor.visitMaxs(3, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "add", "(Ljava/lang/Object;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "serp/bytecode/Code$CodeIterator", "addInternal", "(Ljava/lang/Object;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "this$0", "Lserp/bytecode/Code;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "serp/bytecode/Code", "invalidateByteIndexes", "()V", false);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(2, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "addInternal", "(Ljava/lang/Object;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 1);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label0);
methodVisitor.visitTypeInsn(NEW, "java/lang/NullPointerException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("obj = null");
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/NullPointerException", "<init>", "(Ljava/lang/String;)V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitTypeInsn(CHECKCAST, "serp/bytecode/Instruction");
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "this$0", "Lserp/bytecode/Code;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "serp/bytecode/Code", "access$400", "(Lserp/bytecode/Code;)I", false);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFNE, label1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "this$0", "Lserp/bytecode/Code;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "serp/bytecode/Code", "access$200", "(Lserp/bytecode/Code;)Lserp/bytecode/CodeEntry;", false);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/CodeEntry", "next", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "this$0", "Lserp/bytecode/Code;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "serp/bytecode/Code", "access$100", "(Lserp/bytecode/Code;)Lserp/bytecode/CodeEntry;", false);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/CodeEntry", "prev", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "this$0", "Lserp/bytecode/Code;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "serp/bytecode/Code", "access$200", "(Lserp/bytecode/Code;)Lserp/bytecode/CodeEntry;", false);
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/Instruction", "prev", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "this$0", "Lserp/bytecode/Code;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "serp/bytecode/Code", "access$100", "(Lserp/bytecode/Code;)Lserp/bytecode/CodeEntry;", false);
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/Instruction", "next", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/Code$CodeIterator", "_index", "I");
Label label2 = new Label();
methodVisitor.visitJumpInsn(GOTO, label2);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"serp/bytecode/Instruction"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_bn", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/CodeEntry", "next", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_bn", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/CodeEntry", "next", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/CodeEntry", "prev", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_bn", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/Instruction", "prev", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/Instruction", "next", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_index", "I");
methodVisitor.visitIntInsn(BIPUSH, -99);
methodVisitor.visitJumpInsn(IF_ICMPEQ, label2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(DUP);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_index", "I");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(IADD);
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/Code$CodeIterator", "_index", "I");
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/Code$CodeIterator", "_bn", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/Code$CodeIterator", "_last", "Lserp/bytecode/Instruction;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "this$0", "Lserp/bytecode/Code;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "serp/bytecode/Code", "access$408", "(Lserp/bytecode/Code;)I", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(3, 4);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "set", "(Ljava/lang/Object;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 1);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label0);
methodVisitor.visitTypeInsn(NEW, "java/lang/NullPointerException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("obj = null");
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/NullPointerException", "<init>", "(Ljava/lang/String;)V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_last", "Lserp/bytecode/Instruction;");
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label1);
methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalStateException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalStateException", "<init>", "()V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitTypeInsn(CHECKCAST, "serp/bytecode/Instruction");
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_last", "Lserp/bytecode/Instruction;");
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Instruction", "prev", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/Instruction", "prev", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_last", "Lserp/bytecode/Instruction;");
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Instruction", "next", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/Instruction", "next", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Instruction", "prev", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/CodeEntry", "next", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Instruction", "next", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/CodeEntry", "prev", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_last", "Lserp/bytecode/Instruction;");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "serp/bytecode/Code$CodeIterator", "replaceTarget", "(Lserp/bytecode/Instruction;Lserp/bytecode/Instruction;)V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_last", "Lserp/bytecode/Instruction;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "serp/bytecode/Instruction", "invalidate", "()V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_bn", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_last", "Lserp/bytecode/Instruction;");
Label label2 = new Label();
methodVisitor.visitJumpInsn(IF_ACMPNE, label2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/Code$CodeIterator", "_bn", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"serp/bytecode/Instruction"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/Code$CodeIterator", "_last", "Lserp/bytecode/Instruction;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "this$0", "Lserp/bytecode/Code;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "serp/bytecode/Code", "invalidateByteIndexes", "()V", false);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(3, 3);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "remove", "()V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_last", "Lserp/bytecode/Instruction;");
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label0);
methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalStateException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalStateException", "<init>", "()V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_bn", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_last", "Lserp/bytecode/Instruction;");
Label label1 = new Label();
methodVisitor.visitJumpInsn(IF_ACMPNE, label1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_last", "Lserp/bytecode/Instruction;");
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Instruction", "prev", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/Code$CodeIterator", "_bn", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(DUP);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_index", "I");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(ISUB);
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/Code$CodeIterator", "_index", "I");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_last", "Lserp/bytecode/Instruction;");
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Instruction", "prev", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_last", "Lserp/bytecode/Instruction;");
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Instruction", "next", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/CodeEntry", "next", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_last", "Lserp/bytecode/Instruction;");
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Instruction", "next", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_last", "Lserp/bytecode/Instruction;");
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Instruction", "prev", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/CodeEntry", "prev", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "this$0", "Lserp/bytecode/Code;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "serp/bytecode/Code", "access$410", "(Lserp/bytecode/Code;)I", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "_last", "Lserp/bytecode/Instruction;");
methodVisitor.visitVarInsn(ASTORE, 1);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Instruction", "next", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "this$0", "Lserp/bytecode/Code;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "serp/bytecode/Code", "access$100", "(Lserp/bytecode/Code;)Lserp/bytecode/CodeEntry;", false);
Label label2 = new Label();
methodVisitor.visitJumpInsn(IF_ACMPEQ, label2);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Instruction", "next", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitTypeInsn(CHECKCAST, "serp/bytecode/Instruction");
methodVisitor.visitVarInsn(ASTORE, 2);
Label label3 = new Label();
methodVisitor.visitJumpInsn(GOTO, label3);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"serp/bytecode/Instruction", "serp/bytecode/Instruction"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "this$0", "Lserp/bytecode/Code;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "serp/bytecode/Code", "nop", "()Lserp/bytecode/Instruction;", false);
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "serp/bytecode/Code$CodeIterator", "replaceTarget", "(Lserp/bytecode/Instruction;Lserp/bytecode/Instruction;)V", false);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "serp/bytecode/Instruction", "invalidate", "()V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitFieldInsn(PUTFIELD, "serp/bytecode/Code$CodeIterator", "_last", "Lserp/bytecode/Instruction;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "this$0", "Lserp/bytecode/Code;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "serp/bytecode/Code", "invalidateByteIndexes", "()V", false);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(3, 3);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "replaceTarget", "(Lserp/bytecode/Instruction;Lserp/bytecode/Instruction;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "this$0", "Lserp/bytecode/Code;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "serp/bytecode/Code", "access$200", "(Lserp/bytecode/Code;)Lserp/bytecode/CodeEntry;", false);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/CodeEntry", "next", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ASTORE, 3);
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"serp/bytecode/CodeEntry"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "this$0", "Lserp/bytecode/Code;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "serp/bytecode/Code", "access$100", "(Lserp/bytecode/Code;)Lserp/bytecode/CodeEntry;", false);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IF_ACMPEQ, label1);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitTypeInsn(INSTANCEOF, "serp/bytecode/InstructionPtr");
Label label2 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitTypeInsn(CHECKCAST, "serp/bytecode/InstructionPtr");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "serp/bytecode/InstructionPtr", "replaceTarget", "(Lserp/bytecode/Instruction;Lserp/bytecode/Instruction;)V", true);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/CodeEntry", "next", "Lserp/bytecode/CodeEntry;");
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitJumpInsn(GOTO, label0);
methodVisitor.visitLabel(label1);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "this$0", "Lserp/bytecode/Code;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "serp/bytecode/Code", "getExceptionHandlers", "()[Lserp/bytecode/ExceptionHandler;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ISTORE, 4);
Label label3 = new Label();
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"[Lserp/bytecode/ExceptionHandler;", Opcodes.INTEGER}, 0, null);
methodVisitor.visitVarInsn(ILOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(ARRAYLENGTH);
Label label4 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPGE, label4);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ILOAD, 4);
methodVisitor.visitInsn(AALOAD);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "serp/bytecode/ExceptionHandler", "replaceTarget", "(Lserp/bytecode/Instruction;Lserp/bytecode/Instruction;)V", false);
methodVisitor.visitIincInsn(4, 1);
methodVisitor.visitJumpInsn(GOTO, label3);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "this$0", "Lserp/bytecode/Code;");
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "serp/bytecode/Code", "getLineNumberTable", "(Z)Lserp/bytecode/LineNumberTable;", false);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 4);
Label label5 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label5);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "serp/bytecode/LineNumberTable", "replaceTarget", "(Lserp/bytecode/Instruction;Lserp/bytecode/Instruction;)V", false);
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"serp/bytecode/LineNumberTable"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "this$0", "Lserp/bytecode/Code;");
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "serp/bytecode/Code", "getLocalVariableTable", "(Z)Lserp/bytecode/LocalVariableTable;", false);
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitVarInsn(ALOAD, 5);
Label label6 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label6);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "serp/bytecode/LocalVariableTable", "replaceTarget", "(Lserp/bytecode/Instruction;Lserp/bytecode/Instruction;)V", false);
methodVisitor.visitLabel(label6);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"serp/bytecode/LocalVariableTable"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "serp/bytecode/Code$CodeIterator", "this$0", "Lserp/bytecode/Code;");
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "serp/bytecode/Code", "getLocalVariableTypeTable", "(Z)Lserp/bytecode/LocalVariableTypeTable;", false);
methodVisitor.visitVarInsn(ASTORE, 6);
methodVisitor.visitVarInsn(ALOAD, 6);
Label label7 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label7);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "serp/bytecode/LocalVariableTypeTable", "replaceTarget", "(Lserp/bytecode/Instruction;Lserp/bytecode/Instruction;)V", false);
methodVisitor.visitLabel(label7);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"serp/bytecode/LocalVariableTypeTable"}, 0, null);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(3, 7);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_STATIC | ACC_SYNTHETIC, "access$000", "(Lserp/bytecode/Code$CodeIterator;Ljava/lang/Object;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "serp/bytecode/Code$CodeIterator", "addInternal", "(Ljava/lang/Object;)V", false);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(2, 2);
methodVisitor.visitEnd();
}
classWriter.visitEnd();

return classWriter.toByteArray();
}
}
