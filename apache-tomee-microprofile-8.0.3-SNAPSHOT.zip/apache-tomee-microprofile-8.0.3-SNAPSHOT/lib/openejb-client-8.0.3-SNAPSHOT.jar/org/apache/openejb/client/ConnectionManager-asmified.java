package asm.org.apache.openejb.client;
import org.objectweb.asm.AnnotationVisitor;
import org.objectweb.asm.Attribute;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.ConstantDynamic;
import org.objectweb.asm.FieldVisitor;
import org.objectweb.asm.Handle;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.RecordComponentVisitor;
import org.objectweb.asm.Type;
import org.objectweb.asm.TypePath;
public class ConnectionManagerDump implements Opcodes {

public static byte[] dump () throws Exception {

ClassWriter classWriter = new ClassWriter(0);
FieldVisitor fieldVisitor;
RecordComponentVisitor recordComponentVisitor;
MethodVisitor methodVisitor;
AnnotationVisitor annotationVisitor0;

classWriter.visit(V1_8, ACC_PUBLIC | ACC_SUPER, "org/apache/openejb/client/ConnectionManager", null, "java/lang/Object", null);

classWriter.visitInnerClass("org/apache/openejb/client/ConnectionManager$UnsupportedConnectionFactoryException", "org/apache/openejb/client/ConnectionManager", "UnsupportedConnectionFactoryException", ACC_PUBLIC | ACC_STATIC);

classWriter.visitInnerClass("org/apache/openejb/client/ConnectionManager$UnsupportedConnectionStrategyException", "org/apache/openejb/client/ConnectionManager", "UnsupportedConnectionStrategyException", ACC_PUBLIC | ACC_STATIC);

{
fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL | ACC_STATIC, "factories", "Lorg/apache/openejb/client/Registry;", "Lorg/apache/openejb/client/Registry<Lorg/apache/openejb/client/ConnectionFactory;>;", null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL | ACC_STATIC, "strategies", "Lorg/apache/openejb/client/Registry;", "Lorg/apache/openejb/client/Registry<Lorg/apache/openejb/client/ConnectionStrategy;>;", null);
fieldVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);
methodVisitor.visitCode();
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(1, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, "getConnection", "(Lorg/apache/openejb/client/ClusterMetaData;Lorg/apache/openejb/client/ServerMetaData;Lorg/apache/openejb/client/Request;)Lorg/apache/openejb/client/Connection;", null, new String[] { "java/io/IOException" });
methodVisitor.visitCode();
Label label0 = new Label();
Label label1 = new Label();
Label label2 = new Label();
methodVisitor.visitTryCatchBlock(label0, label1, label2, "java/lang/Throwable");
methodVisitor.visitVarInsn(ALOAD, 0);
Label label3 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label3);
methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("cluster cannot be null");
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
Label label4 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label4);
methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("server cannot be null");
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openejb/client/ClusterMetaData", "getConnectionStrategy", "()Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitTypeInsn(INSTANCEOF, "org/apache/openejb/client/EJBRequest");
Label label5 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label5);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openejb/client/EJBRequest");
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openejb/client/EJBRequest", "getEjbMetaData", "()Lorg/apache/openejb/client/EJBMetaDataImpl;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openejb/client/EJBMetaDataImpl", "getProperties", "()Ljava/util/Properties;", false);
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitLdcInsn("openejb.client.connection.strategy");
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/Properties", "getProperty", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/String"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 3);
Label label6 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label6);
methodVisitor.visitLdcInsn("default");
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitLabel(label6);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openejb/client/ConnectionManager", "strategies", "Lorg/apache/openejb/client/Registry;");
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openejb/client/Registry", "get", "(Ljava/lang/String;)Ljava/lang/Object;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openejb/client/ConnectionStrategy");
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitJumpInsn(IFNONNULL, label0);
methodVisitor.visitTypeInsn(NEW, "org/apache/openejb/client/ConnectionManager$UnsupportedConnectionStrategyException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openejb/client/ConnectionManager$UnsupportedConnectionStrategyException", "<init>", "(Ljava/lang/String;)V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openejb/client/ConnectionStrategy"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openejb/client/ConnectionStrategy", "connect", "(Lorg/apache/openejb/client/ClusterMetaData;Lorg/apache/openejb/client/ServerMetaData;)Lorg/apache/openejb/client/Connection;", true);
methodVisitor.visitLabel(label1);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Throwable"});
methodVisitor.visitVarInsn(ASTORE, 5);
methodVisitor.visitTypeInsn(NEW, "org/apache/openejb/client/event/ConnectionStrategyFailed");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openejb/client/event/ConnectionStrategyFailed", "<init>", "(Lorg/apache/openejb/client/ConnectionStrategy;Lorg/apache/openejb/client/ClusterMetaData;Lorg/apache/openejb/client/ServerMetaData;Ljava/lang/Throwable;)V", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openejb/client/Client", "fireEvent", "(Ljava/lang/Object;)V", false);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitTypeInsn(INSTANCEOF, "java/io/IOException");
Label label7 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label7);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitTypeInsn(CHECKCAST, "java/io/IOException");
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label7);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/Throwable"}, 0, null);
methodVisitor.visitTypeInsn(NEW, "java/io/IOException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/io/IOException", "<init>", "(Ljava/lang/Throwable;)V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitMaxs(6, 6);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, "getConnection", "(Ljava/net/URI;)Lorg/apache/openejb/client/Connection;", null, new String[] { "java/io/IOException" });
methodVisitor.visitCode();
Label label0 = new Label();
Label label1 = new Label();
Label label2 = new Label();
methodVisitor.visitTryCatchBlock(label0, label1, label2, "java/lang/Throwable");
methodVisitor.visitVarInsn(ALOAD, 0);
Label label3 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label3);
methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("uri cannot be null");
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label3);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/net/URI", "getScheme", "()Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ASTORE, 1);
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openejb/client/ConnectionManager", "factories", "Lorg/apache/openejb/client/Registry;");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openejb/client/Registry", "get", "(Ljava/lang/String;)Ljava/lang/Object;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openejb/client/ConnectionFactory");
methodVisitor.visitVarInsn(ASTORE, 2);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitJumpInsn(IFNONNULL, label0);
methodVisitor.visitTypeInsn(NEW, "org/apache/openejb/client/ConnectionManager$UnsupportedConnectionFactoryException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openejb/client/ConnectionManager$UnsupportedConnectionFactoryException", "<init>", "(Ljava/lang/String;)V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"java/lang/String", "org/apache/openejb/client/ConnectionFactory"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/apache/openejb/client/ConnectionFactory", "getConnection", "(Ljava/net/URI;)Lorg/apache/openejb/client/Connection;", true);
methodVisitor.visitLabel(label1);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label2);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Throwable"});
methodVisitor.visitVarInsn(ASTORE, 3);
methodVisitor.visitTypeInsn(NEW, "org/apache/openejb/client/event/ConnectionFailed");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openejb/client/event/ConnectionFailed", "<init>", "(Ljava/net/URI;Ljava/lang/Throwable;)V", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openejb/client/Client", "fireEvent", "(Ljava/lang/Object;)V", false);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitTypeInsn(INSTANCEOF, "java/io/IOException");
Label label4 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label4);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitTypeInsn(CHECKCAST, "java/io/IOException");
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label4);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/Throwable"}, 0, null);
methodVisitor.visitTypeInsn(NEW, "java/io/IOException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/io/IOException", "<init>", "(Ljava/lang/Throwable;)V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitMaxs(4, 4);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, "registerFactory", "(Ljava/lang/String;Lorg/apache/openejb/client/ConnectionFactory;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openejb/client/ConnectionManager", "factories", "Lorg/apache/openejb/client/Registry;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openejb/client/Registry", "register", "(Ljava/lang/String;Ljava/lang/Object;)V", false);
methodVisitor.visitTypeInsn(NEW, "org/apache/openejb/client/event/ConnectionFactoryAdded");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openejb/client/event/ConnectionFactoryAdded", "<init>", "(Ljava/lang/String;Lorg/apache/openejb/client/ConnectionFactory;)V", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openejb/client/Client", "fireEvent", "(Ljava/lang/Object;)V", false);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(4, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, "unregisterFactory", "(Ljava/lang/String;)Lorg/apache/openejb/client/ConnectionFactory;", null, null);
methodVisitor.visitCode();
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openejb/client/ConnectionManager", "factories", "Lorg/apache/openejb/client/Registry;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openejb/client/Registry", "unregister", "(Ljava/lang/String;)Ljava/lang/Object;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openejb/client/ConnectionFactory");
methodVisitor.visitVarInsn(ASTORE, 1);
methodVisitor.visitVarInsn(ALOAD, 1);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label0);
methodVisitor.visitTypeInsn(NEW, "org/apache/openejb/client/event/ConnectionFactoryRemoved");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openejb/client/event/ConnectionFactoryRemoved", "<init>", "(Ljava/lang/String;Lorg/apache/openejb/client/ConnectionFactory;)V", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openejb/client/Client", "fireEvent", "(Ljava/lang/Object;)V", false);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openejb/client/ConnectionFactory"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(4, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, "registerStrategy", "(Ljava/lang/String;Lorg/apache/openejb/client/ConnectionStrategy;)V", null, null);
methodVisitor.visitCode();
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openejb/client/ConnectionManager", "strategies", "Lorg/apache/openejb/client/Registry;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openejb/client/Registry", "register", "(Ljava/lang/String;Ljava/lang/Object;)V", false);
methodVisitor.visitTypeInsn(NEW, "org/apache/openejb/client/event/ConnectionStrategyAdded");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openejb/client/event/ConnectionStrategyAdded", "<init>", "(Ljava/lang/String;Lorg/apache/openejb/client/ConnectionStrategy;)V", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openejb/client/Client", "fireEvent", "(Ljava/lang/Object;)V", false);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(4, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, "unregisterStrategy", "(Ljava/lang/String;)Lorg/apache/openejb/client/ConnectionStrategy;", null, null);
methodVisitor.visitCode();
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openejb/client/ConnectionManager", "strategies", "Lorg/apache/openejb/client/Registry;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openejb/client/Registry", "unregister", "(Ljava/lang/String;)Ljava/lang/Object;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openejb/client/ConnectionStrategy");
methodVisitor.visitVarInsn(ASTORE, 1);
methodVisitor.visitVarInsn(ALOAD, 1);
Label label0 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label0);
methodVisitor.visitTypeInsn(NEW, "org/apache/openejb/client/event/ConnectionStrategyAdded");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openejb/client/event/ConnectionStrategyAdded", "<init>", "(Ljava/lang/String;Lorg/apache/openejb/client/ConnectionStrategy;)V", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openejb/client/Client", "fireEvent", "(Ljava/lang/Object;)V", false);
methodVisitor.visitLabel(label0);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"org/apache/openejb/client/ConnectionStrategy"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitMaxs(4, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC | ACC_DEPRECATED, "setFactory", "(Lorg/apache/openejb/client/ConnectionFactory;)V", null, new String[] { "java/io/IOException" });
{
annotationVisitor0 = methodVisitor.visitAnnotation("Ljava/lang/Deprecated;", true);
annotationVisitor0.visitEnd();
}
methodVisitor.visitCode();
methodVisitor.visitLdcInsn("default");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openejb/client/ConnectionManager", "registerFactory", "(Ljava/lang/String;Lorg/apache/openejb/client/ConnectionFactory;)V", false);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(2, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_STATIC, "<clinit>", "()V", null, null);
methodVisitor.visitCode();
methodVisitor.visitLdcInsn(Type.getType("Lorg/apache/openejb/client/ConnectionFactory;"));
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openejb/client/Registry", "create", "(Ljava/lang/Class;)Lorg/apache/openejb/client/Registry;", false);
methodVisitor.visitFieldInsn(PUTSTATIC, "org/apache/openejb/client/ConnectionManager", "factories", "Lorg/apache/openejb/client/Registry;");
methodVisitor.visitLdcInsn(Type.getType("Lorg/apache/openejb/client/ConnectionStrategy;"));
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openejb/client/Registry", "create", "(Ljava/lang/Class;)Lorg/apache/openejb/client/Registry;", false);
methodVisitor.visitFieldInsn(PUTSTATIC, "org/apache/openejb/client/ConnectionManager", "strategies", "Lorg/apache/openejb/client/Registry;");
methodVisitor.visitTypeInsn(NEW, "org/apache/openejb/client/SocketConnectionFactory");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openejb/client/SocketConnectionFactory", "<init>", "()V", false);
methodVisitor.visitVarInsn(ASTORE, 0);
methodVisitor.visitLdcInsn("default");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openejb/client/ConnectionManager", "registerFactory", "(Ljava/lang/String;Lorg/apache/openejb/client/ConnectionFactory;)V", false);
methodVisitor.visitLdcInsn("ejbd");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openejb/client/ConnectionManager", "registerFactory", "(Ljava/lang/String;Lorg/apache/openejb/client/ConnectionFactory;)V", false);
methodVisitor.visitLdcInsn("ejbds");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openejb/client/ConnectionManager", "registerFactory", "(Ljava/lang/String;Lorg/apache/openejb/client/ConnectionFactory;)V", false);
methodVisitor.visitLdcInsn("zejbd");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openejb/client/ConnectionManager", "registerFactory", "(Ljava/lang/String;Lorg/apache/openejb/client/ConnectionFactory;)V", false);
methodVisitor.visitLdcInsn("zejbds");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openejb/client/ConnectionManager", "registerFactory", "(Ljava/lang/String;Lorg/apache/openejb/client/ConnectionFactory;)V", false);
methodVisitor.visitTypeInsn(NEW, "org/apache/openejb/client/HttpConnectionFactory");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openejb/client/HttpConnectionFactory", "<init>", "()V", false);
methodVisitor.visitVarInsn(ASTORE, 1);
methodVisitor.visitLdcInsn("http");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openejb/client/ConnectionManager", "registerFactory", "(Ljava/lang/String;Lorg/apache/openejb/client/ConnectionFactory;)V", false);
methodVisitor.visitLdcInsn("https");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openejb/client/ConnectionManager", "registerFactory", "(Ljava/lang/String;Lorg/apache/openejb/client/ConnectionFactory;)V", false);
methodVisitor.visitLdcInsn("multicast");
methodVisitor.visitTypeInsn(NEW, "org/apache/openejb/client/MulticastConnectionFactory");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openejb/client/MulticastConnectionFactory", "<init>", "()V", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openejb/client/ConnectionManager", "registerFactory", "(Ljava/lang/String;Lorg/apache/openejb/client/ConnectionFactory;)V", false);
methodVisitor.visitLdcInsn("multipulse");
methodVisitor.visitTypeInsn(NEW, "org/apache/openejb/client/MulticastPulseClient");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openejb/client/MulticastPulseClient", "<init>", "()V", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openejb/client/ConnectionManager", "registerFactory", "(Ljava/lang/String;Lorg/apache/openejb/client/ConnectionFactory;)V", false);
methodVisitor.visitLdcInsn("failover");
methodVisitor.visitTypeInsn(NEW, "org/apache/openejb/client/FailoverConnectionFactory");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openejb/client/FailoverConnectionFactory", "<init>", "()V", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openejb/client/ConnectionManager", "registerFactory", "(Ljava/lang/String;Lorg/apache/openejb/client/ConnectionFactory;)V", false);
methodVisitor.visitLdcInsn("sticky");
methodVisitor.visitTypeInsn(NEW, "org/apache/openejb/client/StickyConnectionStrategy");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openejb/client/StickyConnectionStrategy", "<init>", "()V", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openejb/client/ConnectionManager", "registerStrategy", "(Ljava/lang/String;Lorg/apache/openejb/client/ConnectionStrategy;)V", false);
methodVisitor.visitLdcInsn("direct");
methodVisitor.visitTypeInsn(NEW, "org/apache/openejb/client/DirectConnectionStrategy");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openejb/client/DirectConnectionStrategy", "<init>", "()V", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openejb/client/ConnectionManager", "registerStrategy", "(Ljava/lang/String;Lorg/apache/openejb/client/ConnectionStrategy;)V", false);
methodVisitor.visitLdcInsn("sticky+random");
methodVisitor.visitTypeInsn(NEW, "org/apache/openejb/client/StickyConnectionStrategy");
methodVisitor.visitInsn(DUP);
methodVisitor.visitTypeInsn(NEW, "org/apache/openejb/client/RandomConnectionStrategy");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openejb/client/RandomConnectionStrategy", "<init>", "()V", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openejb/client/StickyConnectionStrategy", "<init>", "(Lorg/apache/openejb/client/AbstractConnectionStrategy;)V", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openejb/client/ConnectionManager", "registerStrategy", "(Ljava/lang/String;Lorg/apache/openejb/client/ConnectionStrategy;)V", false);
methodVisitor.visitLdcInsn("sticky+round");
methodVisitor.visitTypeInsn(NEW, "org/apache/openejb/client/StickyConnectionStrategy");
methodVisitor.visitInsn(DUP);
methodVisitor.visitTypeInsn(NEW, "org/apache/openejb/client/RoundRobinConnectionStrategy");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openejb/client/RoundRobinConnectionStrategy", "<init>", "()V", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openejb/client/StickyConnectionStrategy", "<init>", "(Lorg/apache/openejb/client/AbstractConnectionStrategy;)V", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openejb/client/ConnectionManager", "registerStrategy", "(Ljava/lang/String;Lorg/apache/openejb/client/ConnectionStrategy;)V", false);
methodVisitor.visitLdcInsn("random");
methodVisitor.visitTypeInsn(NEW, "org/apache/openejb/client/RandomConnectionStrategy");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openejb/client/RandomConnectionStrategy", "<init>", "()V", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openejb/client/ConnectionManager", "registerStrategy", "(Ljava/lang/String;Lorg/apache/openejb/client/ConnectionStrategy;)V", false);
methodVisitor.visitLdcInsn("roundrobin");
methodVisitor.visitTypeInsn(NEW, "org/apache/openejb/client/RoundRobinConnectionStrategy");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/openejb/client/RoundRobinConnectionStrategy", "<init>", "()V", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openejb/client/ConnectionManager", "registerStrategy", "(Ljava/lang/String;Lorg/apache/openejb/client/ConnectionStrategy;)V", false);
methodVisitor.visitLdcInsn("round-robin");
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openejb/client/ConnectionManager", "strategies", "Lorg/apache/openejb/client/Registry;");
methodVisitor.visitLdcInsn("roundrobin");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openejb/client/Registry", "get", "(Ljava/lang/String;)Ljava/lang/Object;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openejb/client/ConnectionStrategy");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openejb/client/ConnectionManager", "registerStrategy", "(Ljava/lang/String;Lorg/apache/openejb/client/ConnectionStrategy;)V", false);
methodVisitor.visitLdcInsn("default");
methodVisitor.visitFieldInsn(GETSTATIC, "org/apache/openejb/client/ConnectionManager", "strategies", "Lorg/apache/openejb/client/Registry;");
methodVisitor.visitLdcInsn("sticky");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/openejb/client/Registry", "get", "(Ljava/lang/String;)Ljava/lang/Object;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/openejb/client/ConnectionStrategy");
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/openejb/client/ConnectionManager", "registerStrategy", "(Ljava/lang/String;Lorg/apache/openejb/client/ConnectionStrategy;)V", false);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(5, 2);
methodVisitor.visitEnd();
}
classWriter.visitEnd();

return classWriter.toByteArray();
}
}
